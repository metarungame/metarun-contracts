{
  "address": "0x4d5820952202972310DfF4F45B8906058e8D28c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeDurationDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yieldRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earlyUnstakeFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestTime",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_LOCKUP_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocatedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyUnstakeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestableYield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getStakesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDurationDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakesOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unallocatedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnallocatedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x651d9b79104996efa79d0976a8aa0982b2da2a6487a6a5ab64fcb022a8adabeb",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0x4d5820952202972310DfF4F45B8906058e8D28c1",
    "transactionIndex": 19,
    "gasUsed": "2513168",
    "logsBloom": "0x
    "blockHash": "0x443d99dc8d6fbb0ab0f485cca2497d33047fe74d1966b162497bc6d1b7a36e40",
    "transactionHash": "0x651d9b79104996efa79d0976a8aa0982b2da2a6487a6a5ab64fcb022a8adabeb",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 18580174,
        "transactionHash": "0x651d9b79104996efa79d0976a8aa0982b2da2a6487a6a5ab64fcb022a8adabeb",
        "address": "0x4d5820952202972310DfF4F45B8906058e8D28c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x443d99dc8d6fbb0ab0f485cca2497d33047fe74d1966b162497bc6d1b7a36e40"
      }
    ],
    "blockNumber": 18580174,
    "cumulativeGasUsed": "6292683",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3FD710225B4F56e41259a469640e826964e39D91",
    180,
    450,
    450
  ],
  "numDeployments": 1,
  "solcInputHash": "c7904c712c23e52b6308f7f402d9510b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeDurationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yieldRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyUnstakeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestTime\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_LOCKUP_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyUnstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestableYield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getStakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDurationDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unallocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnallocatedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"the constructor arguments:\",\"params\":{\"_earlyUnstakeFee\":\"fee for unstaking before stake expiration\",\"_stakeDurationDays\":\"the stake duration in days\",\"_token\":\"address of token - the same accepted for staking and used to pay rewards\",\"_yieldRate\":\"reward rate in basis points (1/10000)\"}},\"getStake(address,uint256)\":{\"details\":\"get the individual stake parameters of the user\",\"params\":{\"_stakeId\":\"stake index\",\"_userAddress\":\"account of staker\"},\"returns\":{\"endTime\":\"the time when unstaking (w.o. penalties) becomes possible\",\"harvestableYield\":\"The unlocked part of yield available for harvesting\",\"harvestedYield\":\"The part of yield user harvested already\",\"lastHarvestTime\":\"The time of last harvest event\",\"staked\":\"the status of stake\",\"stakedAmount\":\"the number of deposited tokens\",\"startTime\":\"the moment of stake start\",\"totalYield\":\"entire yield for the stake (totally released on endTime)\"}},\"getStakesLength(address)\":{\"details\":\"get the count of user's stakes. Used on frontend to iterate and display individual stakes\",\"params\":{\"_userAddress\":\"account of staker\"},\"returns\":{\"_0\":\"stakes\"}},\"harvest(uint256)\":{\"details\":\"harvest accumulated rewards. Can be called many times.\",\"params\":{\"_stakeId\":\"Id of the stake\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256)\":{\"details\":\"submit the stake\",\"params\":{\"_amount\":\"amount of tokens to be transferred from user's account\"}},\"start()\":{\"details\":\"start accepting new stakes. Called only by the owner\"},\"stop()\":{\"details\":\"stop accepting new stakes. Called only by the owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unallocatedTokens()\":{\"details\":\"get the amount of available tokens neither staked nor allocated for rewards\",\"returns\":{\"_0\":\"amount of unallocated tokens\"}},\"unstake(uint256)\":{\"details\":\"withdraw the `body` of user's stake. Can be called only once\",\"params\":{\"_stakeId\":\"Id of the stake\"}},\"withdrawUnallocatedTokens(address,uint256)\":{\"details\":\"the owner is able to withdraw excess tokens to collect early unstake fees or to reuse unused funds suitable for assets rebalancing between staking contracts.\",\"params\":{\"_amount\":\"amount of tokens in atto (1e-18) units\",\"_to\":\"address who will receive the funds\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FixedStaking.sol\":\"FixedStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/FixedStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FixedStaking is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // user deposits are recorded in StakeInfo[] stakes struct\\n    struct StakeInfo {\\n        // staked is true if deposit is staked and hasn't been unstaked.\\n        // After user claims his stake back, `staked` becomes false\\n        bool staked;\\n        // stakedAmount get recorded at the stake time and doesn't change.\\n        uint256 stakedAmount;\\n        uint256 startTime;\\n        // endTime and totalYield get calculated in advance at the moment of staking\\n        // endTime is the date when unstaking becomes possible (without penalties)\\n        uint256 endTime;\\n        // totalYield is a total value of rewards for the given stake.\\n        // Gets calculated on the stake start and doesnt' change\\n        // but the amount that user is able to withdraw gets gradually unlocked over time.\\n        uint256 totalYield;\\n        // The amount of yield user already harvested and the time of last harvest call.\\n        uint256 harvestedYield;\\n        uint256 lastHarvestTime;\\n    }\\n\\n    // If stakesOpen == true, the contract is operational and accepts new stakes.\\n    // Otherwise it allows just harvesting and unstaking.\\n    bool public stakesOpen;\\n\\n    // The token accepted for staking and used for rewards (The same token for both).\\n    IERC20 public token;\\n\\n    // struccture that stores the records of users' stakes\\n    mapping(address => StakeInfo[]) public stakes;\\n\\n    // the total number of staked tokens. Accounted separately to avoid mixing stake and reward balances\\n    uint256 public stakedTokens;\\n\\n    // The staking interval in days.\\n    // Early unstaking is possible but a fine is withheld.\\n    uint256 public stakeDurationDays;\\n\\n    // Fee for early unstake in basis points (1/10000)\\n    // If the user withdraws before stake expiration, he pays `earlyUnstakeFee`\\n    uint256 public earlyUnstakeFee;\\n\\n    // Reward that staker will receive for his stake\\n    // nominated in basis points (1/10000) of staked amount\\n    uint256 public yieldRate;\\n\\n    // Yield tokens reserved for existing stakes to pay on harvest.\\n    // The reward tokens get allocated at the moment of stake.\\n    uint256 public allocatedTokens;\\n\\n    // unallocated (excess) tokens can be withdrawn by the contract owner not earlier than 18 months\\n    uint256 public constant WITHDRAWAL_LOCKUP_DURATION = 30 days * 18;\\n    uint256 public withdrawalUnlockTime;\\n\\n    event Stake(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 startTime, uint256 endTime);\\n\\n    event Unstake(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 startTime, uint256 endTime, bool early);\\n\\n    event Harvest(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 harvestTime);\\n\\n    /**\\n     * @dev the constructor arguments:\\n     * @param _token address of token - the same accepted for staking and used to pay rewards\\n     * @param _stakeDurationDays the stake duration in days\\n     * @param _yieldRate reward rate in basis points (1/10000)\\n     * @param _earlyUnstakeFee fee for unstaking before stake expiration\\n     */\\n    constructor(\\n        address _token,\\n        uint256 _stakeDurationDays,\\n        uint256 _yieldRate,\\n        uint256 _earlyUnstakeFee\\n    ) {\\n        require(_token != address(0), \\\"Empty token address\\\");\\n        require(_yieldRate > 0, \\\"Zero yield rate\\\");\\n        require(_earlyUnstakeFee > 0, \\\"Zero early Unstake Fee\\\");\\n        token = IERC20(_token);\\n        stakeDurationDays = _stakeDurationDays;\\n        yieldRate = _yieldRate;\\n        earlyUnstakeFee = _earlyUnstakeFee;\\n        withdrawalUnlockTime = _now().add(WITHDRAWAL_LOCKUP_DURATION);\\n    }\\n\\n    /**\\n     * @dev the owner is able to withdraw excess tokens to collect early unstake fees or to reuse unused funds\\n     * suitable for assets rebalancing between staking contracts.\\n     * @param _to  address who will receive the funds\\n     * @param _amount amount of tokens in atto (1e-18) units\\n     */\\n    function withdrawUnallocatedTokens(address _to, uint256 _amount) public onlyOwner {\\n        require(_to != address(0), \\\"Empty receiver address\\\");\\n        require(_amount > 0, \\\"Zero amount\\\");\\n        require(unallocatedTokens() >= _amount, \\\"Not enough unallocatedTokens\\\");\\n        require(_now() >= withdrawalUnlockTime, \\\"Can't withdraw until withdrawalUnlockTime\\\");\\n        token.safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev start accepting new stakes. Called only by the owner\\n     */\\n    function start() public onlyOwner {\\n        require(!stakesOpen, \\\"Stakes are open already\\\");\\n        stakesOpen = true;\\n    }\\n\\n    /**\\n     * @dev stop accepting new stakes. Called only by the owner\\n     */\\n    function stop() public onlyOwner {\\n        require(stakesOpen, \\\"Stakes are stopped already\\\");\\n        stakesOpen = false;\\n    }\\n\\n    /**\\n     * @dev submit the stake\\n     * @param _amount   amount of tokens to be transferred from user's account\\n     */\\n    function stake(uint256 _amount) external {\\n        require(stakesOpen, \\\"stake: not open\\\");\\n        require(_amount > 0, \\\"stake: zero amount\\\");\\n        // entire reward allocated for the user for this stake\\n        uint256 totalYield = _amount.mul(yieldRate).div(10000);\\n        require(unallocatedTokens() >= totalYield, \\\"stake: not enough allotted tokens to pay yield\\\");\\n        uint256 startTime = _now();\\n        uint256 endTime = _now().add(stakeDurationDays.mul(1 days));\\n        stakes[msg.sender].push(\\n            StakeInfo({\\n                staked: true,\\n                stakedAmount: _amount,\\n                startTime: startTime,\\n                endTime: endTime,\\n                totalYield: totalYield,\\n                harvestedYield: 0,\\n                lastHarvestTime: startTime\\n            })\\n        );\\n        allocatedTokens = allocatedTokens.add(totalYield);\\n        stakedTokens = stakedTokens.add(_amount);\\n        uint256 stakeId = getStakesLength(msg.sender).sub(1);\\n        emit Stake(msg.sender, stakeId, _amount, startTime, endTime);\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev withdraw the `body` of user's stake. Can be called only once\\n     * @param _stakeId   Id of the stake\\n     */\\n    function unstake(uint256 _stakeId) external {\\n        (\\n            bool staked,\\n            uint256 stakedAmount,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalYield,\\n            uint256 harvestedYield,\\n            ,\\n            uint256 harvestableYield\\n        ) = getStake(msg.sender, _stakeId);\\n        bool early;\\n        require(staked, \\\"Unstaked already\\\");\\n        if (_now() > endTime) {\\n            stakes[msg.sender][_stakeId].staked = false;\\n            stakedTokens = stakedTokens.sub(stakedAmount);\\n            early = false;\\n            token.safeTransfer(msg.sender, stakedAmount);\\n        } else {\\n            uint256 newTotalYield = harvestedYield.add(harvestableYield);\\n            allocatedTokens = allocatedTokens.sub(totalYield.sub(newTotalYield));\\n            stakes[msg.sender][_stakeId].staked = false;\\n            stakes[msg.sender][_stakeId].endTime = _now();\\n            stakes[msg.sender][_stakeId].totalYield = newTotalYield;\\n            stakedTokens = stakedTokens.sub(stakedAmount);\\n            early = true;\\n\\n            uint256 fee = stakedAmount.mul(earlyUnstakeFee).div(10000);\\n            uint256 amountToTransfer = stakedAmount.sub(fee);\\n            token.safeTransfer(msg.sender, amountToTransfer);\\n        }\\n\\n        emit Unstake(msg.sender, _stakeId, stakedAmount, startTime, endTime, early);\\n    }\\n\\n    /**\\n     * @dev harvest accumulated rewards. Can be called many times.\\n     * @param _stakeId   Id of the stake\\n     */\\n    function harvest(uint256 _stakeId) external {\\n        (, , , , , uint256 harvestedYield, , uint256 harvestableYield) = getStake(msg.sender, _stakeId);\\n        require(harvestableYield != 0, \\\"harvestableYield is zero\\\");\\n        allocatedTokens = allocatedTokens.sub(harvestableYield);\\n        stakes[msg.sender][_stakeId].harvestedYield = harvestedYield.add(harvestableYield);\\n        stakes[msg.sender][_stakeId].lastHarvestTime = _now();\\n        emit Harvest(msg.sender, _stakeId, harvestableYield, _now());\\n        token.safeTransfer(msg.sender, harvestableYield);\\n    }\\n\\n    /**\\n     * @dev get the amount of available tokens neither staked nor allocated for rewards\\n     * @return amount of unallocated tokens\\n     */\\n    function unallocatedTokens() public view returns (uint256) {\\n        return token.balanceOf(address(this)).sub(stakedTokens).sub(allocatedTokens);\\n    }\\n\\n    /**\\n     * @dev get the count of user's stakes. Used on frontend to iterate and display individual stakes\\n     * @param _userAddress account of staker\\n     * @return stakes\\n     */\\n    function getStakesLength(address _userAddress) public view returns (uint256) {\\n        return stakes[_userAddress].length;\\n    }\\n\\n    /**\\n     * @dev get the individual stake parameters of the user\\n     * @param _userAddress account of staker\\n     * @param _stakeId stake index\\n     * @return staked the status of stake\\n     * @return stakedAmount the number of deposited tokens\\n     * @return startTime the moment of stake start\\n     * @return endTime the time when unstaking (w.o. penalties) becomes possible\\n     * @return totalYield entire yield for the stake (totally released on endTime)\\n     * @return harvestedYield The part of yield user harvested already\\n     * @return lastHarvestTime The time of last harvest event\\n     * @return harvestableYield The unlocked part of yield available for harvesting\\n     */\\n    function getStake(address _userAddress, uint256 _stakeId)\\n        public\\n        view\\n        returns (\\n            bool staked,\\n            uint256 stakedAmount,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalYield, // Entire yield for the stake (totally released on endTime)\\n            uint256 harvestedYield, // The part of yield user harvested already\\n            uint256 lastHarvestTime, // The time of last harvest event\\n            uint256 harvestableYield // The unlocked part of yield available for harvesting\\n        )\\n    {\\n        StakeInfo memory _stake = stakes[_userAddress][_stakeId];\\n        staked = _stake.staked;\\n        stakedAmount = _stake.stakedAmount;\\n        startTime = _stake.startTime;\\n        endTime = _stake.endTime;\\n        totalYield = _stake.totalYield;\\n        harvestedYield = _stake.harvestedYield;\\n        lastHarvestTime = _stake.lastHarvestTime;\\n        if (_now() > endTime) {\\n            harvestableYield = totalYield.sub(harvestedYield);\\n        } else {\\n            harvestableYield = totalYield.mul(_now().sub(lastHarvestTime)).div(endTime.sub(startTime));\\n        }\\n    }\\n\\n    // Returns block.timestamp, overridable for test purposes.\\n    function _now() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0b91b0fb926fc51e67635bf6c2603e06948ae0f2d452fb60f0c572260fc16c54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ffa38038062002ffa83398181016040528101906200003791906200037a565b620000576200004b620001e960201b60201c565b620001f160201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c1906200044d565b60405180910390fd5b6000821162000110576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010790620004bf565b60405180910390fd5b6000811162000156576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014d9062000531565b60405180910390fd5b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826004819055508160068190555080600581905550620001d96302c7ea00620001c5620002b560201b60201c565b620002bd60201b620016301790919060201c565b60088190555050505050620005df565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600042905090565b60008183620002cd919062000582565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030782620002da565b9050919050565b6200031981620002fa565b81146200032557600080fd5b50565b60008151905062000339816200030e565b92915050565b6000819050919050565b62000354816200033f565b81146200036057600080fd5b50565b600081519050620003748162000349565b92915050565b60008060008060808587031215620003975762000396620002d5565b5b6000620003a78782880162000328565b9450506020620003ba8782880162000363565b9350506040620003cd8782880162000363565b9250506060620003e08782880162000363565b91505092959194509250565b600082825260208201905092915050565b7f456d70747920746f6b656e206164647265737300000000000000000000000000600082015250565b600062000435601383620003ec565b91506200044282620003fd565b602082019050919050565b60006020820190508181036000830152620004688162000426565b9050919050565b7f5a65726f207969656c6420726174650000000000000000000000000000000000600082015250565b6000620004a7600f83620003ec565b9150620004b4826200046f565b602082019050919050565b60006020820190508181036000830152620004da8162000498565b9050919050565b7f5a65726f206561726c7920556e7374616b652046656500000000000000000000600082015250565b600062000519601683620003ec565b91506200052682620004e1565b602082019050919050565b600060208201905081810360008301526200054c816200050a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200058f826200033f565b91506200059c836200033f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620005d457620005d362000553565b5b828201905092915050565b612a0b80620005ef6000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c8063715018a6116100b8578063cb6290091161007c578063cb6290091461030e578063cb913c821461032c578063cfd476631461034a578063ddc6326214610381578063f2fde38b1461039d578063fc0c546a146103b957610141565b8063715018a6146102905780638da5cb5b1461029a578063909767d9146102b8578063a694fc3a146102e8578063be9a65551461030457610141565b80632736f3ea1161010a5780632736f3ea146101c6578063296ee19f146101e45780632e17de781461020257806354b6081e1461021e578063584b62a11461023c5780636999ac931461027257610141565b80622f9569146101465780630711306d1461016457806307da68f51461018257806313f063091461018c578063245acab2146101a8575b600080fd5b61014e6103d7565b60405161015b9190611af1565b60405180910390f35b61016c6103dd565b6040516101799190611af1565b60405180910390f35b61018a6103e3565b005b6101a660048036038101906101a19190611b9b565b6104ca565b005b6101b06106e0565b6040516101bd9190611af1565b60405180910390f35b6101ce6106e6565b6040516101db9190611af1565b60405180910390f35b6101ec6106ee565b6040516101f99190611af1565b60405180910390f35b61021c60048036038101906102179190611bdb565b6107b9565b005b610226610bc2565b6040516102339190611af1565b60405180910390f35b61025660048036038101906102519190611b9b565b610bc8565b6040516102699796959493929190611c23565b60405180910390f35b61027a610c34565b6040516102879190611af1565b60405180910390f35b610298610c3a565b005b6102a2610cc2565b6040516102af9190611ca1565b60405180910390f35b6102d260048036038101906102cd9190611cbc565b610ceb565b6040516102df9190611af1565b60405180910390f35b61030260048036038101906102fd9190611bdb565b610d37565b005b61030c61107d565b005b610316611166565b6040516103239190611af1565b60405180910390f35b61033461116c565b6040516103419190611ce9565b60405180910390f35b610364600480360381019061035f9190611b9b565b61117f565b604051610378989796959493929190611d04565b60405180910390f35b61039b60048036038101906103969190611bdb565b61130b565b005b6103b760048036038101906103b29190611cbc565b611512565b005b6103c161160a565b6040516103ce9190611de1565b60405180910390f35b60075481565b60055481565b6103eb611646565b73ffffffffffffffffffffffffffffffffffffffff16610409610cc2565b73ffffffffffffffffffffffffffffffffffffffff161461045f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045690611e59565b60405180910390fd5b600060149054906101000a900460ff166104ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a590611ec5565b60405180910390fd5b60008060146101000a81548160ff021916908315150217905550565b6104d2611646565b73ffffffffffffffffffffffffffffffffffffffff166104f0610cc2565b73ffffffffffffffffffffffffffffffffffffffff1614610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90611e59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ad90611f31565b60405180910390fd5b600081116105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f090611f9d565b60405180910390fd5b806106026106ee565b1015610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90612009565b60405180910390fd5b60085461064e61164e565b101561068f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106869061209b565b60405180910390fd5b6106dc8282600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116569092919063ffffffff16565b5050565b60045481565b6302c7ea0081565b60006107b46007546107a6600354600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107579190611ca1565b602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079891906120d0565b6116dc90919063ffffffff16565b6116dc90919063ffffffff16565b905090565b60008060008060008060006107ce338961117f565b97505096509650965096509650965060008761081f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081690612149565b60405180910390fd5b8461082861164e565b111561091a576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a8154811061088157610880612169565b5b906000526020600020906007020160000160006101000a81548160ff0219169083151502179055506108be876003546116dc90919063ffffffff16565b600381905550600090506109153388600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116569092919063ffffffff16565b610b62565b600061092f838561163090919063ffffffff16565b905061095861094782876116dc90919063ffffffff16565b6007546116dc90919063ffffffff16565b6007819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b815481106109b1576109b0612169565b5b906000526020600020906007020160000160006101000a81548160ff0219169083151502179055506109e161164e565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b81548110610a3257610a31612169565b5b90600052602060002090600702016003018190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b81548110610a9957610a98612169565b5b906000526020600020906007020160040181905550610ac3886003546116dc90919063ffffffff16565b600381905550600191506000610af8612710610aea6005548c6116f290919063ffffffff16565b61170890919063ffffffff16565b90506000610b0f828b6116dc90919063ffffffff16565b9050610b5e3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116569092919063ffffffff16565b5050505b883373ffffffffffffffffffffffffffffffffffffffff167fc27678b8d9d59c0688159890347f79df5b543dff3fcad311f8142181a3661c1489898986604051610baf9493929190612198565b60405180910390a3505050505050505050565b60085481565b60026020528160005260406000208181548110610be457600080fd5b9060005260206000209060070201600091509150508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154905087565b60065481565b610c42611646565b73ffffffffffffffffffffffffffffffffffffffff16610c60610cc2565b73ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cad90611e59565b60405180910390fd5b610cc0600061171e565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600060149054906101000a900460ff16610d86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7d90612229565b60405180910390fd5b60008111610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc090612295565b60405180910390fd5b6000610df4612710610de6600654856116f290919063ffffffff16565b61170890919063ffffffff16565b905080610dff6106ee565b1015610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3790612327565b60405180910390fd5b6000610e4a61164e565b90506000610e7f610e69620151806004546116f290919063ffffffff16565b610e7161164e565b61163090919063ffffffff16565b9050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052806001151581526020018681526020018481526020018381526020018581526020016000815260200184815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c082015181600601555050610f938360075461163090919063ffffffff16565b600781905550610fae8460035461163090919063ffffffff16565b6003819055506000610fd26001610fc433610ceb565b6116dc90919063ffffffff16565b9050803373ffffffffffffffffffffffffffffffffffffffff167f2720efa4b2dd4f3f8a347da3cbd290a522e9432da9072c5b8e6300496fdde28287868660405161101f93929190612347565b60405180910390a3611076333087600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117e2909392919063ffffffff16565b5050505050565b611085611646565b73ffffffffffffffffffffffffffffffffffffffff166110a3610cc2565b73ffffffffffffffffffffffffffffffffffffffff16146110f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f090611e59565b60405180910390fd5b600060149054906101000a900460ff1615611149576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611140906123ca565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550565b60035481565b600060149054906101000a900460ff1681565b6000806000806000806000806000600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a815481106111de576111dd612169565b5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050905080600001519850806020015197508060400151965080606001519550806080015194508060a0015193508060c0015192508561128a61164e565b11156112aa576112a384866116dc90919063ffffffff16565b91506112fd565b6112fa6112c088886116dc90919063ffffffff16565b6112ec6112dd866112cf61164e565b6116dc90919063ffffffff16565b886116f290919063ffffffff16565b61170890919063ffffffff16565b91505b509295985092959890939650565b600080611318338461117f565b975050965050505050506000811415611366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135d90612436565b60405180910390fd5b61137b816007546116dc90919063ffffffff16565b600781905550611394818361163090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106113e5576113e4612169565b5b90600052602060002090600702016005018190555061140261164e565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061145357611452612169565b5b906000526020600020906007020160060181905550823373ffffffffffffffffffffffffffffffffffffffff167f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe76836114aa61164e565b6040516114b8929190612456565b60405180910390a361150d3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116569092919063ffffffff16565b505050565b61151a611646565b73ffffffffffffffffffffffffffffffffffffffff16611538610cc2565b73ffffffffffffffffffffffffffffffffffffffff161461158e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158590611e59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f5906124f1565b60405180910390fd5b6116078161171e565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818361163e9190612540565b905092915050565b600033905090565b600042905090565b6116d78363a9059cbb60e01b8484604051602401611675929190612596565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061186b565b505050565b600081836116ea91906125bf565b905092915050565b6000818361170091906125f3565b905092915050565b60008183611716919061267c565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611865846323b872dd60e01b858585604051602401611803939291906126ad565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061186b565b50505050565b60006118cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119329092919063ffffffff16565b905060008151111561192d57808060200190518101906118ed9190612710565b61192c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611923906127af565b60405180910390fd5b5b505050565b6060611941848460008561194a565b90509392505050565b60608247101561198f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198690612841565b60405180910390fd5b61199885611a5e565b6119d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ce906128ad565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a009190612947565b60006040518083038185875af1925050503d8060008114611a3d576040519150601f19603f3d011682016040523d82523d6000602084013e611a42565b606091505b5091509150611a52828286611a71565b92505050949350505050565b600080823b905060008111915050919050565b60608315611a8157829050611ad1565b600083511115611a945782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac891906129b3565b60405180910390fd5b9392505050565b6000819050919050565b611aeb81611ad8565b82525050565b6000602082019050611b066000830184611ae2565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b3c82611b11565b9050919050565b611b4c81611b31565b8114611b5757600080fd5b50565b600081359050611b6981611b43565b92915050565b611b7881611ad8565b8114611b8357600080fd5b50565b600081359050611b9581611b6f565b92915050565b60008060408385031215611bb257611bb1611b0c565b5b6000611bc085828601611b5a565b9250506020611bd185828601611b86565b9150509250929050565b600060208284031215611bf157611bf0611b0c565b5b6000611bff84828501611b86565b91505092915050565b60008115159050919050565b611c1d81611c08565b82525050565b600060e082019050611c38600083018a611c14565b611c456020830189611ae2565b611c526040830188611ae2565b611c5f6060830187611ae2565b611c6c6080830186611ae2565b611c7960a0830185611ae2565b611c8660c0830184611ae2565b98975050505050505050565b611c9b81611b31565b82525050565b6000602082019050611cb66000830184611c92565b92915050565b600060208284031215611cd257611cd1611b0c565b5b6000611ce084828501611b5a565b91505092915050565b6000602082019050611cfe6000830184611c14565b92915050565b600061010082019050611d1a600083018b611c14565b611d27602083018a611ae2565b611d346040830189611ae2565b611d416060830188611ae2565b611d4e6080830187611ae2565b611d5b60a0830186611ae2565b611d6860c0830185611ae2565b611d7560e0830184611ae2565b9998505050505050505050565b6000819050919050565b6000611da7611da2611d9d84611b11565b611d82565b611b11565b9050919050565b6000611db982611d8c565b9050919050565b6000611dcb82611dae565b9050919050565b611ddb81611dc0565b82525050565b6000602082019050611df66000830184611dd2565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e43602083611dfc565b9150611e4e82611e0d565b602082019050919050565b60006020820190508181036000830152611e7281611e36565b9050919050565b7f5374616b6573206172652073746f7070656420616c7265616479000000000000600082015250565b6000611eaf601a83611dfc565b9150611eba82611e79565b602082019050919050565b60006020820190508181036000830152611ede81611ea2565b9050919050565b7f456d707479207265636569766572206164647265737300000000000000000000600082015250565b6000611f1b601683611dfc565b9150611f2682611ee5565b602082019050919050565b60006020820190508181036000830152611f4a81611f0e565b9050919050565b7f5a65726f20616d6f756e74000000000000000000000000000000000000000000600082015250565b6000611f87600b83611dfc565b9150611f9282611f51565b602082019050919050565b60006020820190508181036000830152611fb681611f7a565b9050919050565b7f4e6f7420656e6f75676820756e616c6c6f6361746564546f6b656e7300000000600082015250565b6000611ff3601c83611dfc565b9150611ffe82611fbd565b602082019050919050565b6000602082019050818103600083015261202281611fe6565b9050919050565b7f43616e277420776974686472617720756e74696c207769746864726177616c5560008201527f6e6c6f636b54696d650000000000000000000000000000000000000000000000602082015250565b6000612085602983611dfc565b915061209082612029565b604082019050919050565b600060208201905081810360008301526120b481612078565b9050919050565b6000815190506120ca81611b6f565b92915050565b6000602082840312156120e6576120e5611b0c565b5b60006120f4848285016120bb565b91505092915050565b7f556e7374616b656420616c726561647900000000000000000000000000000000600082015250565b6000612133601083611dfc565b915061213e826120fd565b602082019050919050565b6000602082019050818103600083015261216281612126565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006080820190506121ad6000830187611ae2565b6121ba6020830186611ae2565b6121c76040830185611ae2565b6121d46060830184611c14565b95945050505050565b7f7374616b653a206e6f74206f70656e0000000000000000000000000000000000600082015250565b6000612213600f83611dfc565b915061221e826121dd565b602082019050919050565b6000602082019050818103600083015261224281612206565b9050919050565b7f7374616b653a207a65726f20616d6f756e740000000000000000000000000000600082015250565b600061227f601283611dfc565b915061228a82612249565b602082019050919050565b600060208201905081810360008301526122ae81612272565b9050919050565b7f7374616b653a206e6f7420656e6f75676820616c6c6f7474656420746f6b656e60008201527f7320746f20706179207969656c64000000000000000000000000000000000000602082015250565b6000612311602e83611dfc565b915061231c826122b5565b604082019050919050565b6000602082019050818103600083015261234081612304565b9050919050565b600060608201905061235c6000830186611ae2565b6123696020830185611ae2565b6123766040830184611ae2565b949350505050565b7f5374616b657320617265206f70656e20616c7265616479000000000000000000600082015250565b60006123b4601783611dfc565b91506123bf8261237e565b602082019050919050565b600060208201905081810360008301526123e3816123a7565b9050919050565b7f6861727665737461626c655969656c64206973207a65726f0000000000000000600082015250565b6000612420601883611dfc565b915061242b826123ea565b602082019050919050565b6000602082019050818103600083015261244f81612413565b9050919050565b600060408201905061246b6000830185611ae2565b6124786020830184611ae2565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124db602683611dfc565b91506124e68261247f565b604082019050919050565b6000602082019050818103600083015261250a816124ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061254b82611ad8565b915061255683611ad8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561258b5761258a612511565b5b828201905092915050565b60006040820190506125ab6000830185611c92565b6125b86020830184611ae2565b9392505050565b60006125ca82611ad8565b91506125d583611ad8565b9250828210156125e8576125e7612511565b5b828203905092915050565b60006125fe82611ad8565b915061260983611ad8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561264257612641612511565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061268782611ad8565b915061269283611ad8565b9250826126a2576126a161264d565b5b828204905092915050565b60006060820190506126c26000830186611c92565b6126cf6020830185611c92565b6126dc6040830184611ae2565b949350505050565b6126ed81611c08565b81146126f857600080fd5b50565b60008151905061270a816126e4565b92915050565b60006020828403121561272657612725611b0c565b5b6000612734848285016126fb565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612799602a83611dfc565b91506127a48261273d565b604082019050919050565b600060208201905081810360008301526127c88161278c565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061282b602683611dfc565b9150612836826127cf565b604082019050919050565b6000602082019050818103600083015261285a8161281e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612897601d83611dfc565b91506128a282612861565b602082019050919050565b600060208201905081810360008301526128c68161288a565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156129015780820151818401526020810190506128e6565b83811115612910576000848401525b50505050565b6000612921826128cd565b61292b81856128d8565b935061293b8185602086016128e3565b80840191505092915050565b60006129538284612916565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006129858261295e565b61298f8185611dfc565b935061299f8185602086016128e3565b6129a881612969565b840191505092915050565b600060208201905081810360008301526129cd818461297a565b90509291505056fea26469706673582212205a167de98f52cf140b1a18d9bdffcf8928e97628c83772469a7ef34b89a18ca364736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101415760003560e01c8063715018a6116100b8578063cb6290091161007c578063cb6290091461030e578063cb913c821461032c578063cfd476631461034a578063ddc6326214610381578063f2fde38b1461039d578063fc0c546a146103b957610141565b8063715018a6146102905780638da5cb5b1461029a578063909767d9146102b8578063a694fc3a146102e8578063be9a65551461030457610141565b80632736f3ea1161010a5780632736f3ea146101c6578063296ee19f146101e45780632e17de781461020257806354b6081e1461021e578063584b62a11461023c5780636999ac931461027257610141565b80622f9569146101465780630711306d1461016457806307da68f51461018257806313f063091461018c578063245acab2146101a8575b600080fd5b61014e6103d7565b60405161015b9190611af1565b60405180910390f35b61016c6103dd565b6040516101799190611af1565b60405180910390f35b61018a6103e3565b005b6101a660048036038101906101a19190611b9b565b6104ca565b005b6101b06106e0565b6040516101bd9190611af1565b60405180910390f35b6101ce6106e6565b6040516101db9190611af1565b60405180910390f35b6101ec6106ee565b6040516101f99190611af1565b60405180910390f35b61021c60048036038101906102179190611bdb565b6107b9565b005b610226610bc2565b6040516102339190611af1565b60405180910390f35b61025660048036038101906102519190611b9b565b610bc8565b6040516102699796959493929190611c23565b60405180910390f35b61027a610c34565b6040516102879190611af1565b60405180910390f35b610298610c3a565b005b6102a2610cc2565b6040516102af9190611ca1565b60405180910390f35b6102d260048036038101906102cd9190611cbc565b610ceb565b6040516102df9190611af1565b60405180910390f35b61030260048036038101906102fd9190611bdb565b610d37565b005b61030c61107d565b005b610316611166565b6040516103239190611af1565b60405180910390f35b61033461116c565b6040516103419190611ce9565b60405180910390f35b610364600480360381019061035f9190611b9b565b61117f565b604051610378989796959493929190611d04565b60405180910390f35b61039b60048036038101906103969190611bdb565b61130b565b005b6103b760048036038101906103b29190611cbc565b611512565b005b6103c161160a565b6040516103ce9190611de1565b60405180910390f35b60075481565b60055481565b6103eb611646565b73ffffffffffffffffffffffffffffffffffffffff16610409610cc2565b73ffffffffffffffffffffffffffffffffffffffff161461045f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045690611e59565b60405180910390fd5b600060149054906101000a900460ff166104ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a590611ec5565b60405180910390fd5b60008060146101000a81548160ff021916908315150217905550565b6104d2611646565b73ffffffffffffffffffffffffffffffffffffffff166104f0610cc2565b73ffffffffffffffffffffffffffffffffffffffff1614610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90611e59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ad90611f31565b60405180910390fd5b600081116105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f090611f9d565b60405180910390fd5b806106026106ee565b1015610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90612009565b60405180910390fd5b60085461064e61164e565b101561068f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106869061209b565b60405180910390fd5b6106dc8282600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116569092919063ffffffff16565b5050565b60045481565b6302c7ea0081565b60006107b46007546107a6600354600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107579190611ca1565b602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079891906120d0565b6116dc90919063ffffffff16565b6116dc90919063ffffffff16565b905090565b60008060008060008060006107ce338961117f565b97505096509650965096509650965060008761081f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081690612149565b60405180910390fd5b8461082861164e565b111561091a576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a8154811061088157610880612169565b5b906000526020600020906007020160000160006101000a81548160ff0219169083151502179055506108be876003546116dc90919063ffffffff16565b600381905550600090506109153388600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116569092919063ffffffff16565b610b62565b600061092f838561163090919063ffffffff16565b905061095861094782876116dc90919063ffffffff16565b6007546116dc90919063ffffffff16565b6007819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b815481106109b1576109b0612169565b5b906000526020600020906007020160000160006101000a81548160ff0219169083151502179055506109e161164e565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b81548110610a3257610a31612169565b5b90600052602060002090600702016003018190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b81548110610a9957610a98612169565b5b906000526020600020906007020160040181905550610ac3886003546116dc90919063ffffffff16565b600381905550600191506000610af8612710610aea6005548c6116f290919063ffffffff16565b61170890919063ffffffff16565b90506000610b0f828b6116dc90919063ffffffff16565b9050610b5e3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116569092919063ffffffff16565b5050505b883373ffffffffffffffffffffffffffffffffffffffff167fc27678b8d9d59c0688159890347f79df5b543dff3fcad311f8142181a3661c1489898986604051610baf9493929190612198565b60405180910390a3505050505050505050565b60085481565b60026020528160005260406000208181548110610be457600080fd5b9060005260206000209060070201600091509150508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154905087565b60065481565b610c42611646565b73ffffffffffffffffffffffffffffffffffffffff16610c60610cc2565b73ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cad90611e59565b60405180910390fd5b610cc0600061171e565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600060149054906101000a900460ff16610d86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7d90612229565b60405180910390fd5b60008111610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc090612295565b60405180910390fd5b6000610df4612710610de6600654856116f290919063ffffffff16565b61170890919063ffffffff16565b905080610dff6106ee565b1015610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3790612327565b60405180910390fd5b6000610e4a61164e565b90506000610e7f610e69620151806004546116f290919063ffffffff16565b610e7161164e565b61163090919063ffffffff16565b9050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052806001151581526020018681526020018481526020018381526020018581526020016000815260200184815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c082015181600601555050610f938360075461163090919063ffffffff16565b600781905550610fae8460035461163090919063ffffffff16565b6003819055506000610fd26001610fc433610ceb565b6116dc90919063ffffffff16565b9050803373ffffffffffffffffffffffffffffffffffffffff167f2720efa4b2dd4f3f8a347da3cbd290a522e9432da9072c5b8e6300496fdde28287868660405161101f93929190612347565b60405180910390a3611076333087600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117e2909392919063ffffffff16565b5050505050565b611085611646565b73ffffffffffffffffffffffffffffffffffffffff166110a3610cc2565b73ffffffffffffffffffffffffffffffffffffffff16146110f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f090611e59565b60405180910390fd5b600060149054906101000a900460ff1615611149576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611140906123ca565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550565b60035481565b600060149054906101000a900460ff1681565b6000806000806000806000806000600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a815481106111de576111dd612169565b5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050905080600001519850806020015197508060400151965080606001519550806080015194508060a0015193508060c0015192508561128a61164e565b11156112aa576112a384866116dc90919063ffffffff16565b91506112fd565b6112fa6112c088886116dc90919063ffffffff16565b6112ec6112dd866112cf61164e565b6116dc90919063ffffffff16565b886116f290919063ffffffff16565b61170890919063ffffffff16565b91505b509295985092959890939650565b600080611318338461117f565b975050965050505050506000811415611366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135d90612436565b60405180910390fd5b61137b816007546116dc90919063ffffffff16565b600781905550611394818361163090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106113e5576113e4612169565b5b90600052602060002090600702016005018190555061140261164e565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061145357611452612169565b5b906000526020600020906007020160060181905550823373ffffffffffffffffffffffffffffffffffffffff167f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe76836114aa61164e565b6040516114b8929190612456565b60405180910390a361150d3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116569092919063ffffffff16565b505050565b61151a611646565b73ffffffffffffffffffffffffffffffffffffffff16611538610cc2565b73ffffffffffffffffffffffffffffffffffffffff161461158e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158590611e59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f5906124f1565b60405180910390fd5b6116078161171e565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818361163e9190612540565b905092915050565b600033905090565b600042905090565b6116d78363a9059cbb60e01b8484604051602401611675929190612596565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061186b565b505050565b600081836116ea91906125bf565b905092915050565b6000818361170091906125f3565b905092915050565b60008183611716919061267c565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611865846323b872dd60e01b858585604051602401611803939291906126ad565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061186b565b50505050565b60006118cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119329092919063ffffffff16565b905060008151111561192d57808060200190518101906118ed9190612710565b61192c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611923906127af565b60405180910390fd5b5b505050565b6060611941848460008561194a565b90509392505050565b60608247101561198f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198690612841565b60405180910390fd5b61199885611a5e565b6119d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ce906128ad565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a009190612947565b60006040518083038185875af1925050503d8060008114611a3d576040519150601f19603f3d011682016040523d82523d6000602084013e611a42565b606091505b5091509150611a52828286611a71565b92505050949350505050565b600080823b905060008111915050919050565b60608315611a8157829050611ad1565b600083511115611a945782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac891906129b3565b60405180910390fd5b9392505050565b6000819050919050565b611aeb81611ad8565b82525050565b6000602082019050611b066000830184611ae2565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b3c82611b11565b9050919050565b611b4c81611b31565b8114611b5757600080fd5b50565b600081359050611b6981611b43565b92915050565b611b7881611ad8565b8114611b8357600080fd5b50565b600081359050611b9581611b6f565b92915050565b60008060408385031215611bb257611bb1611b0c565b5b6000611bc085828601611b5a565b9250506020611bd185828601611b86565b9150509250929050565b600060208284031215611bf157611bf0611b0c565b5b6000611bff84828501611b86565b91505092915050565b60008115159050919050565b611c1d81611c08565b82525050565b600060e082019050611c38600083018a611c14565b611c456020830189611ae2565b611c526040830188611ae2565b611c5f6060830187611ae2565b611c6c6080830186611ae2565b611c7960a0830185611ae2565b611c8660c0830184611ae2565b98975050505050505050565b611c9b81611b31565b82525050565b6000602082019050611cb66000830184611c92565b92915050565b600060208284031215611cd257611cd1611b0c565b5b6000611ce084828501611b5a565b91505092915050565b6000602082019050611cfe6000830184611c14565b92915050565b600061010082019050611d1a600083018b611c14565b611d27602083018a611ae2565b611d346040830189611ae2565b611d416060830188611ae2565b611d4e6080830187611ae2565b611d5b60a0830186611ae2565b611d6860c0830185611ae2565b611d7560e0830184611ae2565b9998505050505050505050565b6000819050919050565b6000611da7611da2611d9d84611b11565b611d82565b611b11565b9050919050565b6000611db982611d8c565b9050919050565b6000611dcb82611dae565b9050919050565b611ddb81611dc0565b82525050565b6000602082019050611df66000830184611dd2565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e43602083611dfc565b9150611e4e82611e0d565b602082019050919050565b60006020820190508181036000830152611e7281611e36565b9050919050565b7f5374616b6573206172652073746f7070656420616c7265616479000000000000600082015250565b6000611eaf601a83611dfc565b9150611eba82611e79565b602082019050919050565b60006020820190508181036000830152611ede81611ea2565b9050919050565b7f456d707479207265636569766572206164647265737300000000000000000000600082015250565b6000611f1b601683611dfc565b9150611f2682611ee5565b602082019050919050565b60006020820190508181036000830152611f4a81611f0e565b9050919050565b7f5a65726f20616d6f756e74000000000000000000000000000000000000000000600082015250565b6000611f87600b83611dfc565b9150611f9282611f51565b602082019050919050565b60006020820190508181036000830152611fb681611f7a565b9050919050565b7f4e6f7420656e6f75676820756e616c6c6f6361746564546f6b656e7300000000600082015250565b6000611ff3601c83611dfc565b9150611ffe82611fbd565b602082019050919050565b6000602082019050818103600083015261202281611fe6565b9050919050565b7f43616e277420776974686472617720756e74696c207769746864726177616c5560008201527f6e6c6f636b54696d650000000000000000000000000000000000000000000000602082015250565b6000612085602983611dfc565b915061209082612029565b604082019050919050565b600060208201905081810360008301526120b481612078565b9050919050565b6000815190506120ca81611b6f565b92915050565b6000602082840312156120e6576120e5611b0c565b5b60006120f4848285016120bb565b91505092915050565b7f556e7374616b656420616c726561647900000000000000000000000000000000600082015250565b6000612133601083611dfc565b915061213e826120fd565b602082019050919050565b6000602082019050818103600083015261216281612126565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006080820190506121ad6000830187611ae2565b6121ba6020830186611ae2565b6121c76040830185611ae2565b6121d46060830184611c14565b95945050505050565b7f7374616b653a206e6f74206f70656e0000000000000000000000000000000000600082015250565b6000612213600f83611dfc565b915061221e826121dd565b602082019050919050565b6000602082019050818103600083015261224281612206565b9050919050565b7f7374616b653a207a65726f20616d6f756e740000000000000000000000000000600082015250565b600061227f601283611dfc565b915061228a82612249565b602082019050919050565b600060208201905081810360008301526122ae81612272565b9050919050565b7f7374616b653a206e6f7420656e6f75676820616c6c6f7474656420746f6b656e60008201527f7320746f20706179207969656c64000000000000000000000000000000000000602082015250565b6000612311602e83611dfc565b915061231c826122b5565b604082019050919050565b6000602082019050818103600083015261234081612304565b9050919050565b600060608201905061235c6000830186611ae2565b6123696020830185611ae2565b6123766040830184611ae2565b949350505050565b7f5374616b657320617265206f70656e20616c7265616479000000000000000000600082015250565b60006123b4601783611dfc565b91506123bf8261237e565b602082019050919050565b600060208201905081810360008301526123e3816123a7565b9050919050565b7f6861727665737461626c655969656c64206973207a65726f0000000000000000600082015250565b6000612420601883611dfc565b915061242b826123ea565b602082019050919050565b6000602082019050818103600083015261244f81612413565b9050919050565b600060408201905061246b6000830185611ae2565b6124786020830184611ae2565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124db602683611dfc565b91506124e68261247f565b604082019050919050565b6000602082019050818103600083015261250a816124ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061254b82611ad8565b915061255683611ad8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561258b5761258a612511565b5b828201905092915050565b60006040820190506125ab6000830185611c92565b6125b86020830184611ae2565b9392505050565b60006125ca82611ad8565b91506125d583611ad8565b9250828210156125e8576125e7612511565b5b828203905092915050565b60006125fe82611ad8565b915061260983611ad8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561264257612641612511565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061268782611ad8565b915061269283611ad8565b9250826126a2576126a161264d565b5b828204905092915050565b60006060820190506126c26000830186611c92565b6126cf6020830185611c92565b6126dc6040830184611ae2565b949350505050565b6126ed81611c08565b81146126f857600080fd5b50565b60008151905061270a816126e4565b92915050565b60006020828403121561272657612725611b0c565b5b6000612734848285016126fb565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612799602a83611dfc565b91506127a48261273d565b604082019050919050565b600060208201905081810360008301526127c88161278c565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061282b602683611dfc565b9150612836826127cf565b604082019050919050565b6000602082019050818103600083015261285a8161281e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612897601d83611dfc565b91506128a282612861565b602082019050919050565b600060208201905081810360008301526128c68161288a565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156129015780820151818401526020810190506128e6565b83811115612910576000848401525b50505050565b6000612921826128cd565b61292b81856128d8565b935061293b8185602086016128e3565b80840191505092915050565b60006129538284612916565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006129858261295e565b61298f8185611dfc565b935061299f8185602086016128e3565b6129a881612969565b840191505092915050565b600060208201905081810360008301526129cd818461297a565b90509291505056fea26469706673582212205a167de98f52cf140b1a18d9bdffcf8928e97628c83772469a7ef34b89a18ca364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "the constructor arguments:",
        "params": {
          "_earlyUnstakeFee": "fee for unstaking before stake expiration",
          "_stakeDurationDays": "the stake duration in days",
          "_token": "address of token - the same accepted for staking and used to pay rewards",
          "_yieldRate": "reward rate in basis points (1/10000)"
        }
      },
      "getStake(address,uint256)": {
        "details": "get the individual stake parameters of the user",
        "params": {
          "_stakeId": "stake index",
          "_userAddress": "account of staker"
        },
        "returns": {
          "endTime": "the time when unstaking (w.o. penalties) becomes possible",
          "harvestableYield": "The unlocked part of yield available for harvesting",
          "harvestedYield": "The part of yield user harvested already",
          "lastHarvestTime": "The time of last harvest event",
          "staked": "the status of stake",
          "stakedAmount": "the number of deposited tokens",
          "startTime": "the moment of stake start",
          "totalYield": "entire yield for the stake (totally released on endTime)"
        }
      },
      "getStakesLength(address)": {
        "details": "get the count of user's stakes. Used on frontend to iterate and display individual stakes",
        "params": {
          "_userAddress": "account of staker"
        },
        "returns": {
          "_0": "stakes"
        }
      },
      "harvest(uint256)": {
        "details": "harvest accumulated rewards. Can be called many times.",
        "params": {
          "_stakeId": "Id of the stake"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256)": {
        "details": "submit the stake",
        "params": {
          "_amount": "amount of tokens to be transferred from user's account"
        }
      },
      "start()": {
        "details": "start accepting new stakes. Called only by the owner"
      },
      "stop()": {
        "details": "stop accepting new stakes. Called only by the owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unallocatedTokens()": {
        "details": "get the amount of available tokens neither staked nor allocated for rewards",
        "returns": {
          "_0": "amount of unallocated tokens"
        }
      },
      "unstake(uint256)": {
        "details": "withdraw the `body` of user's stake. Can be called only once",
        "params": {
          "_stakeId": "Id of the stake"
        }
      },
      "withdrawUnallocatedTokens(address,uint256)": {
        "details": "the owner is able to withdraw excess tokens to collect early unstake fees or to reuse unused funds suitable for assets rebalancing between staking contracts.",
        "params": {
          "_amount": "amount of tokens in atto (1e-18) units",
          "_to": "address who will receive the funds"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4246,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakesOpen",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4249,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)2424"
      },
      {
        "astId": 4255,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)4244_storage)dyn_storage)"
      },
      {
        "astId": 4257,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4259,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakeDurationDays",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4261,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "earlyUnstakeFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4263,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "yieldRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4265,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "allocatedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4272,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "withdrawalUnlockTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakeInfo)4244_storage)dyn_storage": {
        "base": "t_struct(StakeInfo)4244_storage",
        "encoding": "dynamic_array",
        "label": "struct FixedStaking.StakeInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2424": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(StakeInfo)4244_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FixedStaking.StakeInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakeInfo)4244_storage)dyn_storage"
      },
      "t_struct(StakeInfo)4244_storage": {
        "encoding": "inplace",
        "label": "struct FixedStaking.StakeInfo",
        "members": [
          {
            "astId": 4231,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "staked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4233,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4235,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4237,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4239,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "totalYield",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4241,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "harvestedYield",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4243,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "lastHarvestTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}