{
  "address": "0xbE173946c6b93B255D54108C965E7581C22F92b9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunExchange.SellOrder",
          "name": "sellOrder",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunExchange.SellOrder",
          "name": "sellOrder",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collection",
      "outputs": [
        {
          "internalType": "contract IERC1155Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunExchange.SellOrder",
          "name": "sellOrder",
          "type": "tuple"
        }
      ],
      "name": "hashSellOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mrunToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mrunToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f06e6e9f2ee9c35b659de74d797347ecc9af91c0f6da95ebd943c2ede1bacb4",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0xbE173946c6b93B255D54108C965E7581C22F92b9",
    "transactionIndex": 2,
    "gasUsed": "2088233",
    "logsBloom": "0x
    "blockHash": "0x015f4d828a620e07a0cb8ab8d49b6fef41e2ac16234f6905365906b1b47021e1",
    "transactionHash": "0x3f06e6e9f2ee9c35b659de74d797347ecc9af91c0f6da95ebd943c2ede1bacb4",
    "logs": [],
    "blockNumber": 20414420,
    "cumulativeGasUsed": "2200808",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "73b76f6b3c747106fa2a2b87822c2050",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunExchange.SellOrder\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunExchange.SellOrder\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"contract IERC1155Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunExchange.SellOrder\",\"name\":\"sellOrder\",\"type\":\"tuple\"}],\"name\":\"hashSellOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mrunToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrunToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Ensures the sale of tokens (exchanging them on Ether) by matching orders\",\"events\":{\"Purchase(bytes32,address,address,uint256,uint256,uint256)\":{\"details\":\"Gets emitted on token purchase\"}},\"kind\":\"dev\",\"methods\":{\"initialize(address,address)\":{\"details\":\"the constructor arguments:\",\"params\":{\"_collection\":\"address of collection - the same used for playing\",\"_mrunToken\":\"address of token - the same used for purchases\"}}},\"title\":\"Metarun ERC-1155 exchange\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetarunExchange.sol\":\"MetarunExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb4132c3e4beb76a6c6b8c5931abecfc426bbd120d14f065d0cd1411675e88693\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/MetarunExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Metarun ERC-1155 exchange\\n * @dev Ensures the sale of tokens (exchanging them on Ether) by matching orders\\n */\\n\\ncontract MetarunExchange is EIP712Upgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    IERC1155Upgradeable public collection;\\n    IERC20Upgradeable public mrunToken;\\n    mapping(bytes32 => bool) sellOrderPerformed;\\n    mapping(bytes32 => bool) sellOrderCancelled;\\n    struct SellOrder {\\n        // address of the current tokenholder\\n        address payable seller;\\n        // id of ERC-1155 token (kind)\\n        uint256 tokenId;\\n        // ERC155 amount of given Id user is going to sell\\n        uint256 amount;\\n        // the point at which order becomes outdated\\n        uint256 expirationTime;\\n        // price in wei (for entire amount of tokens)\\n        uint256 price;\\n        // random salt to prevent duplicate hashes\\n        uint256 salt;\\n    }\\n\\n    /**\\n     * @dev Gets emitted on token purchase\\n     */\\n    event Purchase(bytes32 indexed orderHash, address indexed seller, address indexed buyer, uint256 tokenId, uint256 amount, uint256 price);\\n\\n    event Cancel(bytes32 indexed orderHash, uint256 timestamp);\\n\\n    /**\\n     * @dev the constructor arguments:\\n     * @param _collection address of collection - the same used for playing\\n     * @param _mrunToken address of token - the same used for purchases\\n     */\\n    function initialize(address _collection, address _mrunToken) public initializer {\\n        __EIP712_init(\\\"metarun.game\\\", \\\"0.1\\\");\\n        require(_collection != address(0), \\\"collection address cannot be zero\\\");\\n        require(_mrunToken != address(0), \\\"mrun address cannot be zero\\\");\\n        collection = IERC1155Upgradeable(_collection);\\n        mrunToken = IERC20Upgradeable(_mrunToken);\\n    }\\n\\n    // todo: SECURITY! make non-reentrant!\\n    function buy(SellOrder memory sellOrder, bytes memory signature) external {\\n        bytes32 sellOrderHash = hashSellOrder(sellOrder);\\n        address signer = ECDSAUpgradeable.recover(sellOrderHash, signature);\\n        require(signer != address(0), \\\"BAD_SIGNATURE\\\");\\n        require(signer == sellOrder.seller, \\\"BAD SIGNER\\\");\\n        require(!sellOrderPerformed[sellOrderHash], \\\"ALREADY_DONE\\\");\\n        require(!sellOrderCancelled[sellOrderHash], \\\"ALREADY_CANCELLED\\\");\\n        require(block.timestamp < sellOrder.expirationTime, \\\"EXPIRED\\\");\\n        bytes32 orderHash = hashSellOrder(sellOrder);\\n        emit Purchase(orderHash, sellOrder.seller, msg.sender, sellOrder.tokenId, sellOrder.amount, sellOrder.price);\\n        collection.safeTransferFrom(sellOrder.seller, msg.sender, sellOrder.tokenId, sellOrder.amount, \\\"\\\");\\n        mrunToken.safeTransferFrom(msg.sender, sellOrder.seller, sellOrder.price);\\n        sellOrderPerformed[sellOrderHash] = true;\\n    }\\n\\n    // Returns the hash of the fully encoded EIP712 SellOrder for this domain.\\n    // todo: made public for debugging reasons.\\n    // Need to make it internal to optimize gas consumption\\n    function hashSellOrder(SellOrder memory sellOrder) public view returns (bytes32) {\\n        bytes32 sellOrderTypeHash = keccak256(\\n            \\\"SellOrder(address seller,uint256 tokenId,uint256 amount,uint256 expirationTime,uint256 price,uint256 salt)\\\"\\n        );\\n        bytes32 orderHash = keccak256(\\n            abi.encode(\\n                sellOrderTypeHash,\\n                sellOrder.seller,\\n                sellOrder.tokenId,\\n                sellOrder.amount,\\n                sellOrder.expirationTime,\\n                sellOrder.price,\\n                sellOrder.salt\\n            )\\n        );\\n        return (_hashTypedDataV4(orderHash));\\n    }\\n\\n    function cancel(SellOrder memory sellOrder, bytes memory signature) public {\\n        bytes32 hash = hashSellOrder(sellOrder);\\n        address signer = ECDSAUpgradeable.recover(hash, signature);\\n        require(!sellOrderCancelled[hash], \\\"ALREADY_CANCELLED\\\");\\n        require(!sellOrderPerformed[hash], \\\"ALREADY_DONE\\\");\\n        require(signer == msg.sender, \\\"BAD_SENDER\\\");\\n        sellOrderCancelled[hash] = true;\\n        emit Cancel(hash, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x6b3c92614c842dd324a931890d0b88434597d893d3ab5ea4a744e4c28823b465\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061250f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063485cc955146100675780635d729e8b146100835780635e53f145146100a15780637de1e536146100d15780638b46538c146100ef578063a76c88161461010b575b600080fd5b610081600480360381019061007c9190611338565b610127565b005b61008b6103e1565b60405161009891906113d7565b60405180910390f35b6100bb60048036038101906100b69190611597565b610407565b6040516100c891906115dd565b60405180910390f35b6100d961048e565b6040516100e69190611619565b60405180910390f35b610109600480360381019061010491906116ee565b6104b4565b005b610125600480360381019061012091906116ee565b610669565b005b600060019054906101000a900460ff1661014f5760008054906101000a900460ff1615610158565b610157610a1d565b5b610197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018e906117cd565b60405180910390fd5b60008060019054906101000a900460ff1615905080156101e7576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61025b6040518060400160405280600c81526020017f6d65746172756e2e67616d6500000000000000000000000000000000000000008152506040518060400160405280600381526020017f302e310000000000000000000000000000000000000000000000000000000000815250610a2e565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c19061185f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610339576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610330906118cb565b60405180910390fd5b82603560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156103dc5760008060016101000a81548160ff0219169083151502179055505b505050565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000807f506f2e315ad03a56810fd6bd4798a950bff51cd12e2a1f40bae2969ad4b6cd699050600081846000015185602001518660400151876060015188608001518960a001516040516020016104649796959493929190611909565b60405160208183030381529060405280519060200120905061048581610a8b565b92505050919050565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006104bf83610407565b905060006104cd8284610aa5565b90506038600083815260200190815260200160002060009054906101000a900460ff1615610530576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610527906119c4565b60405180910390fd5b6037600083815260200190815260200160002060009054906101000a900460ff1615610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058890611a30565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690611a9c565b60405180910390fd5b60016038600084815260200190815260200160002060006101000a81548160ff021916908315150217905550817f33c5b2d2e4db5826ca5ff87cc934fddfc7ff1714b18290e32faffa4f5619b8794260405161065b9190611abc565b60405180910390a250505050565b600061067483610407565b905060006106828284610aa5565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea90611b23565b60405180910390fd5b836000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075c90611b8f565b60405180910390fd5b6037600083815260200190815260200160002060009054906101000a900460ff16156107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bd90611a30565b60405180910390fd5b6038600083815260200190815260200160002060009054906101000a900460ff1615610827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081e906119c4565b60405180910390fd5b8360600151421061086d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086490611bfb565b60405180910390fd5b600061087885610407565b90503373ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff16827f39d7ae3c050edb013db51816405491a59692cc2bae0e948a82fa619991fadaa8886020015189604001518a608001516040516108ec93929190611c1b565b60405180910390a4603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a866000015133886020015189604001516040518563ffffffff1660e01b81526004016109619493929190611cb9565b600060405180830381600087803b15801561097b57600080fd5b505af115801561098f573d6000803e3d6000fd5b505050506109ea3386600001518760800151603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610acc909392919063ffffffff16565b60016037600085815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b6000610a2830610b55565b15905090565b600060019054906101000a900460ff16610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7490611d83565b60405180910390fd5b610a878282610b78565b5050565b6000610a9e610a98610bf3565b83610c33565b9050919050565b6000806000610ab48585610c66565b91509150610ac181610ce7565b819250505092915050565b610b4f846323b872dd60e01b858585604051602401610aed93929190611da3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610eb3565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbe90611d83565b60405180910390fd5b600082805190602001209050600082805190602001209050816001819055508060028190555050505050565b6000610c2e7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610c21610f7a565b610c29610f84565b610f8e565b905090565b60008282604051602001610c48929190611e52565b60405160208183030381529060405280519060200120905092915050565b6000806041835103610ca75760008060006020860151925060408601519150606086015160001a9050610c9b87828585610fc8565b94509450505050610ce0565b6040835103610cd7576000806020850151915060408501519050610ccc8683836110d4565b935093505050610ce0565b60006002915091505b9250929050565b60006004811115610cfb57610cfa611e89565b5b816004811115610d0e57610d0d611e89565b5b0315610eb05760016004811115610d2857610d27611e89565b5b816004811115610d3b57610d3a611e89565b5b03610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7290611f04565b60405180910390fd5b60026004811115610d8f57610d8e611e89565b5b816004811115610da257610da1611e89565b5b03610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd990611f70565b60405180910390fd5b60036004811115610df657610df5611e89565b5b816004811115610e0957610e08611e89565b5b03610e49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4090612002565b60405180910390fd5b600480811115610e5c57610e5b611e89565b5b816004811115610e6f57610e6e611e89565b5b03610eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea690612094565b60405180910390fd5b5b50565b6000610f15826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111339092919063ffffffff16565b9050600081511115610f755780806020019051810190610f3591906120ec565b610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b9061218b565b60405180910390fd5b5b505050565b6000600154905090565b6000600254905090565b60008383834630604051602001610fa99594939291906121ab565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156110035760006003915091506110cb565b601b8560ff161415801561101b5750601c8560ff1614155b1561102d5760006004915091506110cb565b600060018787878760405160008152602001604052604051611052949392919061221a565b6020604051602081039080840390855afa158015611074573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110c2576000600192509250506110cb565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c611117919061228e565b905061112587828885610fc8565b935093505050935093915050565b6060611142848460008561114b565b90509392505050565b606082471015611190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118790612356565b60405180910390fd5b61119985610b55565b6111d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cf906123c2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611201919061245c565b60006040518083038185875af1925050503d806000811461123e576040519150601f19603f3d011682016040523d82523d6000602084013e611243565b606091505b509150915061125382828661125f565b92505050949350505050565b6060831561126f578290506112bf565b6000835111156112825782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b691906124b7565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611305826112da565b9050919050565b611315816112fa565b811461132057600080fd5b50565b6000813590506113328161130c565b92915050565b6000806040838503121561134f5761134e6112d0565b5b600061135d85828601611323565b925050602061136e85828601611323565b9150509250929050565b6000819050919050565b600061139d611398611393846112da565b611378565b6112da565b9050919050565b60006113af82611382565b9050919050565b60006113c1826113a4565b9050919050565b6113d1816113b6565b82525050565b60006020820190506113ec60008301846113c8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611440826113f7565b810181811067ffffffffffffffff8211171561145f5761145e611408565b5b80604052505050565b60006114726112c6565b905061147e8282611437565b919050565b600061148e826112da565b9050919050565b61149e81611483565b81146114a957600080fd5b50565b6000813590506114bb81611495565b92915050565b6000819050919050565b6114d4816114c1565b81146114df57600080fd5b50565b6000813590506114f1816114cb565b92915050565b600060c0828403121561150d5761150c6113f2565b5b61151760c0611468565b90506000611527848285016114ac565b600083015250602061153b848285016114e2565b602083015250604061154f848285016114e2565b6040830152506060611563848285016114e2565b6060830152506080611577848285016114e2565b60808301525060a061158b848285016114e2565b60a08301525092915050565b600060c082840312156115ad576115ac6112d0565b5b60006115bb848285016114f7565b91505092915050565b6000819050919050565b6115d7816115c4565b82525050565b60006020820190506115f260008301846115ce565b92915050565b6000611603826113a4565b9050919050565b611613816115f8565b82525050565b600060208201905061162e600083018461160a565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561165957611658611408565b5b611662826113f7565b9050602081019050919050565b82818337600083830152505050565b600061169161168c8461163e565b611468565b9050828152602081018484840111156116ad576116ac611639565b5b6116b884828561166f565b509392505050565b600082601f8301126116d5576116d4611634565b5b81356116e584826020860161167e565b91505092915050565b60008060e08385031215611705576117046112d0565b5b6000611713858286016114f7565b92505060c083013567ffffffffffffffff811115611734576117336112d5565b5b611740858286016116c0565b9150509250929050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006117b7602e8361174a565b91506117c28261175b565b604082019050919050565b600060208201905081810360008301526117e6816117aa565b9050919050565b7f636f6c6c656374696f6e20616464726573732063616e6e6f74206265207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b600061184960218361174a565b9150611854826117ed565b604082019050919050565b600060208201905081810360008301526118788161183c565b9050919050565b7f6d72756e20616464726573732063616e6e6f74206265207a65726f0000000000600082015250565b60006118b5601b8361174a565b91506118c08261187f565b602082019050919050565b600060208201905081810360008301526118e4816118a8565b9050919050565b6118f481611483565b82525050565b611903816114c1565b82525050565b600060e08201905061191e600083018a6115ce565b61192b60208301896118eb565b61193860408301886118fa565b61194560608301876118fa565b61195260808301866118fa565b61195f60a08301856118fa565b61196c60c08301846118fa565b98975050505050505050565b7f414c52454144595f43414e43454c4c4544000000000000000000000000000000600082015250565b60006119ae60118361174a565b91506119b982611978565b602082019050919050565b600060208201905081810360008301526119dd816119a1565b9050919050565b7f414c52454144595f444f4e450000000000000000000000000000000000000000600082015250565b6000611a1a600c8361174a565b9150611a25826119e4565b602082019050919050565b60006020820190508181036000830152611a4981611a0d565b9050919050565b7f4241445f53454e44455200000000000000000000000000000000000000000000600082015250565b6000611a86600a8361174a565b9150611a9182611a50565b602082019050919050565b60006020820190508181036000830152611ab581611a79565b9050919050565b6000602082019050611ad160008301846118fa565b92915050565b7f4241445f5349474e415455524500000000000000000000000000000000000000600082015250565b6000611b0d600d8361174a565b9150611b1882611ad7565b602082019050919050565b60006020820190508181036000830152611b3c81611b00565b9050919050565b7f424144205349474e455200000000000000000000000000000000000000000000600082015250565b6000611b79600a8361174a565b9150611b8482611b43565b602082019050919050565b60006020820190508181036000830152611ba881611b6c565b9050919050565b7f4558504952454400000000000000000000000000000000000000000000000000600082015250565b6000611be560078361174a565b9150611bf082611baf565b602082019050919050565b60006020820190508181036000830152611c1481611bd8565b9050919050565b6000606082019050611c3060008301866118fa565b611c3d60208301856118fa565b611c4a60408301846118fa565b949350505050565b6000611c5d826113a4565b9050919050565b611c6d81611c52565b82525050565b611c7c816112fa565b82525050565b600082825260208201905092915050565b50565b6000611ca3600083611c82565b9150611cae82611c93565b600082019050919050565b600060a082019050611cce6000830187611c64565b611cdb6020830186611c73565b611ce860408301856118fa565b611cf560608301846118fa565b8181036080830152611d0681611c96565b905095945050505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611d6d602b8361174a565b9150611d7882611d11565b604082019050919050565b60006020820190508181036000830152611d9c81611d60565b9050919050565b6000606082019050611db86000830186611c73565b611dc56020830185611c73565b611dd260408301846118fa565b949350505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000611e1b600283611dda565b9150611e2682611de5565b600282019050919050565b6000819050919050565b611e4c611e47826115c4565b611e31565b82525050565b6000611e5d82611e0e565b9150611e698285611e3b565b602082019150611e798284611e3b565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611eee60188361174a565b9150611ef982611eb8565b602082019050919050565b60006020820190508181036000830152611f1d81611ee1565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611f5a601f8361174a565b9150611f6582611f24565b602082019050919050565b60006020820190508181036000830152611f8981611f4d565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611fec60228361174a565b9150611ff782611f90565b604082019050919050565b6000602082019050818103600083015261201b81611fdf565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061207e60228361174a565b915061208982612022565b604082019050919050565b600060208201905081810360008301526120ad81612071565b9050919050565b60008115159050919050565b6120c9816120b4565b81146120d457600080fd5b50565b6000815190506120e6816120c0565b92915050565b600060208284031215612102576121016112d0565b5b6000612110848285016120d7565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612175602a8361174a565b915061218082612119565b604082019050919050565b600060208201905081810360008301526121a481612168565b9050919050565b600060a0820190506121c060008301886115ce565b6121cd60208301876115ce565b6121da60408301866115ce565b6121e760608301856118fa565b6121f46080830184611c73565b9695505050505050565b600060ff82169050919050565b612214816121fe565b82525050565b600060808201905061222f60008301876115ce565b61223c602083018661220b565b61224960408301856115ce565b61225660608301846115ce565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612299826114c1565b91506122a4836114c1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122d9576122d861225f565b5b828201905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061234060268361174a565b915061234b826122e4565b604082019050919050565b6000602082019050818103600083015261236f81612333565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006123ac601d8361174a565b91506123b782612376565b602082019050919050565b600060208201905081810360008301526123db8161239f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156124165780820151818401526020810190506123fb565b83811115612425576000848401525b50505050565b6000612436826123e2565b61244081856123ed565b93506124508185602086016123f8565b80840191505092915050565b6000612468828461242b565b915081905092915050565b600081519050919050565b600061248982612473565b612493818561174a565b93506124a38185602086016123f8565b6124ac816113f7565b840191505092915050565b600060208201905081810360008301526124d1818461247e565b90509291505056fea2646970667358221220923ab32eaf1e04e2b5c1afe2db7f27f1b0ebcbf0c6d6590b60e546fbfe9b78a864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063485cc955146100675780635d729e8b146100835780635e53f145146100a15780637de1e536146100d15780638b46538c146100ef578063a76c88161461010b575b600080fd5b610081600480360381019061007c9190611338565b610127565b005b61008b6103e1565b60405161009891906113d7565b60405180910390f35b6100bb60048036038101906100b69190611597565b610407565b6040516100c891906115dd565b60405180910390f35b6100d961048e565b6040516100e69190611619565b60405180910390f35b610109600480360381019061010491906116ee565b6104b4565b005b610125600480360381019061012091906116ee565b610669565b005b600060019054906101000a900460ff1661014f5760008054906101000a900460ff1615610158565b610157610a1d565b5b610197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018e906117cd565b60405180910390fd5b60008060019054906101000a900460ff1615905080156101e7576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61025b6040518060400160405280600c81526020017f6d65746172756e2e67616d6500000000000000000000000000000000000000008152506040518060400160405280600381526020017f302e310000000000000000000000000000000000000000000000000000000000815250610a2e565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c19061185f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610339576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610330906118cb565b60405180910390fd5b82603560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156103dc5760008060016101000a81548160ff0219169083151502179055505b505050565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000807f506f2e315ad03a56810fd6bd4798a950bff51cd12e2a1f40bae2969ad4b6cd699050600081846000015185602001518660400151876060015188608001518960a001516040516020016104649796959493929190611909565b60405160208183030381529060405280519060200120905061048581610a8b565b92505050919050565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006104bf83610407565b905060006104cd8284610aa5565b90506038600083815260200190815260200160002060009054906101000a900460ff1615610530576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610527906119c4565b60405180910390fd5b6037600083815260200190815260200160002060009054906101000a900460ff1615610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058890611a30565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690611a9c565b60405180910390fd5b60016038600084815260200190815260200160002060006101000a81548160ff021916908315150217905550817f33c5b2d2e4db5826ca5ff87cc934fddfc7ff1714b18290e32faffa4f5619b8794260405161065b9190611abc565b60405180910390a250505050565b600061067483610407565b905060006106828284610aa5565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea90611b23565b60405180910390fd5b836000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075c90611b8f565b60405180910390fd5b6037600083815260200190815260200160002060009054906101000a900460ff16156107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bd90611a30565b60405180910390fd5b6038600083815260200190815260200160002060009054906101000a900460ff1615610827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081e906119c4565b60405180910390fd5b8360600151421061086d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086490611bfb565b60405180910390fd5b600061087885610407565b90503373ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff16827f39d7ae3c050edb013db51816405491a59692cc2bae0e948a82fa619991fadaa8886020015189604001518a608001516040516108ec93929190611c1b565b60405180910390a4603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a866000015133886020015189604001516040518563ffffffff1660e01b81526004016109619493929190611cb9565b600060405180830381600087803b15801561097b57600080fd5b505af115801561098f573d6000803e3d6000fd5b505050506109ea3386600001518760800151603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610acc909392919063ffffffff16565b60016037600085815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b6000610a2830610b55565b15905090565b600060019054906101000a900460ff16610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7490611d83565b60405180910390fd5b610a878282610b78565b5050565b6000610a9e610a98610bf3565b83610c33565b9050919050565b6000806000610ab48585610c66565b91509150610ac181610ce7565b819250505092915050565b610b4f846323b872dd60e01b858585604051602401610aed93929190611da3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610eb3565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbe90611d83565b60405180910390fd5b600082805190602001209050600082805190602001209050816001819055508060028190555050505050565b6000610c2e7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610c21610f7a565b610c29610f84565b610f8e565b905090565b60008282604051602001610c48929190611e52565b60405160208183030381529060405280519060200120905092915050565b6000806041835103610ca75760008060006020860151925060408601519150606086015160001a9050610c9b87828585610fc8565b94509450505050610ce0565b6040835103610cd7576000806020850151915060408501519050610ccc8683836110d4565b935093505050610ce0565b60006002915091505b9250929050565b60006004811115610cfb57610cfa611e89565b5b816004811115610d0e57610d0d611e89565b5b0315610eb05760016004811115610d2857610d27611e89565b5b816004811115610d3b57610d3a611e89565b5b03610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7290611f04565b60405180910390fd5b60026004811115610d8f57610d8e611e89565b5b816004811115610da257610da1611e89565b5b03610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd990611f70565b60405180910390fd5b60036004811115610df657610df5611e89565b5b816004811115610e0957610e08611e89565b5b03610e49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4090612002565b60405180910390fd5b600480811115610e5c57610e5b611e89565b5b816004811115610e6f57610e6e611e89565b5b03610eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea690612094565b60405180910390fd5b5b50565b6000610f15826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111339092919063ffffffff16565b9050600081511115610f755780806020019051810190610f3591906120ec565b610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b9061218b565b60405180910390fd5b5b505050565b6000600154905090565b6000600254905090565b60008383834630604051602001610fa99594939291906121ab565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156110035760006003915091506110cb565b601b8560ff161415801561101b5750601c8560ff1614155b1561102d5760006004915091506110cb565b600060018787878760405160008152602001604052604051611052949392919061221a565b6020604051602081039080840390855afa158015611074573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110c2576000600192509250506110cb565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c611117919061228e565b905061112587828885610fc8565b935093505050935093915050565b6060611142848460008561114b565b90509392505050565b606082471015611190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118790612356565b60405180910390fd5b61119985610b55565b6111d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cf906123c2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611201919061245c565b60006040518083038185875af1925050503d806000811461123e576040519150601f19603f3d011682016040523d82523d6000602084013e611243565b606091505b509150915061125382828661125f565b92505050949350505050565b6060831561126f578290506112bf565b6000835111156112825782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b691906124b7565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611305826112da565b9050919050565b611315816112fa565b811461132057600080fd5b50565b6000813590506113328161130c565b92915050565b6000806040838503121561134f5761134e6112d0565b5b600061135d85828601611323565b925050602061136e85828601611323565b9150509250929050565b6000819050919050565b600061139d611398611393846112da565b611378565b6112da565b9050919050565b60006113af82611382565b9050919050565b60006113c1826113a4565b9050919050565b6113d1816113b6565b82525050565b60006020820190506113ec60008301846113c8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611440826113f7565b810181811067ffffffffffffffff8211171561145f5761145e611408565b5b80604052505050565b60006114726112c6565b905061147e8282611437565b919050565b600061148e826112da565b9050919050565b61149e81611483565b81146114a957600080fd5b50565b6000813590506114bb81611495565b92915050565b6000819050919050565b6114d4816114c1565b81146114df57600080fd5b50565b6000813590506114f1816114cb565b92915050565b600060c0828403121561150d5761150c6113f2565b5b61151760c0611468565b90506000611527848285016114ac565b600083015250602061153b848285016114e2565b602083015250604061154f848285016114e2565b6040830152506060611563848285016114e2565b6060830152506080611577848285016114e2565b60808301525060a061158b848285016114e2565b60a08301525092915050565b600060c082840312156115ad576115ac6112d0565b5b60006115bb848285016114f7565b91505092915050565b6000819050919050565b6115d7816115c4565b82525050565b60006020820190506115f260008301846115ce565b92915050565b6000611603826113a4565b9050919050565b611613816115f8565b82525050565b600060208201905061162e600083018461160a565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561165957611658611408565b5b611662826113f7565b9050602081019050919050565b82818337600083830152505050565b600061169161168c8461163e565b611468565b9050828152602081018484840111156116ad576116ac611639565b5b6116b884828561166f565b509392505050565b600082601f8301126116d5576116d4611634565b5b81356116e584826020860161167e565b91505092915050565b60008060e08385031215611705576117046112d0565b5b6000611713858286016114f7565b92505060c083013567ffffffffffffffff811115611734576117336112d5565b5b611740858286016116c0565b9150509250929050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006117b7602e8361174a565b91506117c28261175b565b604082019050919050565b600060208201905081810360008301526117e6816117aa565b9050919050565b7f636f6c6c656374696f6e20616464726573732063616e6e6f74206265207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b600061184960218361174a565b9150611854826117ed565b604082019050919050565b600060208201905081810360008301526118788161183c565b9050919050565b7f6d72756e20616464726573732063616e6e6f74206265207a65726f0000000000600082015250565b60006118b5601b8361174a565b91506118c08261187f565b602082019050919050565b600060208201905081810360008301526118e4816118a8565b9050919050565b6118f481611483565b82525050565b611903816114c1565b82525050565b600060e08201905061191e600083018a6115ce565b61192b60208301896118eb565b61193860408301886118fa565b61194560608301876118fa565b61195260808301866118fa565b61195f60a08301856118fa565b61196c60c08301846118fa565b98975050505050505050565b7f414c52454144595f43414e43454c4c4544000000000000000000000000000000600082015250565b60006119ae60118361174a565b91506119b982611978565b602082019050919050565b600060208201905081810360008301526119dd816119a1565b9050919050565b7f414c52454144595f444f4e450000000000000000000000000000000000000000600082015250565b6000611a1a600c8361174a565b9150611a25826119e4565b602082019050919050565b60006020820190508181036000830152611a4981611a0d565b9050919050565b7f4241445f53454e44455200000000000000000000000000000000000000000000600082015250565b6000611a86600a8361174a565b9150611a9182611a50565b602082019050919050565b60006020820190508181036000830152611ab581611a79565b9050919050565b6000602082019050611ad160008301846118fa565b92915050565b7f4241445f5349474e415455524500000000000000000000000000000000000000600082015250565b6000611b0d600d8361174a565b9150611b1882611ad7565b602082019050919050565b60006020820190508181036000830152611b3c81611b00565b9050919050565b7f424144205349474e455200000000000000000000000000000000000000000000600082015250565b6000611b79600a8361174a565b9150611b8482611b43565b602082019050919050565b60006020820190508181036000830152611ba881611b6c565b9050919050565b7f4558504952454400000000000000000000000000000000000000000000000000600082015250565b6000611be560078361174a565b9150611bf082611baf565b602082019050919050565b60006020820190508181036000830152611c1481611bd8565b9050919050565b6000606082019050611c3060008301866118fa565b611c3d60208301856118fa565b611c4a60408301846118fa565b949350505050565b6000611c5d826113a4565b9050919050565b611c6d81611c52565b82525050565b611c7c816112fa565b82525050565b600082825260208201905092915050565b50565b6000611ca3600083611c82565b9150611cae82611c93565b600082019050919050565b600060a082019050611cce6000830187611c64565b611cdb6020830186611c73565b611ce860408301856118fa565b611cf560608301846118fa565b8181036080830152611d0681611c96565b905095945050505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611d6d602b8361174a565b9150611d7882611d11565b604082019050919050565b60006020820190508181036000830152611d9c81611d60565b9050919050565b6000606082019050611db86000830186611c73565b611dc56020830185611c73565b611dd260408301846118fa565b949350505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000611e1b600283611dda565b9150611e2682611de5565b600282019050919050565b6000819050919050565b611e4c611e47826115c4565b611e31565b82525050565b6000611e5d82611e0e565b9150611e698285611e3b565b602082019150611e798284611e3b565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611eee60188361174a565b9150611ef982611eb8565b602082019050919050565b60006020820190508181036000830152611f1d81611ee1565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611f5a601f8361174a565b9150611f6582611f24565b602082019050919050565b60006020820190508181036000830152611f8981611f4d565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611fec60228361174a565b9150611ff782611f90565b604082019050919050565b6000602082019050818103600083015261201b81611fdf565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061207e60228361174a565b915061208982612022565b604082019050919050565b600060208201905081810360008301526120ad81612071565b9050919050565b60008115159050919050565b6120c9816120b4565b81146120d457600080fd5b50565b6000815190506120e6816120c0565b92915050565b600060208284031215612102576121016112d0565b5b6000612110848285016120d7565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612175602a8361174a565b915061218082612119565b604082019050919050565b600060208201905081810360008301526121a481612168565b9050919050565b600060a0820190506121c060008301886115ce565b6121cd60208301876115ce565b6121da60408301866115ce565b6121e760608301856118fa565b6121f46080830184611c73565b9695505050505050565b600060ff82169050919050565b612214816121fe565b82525050565b600060808201905061222f60008301876115ce565b61223c602083018661220b565b61224960408301856115ce565b61225660608301846115ce565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612299826114c1565b91506122a4836114c1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122d9576122d861225f565b5b828201905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061234060268361174a565b915061234b826122e4565b604082019050919050565b6000602082019050818103600083015261236f81612333565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006123ac601d8361174a565b91506123b782612376565b602082019050919050565b600060208201905081810360008301526123db8161239f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156124165780820151818401526020810190506123fb565b83811115612425576000848401525b50505050565b6000612436826123e2565b61244081856123ed565b93506124508185602086016123f8565b80840191505092915050565b6000612468828461242b565b915081905092915050565b600081519050919050565b600061248982612473565b612493818561174a565b93506124a38185602086016123f8565b6124ac816113f7565b840191505092915050565b600060208201905081810360008301526124d1818461247e565b90509291505056fea2646970667358221220923ab32eaf1e04e2b5c1afe2db7f27f1b0ebcbf0c6d6590b60e546fbfe9b78a864736f6c634300080d0033",
  "devdoc": {
    "details": "Ensures the sale of tokens (exchanging them on Ether) by matching orders",
    "events": {
      "Purchase(bytes32,address,address,uint256,uint256,uint256)": {
        "details": "Gets emitted on token purchase"
      }
    },
    "kind": "dev",
    "methods": {
      "initialize(address,address)": {
        "details": "the constructor arguments:",
        "params": {
          "_collection": "address of collection - the same used for playing",
          "_mrunToken": "address of token - the same used for purchases"
        }
      }
    },
    "title": "Metarun ERC-1155 exchange",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 532,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 535,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3468,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 3470,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 3608,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7851,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "collection",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IERC1155Upgradeable)1880"
      },
      {
        "astId": 7854,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "mrunToken",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IERC20Upgradeable)2340"
      },
      {
        "astId": 7858,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "sellOrderPerformed",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7862,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "sellOrderCancelled",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC1155Upgradeable)1880": {
        "encoding": "inplace",
        "label": "contract IERC1155Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)2340": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}