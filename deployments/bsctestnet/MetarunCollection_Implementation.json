{
  "address": "0xa76214712F86891066Df92CB6A8c41B7E6723a83",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARTIFACT_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BRONZE_GIVEAWAY_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BRONZE_TICKET_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLISION_DAMAGE_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNGIBLE_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOLD_GIVEAWAY_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOLD_TICKET_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEALTH_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_CLASSIC_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_CLASSIC_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_CLASSIC_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_EPIC_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_EPIC_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_EPIC_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_LEGENDARY_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_LEGENDARY_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIS_LEGENDARY_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANA_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MYSTERY_BOX_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPAL_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_CLASSIC_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_CLASSIC_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_CLASSIC_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_EPIC_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_EPIC_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_EPIC_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_LEGENDARY_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_LEGENDARY_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORO_LEGENDARY_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_CLASSIC_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_CLASSIC_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_CLASSIC_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_EPIC_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_EPIC_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_EPIC_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_LEGENDARY_COMMON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_LEGENDARY_MYTHICAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENNA_LEGENDARY_RARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PET_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILVER_GIVEAWAY_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILVER_TICKET_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPEED_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getKind",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "kind",
          "type": "uint256"
        }
      ],
      "name": "getKindSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPerks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wins",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mana",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "speed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collisionDamage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runsPerDayLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runsTotalLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunCollection.Perks",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isGameToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kind",
          "type": "uint256"
        }
      ],
      "name": "isKind",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "kind",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wins",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mana",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "speed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collisionDamage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runsPerDayLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runsTotalLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunCollection.Perks",
          "name": "perks",
          "type": "tuple"
        }
      ],
      "name": "setPerks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x619b012739f4899339ae2c1fbbf62032da0e9a1a3948cd4a787a9e96a58cf089",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0xa76214712F86891066Df92CB6A8c41B7E6723a83",
    "transactionIndex": 0,
    "gasUsed": "2867324",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2a9192f5ca6c8c2c33cce0872cbccc853b8d26f3e5761c3db2c57ee72b36a985",
    "transactionHash": "0x619b012739f4899339ae2c1fbbf62032da0e9a1a3948cd4a787a9e96a58cf089",
    "logs": [],
    "blockNumber": 22453789,
    "cumulativeGasUsed": "2867324",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "a3a28673e97924dd941bdb662e6db15e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARTIFACT_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRONZE_GIVEAWAY_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRONZE_TICKET_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLISION_DAMAGE_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNGIBLE_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_GIVEAWAY_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_TICKET_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEALTH_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_CLASSIC_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_CLASSIC_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_CLASSIC_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_EPIC_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_EPIC_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_EPIC_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_LEGENDARY_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_LEGENDARY_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIS_LEGENDARY_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANA_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MYSTERY_BOX_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPAL_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_CLASSIC_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_CLASSIC_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_CLASSIC_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_EPIC_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_EPIC_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_EPIC_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_LEGENDARY_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_LEGENDARY_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORO_LEGENDARY_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_CLASSIC_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_CLASSIC_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_CLASSIC_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_EPIC_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_EPIC_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_EPIC_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_LEGENDARY_COMMON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_LEGENDARY_MYTHICAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENNA_LEGENDARY_RARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PET_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER_GIVEAWAY_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER_TICKET_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPEED_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getKind\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"}],\"name\":\"getKindSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPerks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collisionDamage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsPerDayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsTotalLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunCollection.Perks\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isGameToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"}],\"name\":\"isKind\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collisionDamage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsPerDayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsTotalLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunCollection.Perks\",\"name\":\"perks\",\"type\":\"tuple\"}],\"name\":\"setPerks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetarunCollection.sol\":\"MetarunCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x00a36a453484b7145a0d4a0c64daea248a7e806e6be4d7bbae1032a328777c82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xce2d5b25063e871aeca913786040a56117d16f01a819fbdc0b726128b6cbe25a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb04849e624ffff85de1ee3d541aaa058ed9323a26200e34dd443fc46a642ba56\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/MetarunCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\ncontract MetarunCollection is ERC1155Upgradeable, AccessControlUpgradeable, ERC1155BurnableUpgradeable, ERC1155SupplyUpgradeable {\\n    uint256 internal constant KIND_MASK = 0xffffffff0000;\\n\\n    uint256 public constant BRONZE_TICKET_KIND = 0x00000400;\\n    uint256 public constant SILVER_TICKET_KIND = 0x00000401;\\n    uint256 public constant GOLD_TICKET_KIND = 0x00000402;\\n    uint256 public constant BRONZE_GIVEAWAY_KIND = 0x00000403;\\n    uint256 public constant SILVER_GIVEAWAY_KIND = 0x00000404;\\n    uint256 public constant GOLD_GIVEAWAY_KIND = 0x00000405;\\n\\n    uint256 public constant MYSTERY_BOX_KIND = 0x00000406;\\n\\n    uint256 public constant ARTIFACT_TOKEN_KIND = 0x00000100;\\n    uint256 public constant PET_TOKEN_KIND = 0x00000200;\\n\\n    uint256 public constant IGNIS_CLASSIC_COMMON = 0x00010600;\\n    uint256 public constant IGNIS_CLASSIC_RARE = 0x000010601;\\n    uint256 public constant IGNIS_CLASSIC_MYTHICAL = 0x00010602;\\n    uint256 public constant IGNIS_EPIC_COMMON = 0x00010700;\\n    uint256 public constant IGNIS_EPIC_RARE = 0x00010701;\\n    uint256 public constant IGNIS_EPIC_MYTHICAL = 0x00010702;\\n    uint256 public constant IGNIS_LEGENDARY_COMMON = 0x00010800;\\n    uint256 public constant IGNIS_LEGENDARY_RARE = 0x00010801;\\n    uint256 public constant IGNIS_LEGENDARY_MYTHICAL = 0x00010802;\\n\\n    uint256 public constant PENNA_CLASSIC_COMMON = 0x00020600;\\n    uint256 public constant PENNA_CLASSIC_RARE = 0x00020601;\\n    uint256 public constant PENNA_CLASSIC_MYTHICAL = 0x00020602;\\n    uint256 public constant PENNA_EPIC_COMMON = 0x00020700;\\n    uint256 public constant PENNA_EPIC_RARE = 0x00020701;\\n    uint256 public constant PENNA_EPIC_MYTHICAL = 0x00020702;\\n    uint256 public constant PENNA_LEGENDARY_COMMON = 0x00020800;\\n    uint256 public constant PENNA_LEGENDARY_RARE = 0x00020801;\\n    uint256 public constant PENNA_LEGENDARY_MYTHICAL = 0x00020802;\\n\\n    uint256 public constant ORO_CLASSIC_COMMON = 0x00030600;\\n    uint256 public constant ORO_CLASSIC_RARE = 0x00030601;\\n    uint256 public constant ORO_CLASSIC_MYTHICAL = 0x00030602;\\n    uint256 public constant ORO_EPIC_COMMON = 0x00030700;\\n    uint256 public constant ORO_EPIC_RARE = 0x00030701;\\n    uint256 public constant ORO_EPIC_MYTHICAL = 0x00030702;\\n    uint256 public constant ORO_LEGENDARY_COMMON = 0x00030800;\\n    uint256 public constant ORO_LEGENDARY_RARE = 0x00030801;\\n    uint256 public constant ORO_LEGENDARY_MYTHICAL = 0x00030802;\\n\\n    uint256 public constant FUNGIBLE_TOKEN_KIND = 0x00000500;\\n    uint256 public constant HEALTH_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x00000000;\\n    uint256 public constant MANA_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x00000001;\\n    uint256 public constant SPEED_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x00000002;\\n    uint256 public constant COLLISION_DAMAGE_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x00000003;\\n    uint256 public constant OPAL_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x00000004;\\n\\n    mapping(uint256 => uint256) kindSupply;\\n    struct Perks {\\n        uint256 level;\\n        uint256 runs;\\n        uint256 wins;\\n        uint256 ability;\\n        uint256 health;\\n        uint256 mana;\\n        uint256 speed;\\n        uint256 collisionDamage;\\n        uint256 runsPerDayLimit;\\n        uint256 runsTotalLimit;\\n    }\\n\\n    mapping(uint256 => Perks) tokenPerks;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SETTER_ROLE = keccak256(\\\"SETTER_ROLE\\\");\\n\\n    function initialize(string memory uri) public initializer {\\n        __ERC1155_init(uri);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(SETTER_ROLE, _msgSender());\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC1155Upgradeable, AccessControlUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function getKindSupply(uint256 kind) public view returns (uint256) {\\n        return kindSupply[kind];\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need MINTER_ROLE\\\");\\n        if (!isKind(id, FUNGIBLE_TOKEN_KIND)) {\\n            require(amount == 1, \\\"Cannot mint more than one item\\\");\\n            require(!exists(id), \\\"Cannot mint more than one item\\\");\\n        }\\n        _mint(to, id, amount, \\\"\\\");\\n        kindSupply[getKind(id)]++;\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256 kind,\\n        uint256 count\\n    ) public {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"NEED_MINTER_ROLE\\\");\\n        require(kind != FUNGIBLE_TOKEN_KIND, \\\"UNSUITABLE_KIND\\\");\\n        require(count > 0, \\\"COUNT_UNDERFLOW\\\");\\n        uint256[] memory tokenIds = new uint256[](count);\\n        uint256 countOfReadyToMintIds = 0;\\n        uint256 currentTokenId = kind << 16;\\n        while (countOfReadyToMintIds < count) {\\n            require(isKind(currentTokenId, kind), \\\"KIND_OVERFLOW\\\");\\n            if (!exists(currentTokenId)) {\\n                tokenIds[countOfReadyToMintIds] = currentTokenId;\\n                countOfReadyToMintIds++;\\n            }\\n            currentTokenId++;\\n        }\\n        uint256[] memory amounts = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            amounts[i] = 1;\\n        }\\n\\n        _mintBatch(to, tokenIds, amounts, \\\"\\\");\\n        kindSupply[kind] += count;\\n    }\\n\\n    function isGameToken(uint256 id) public pure returns (bool) {\\n        return\\n            getType(id) == IGNIS_CLASSIC_COMMON >> 16 ||\\n            getType(id) == PENNA_CLASSIC_COMMON >> 16 ||\\n            getType(id) == ORO_CLASSIC_COMMON >> 16 ||\\n            isKind(id, BRONZE_TICKET_KIND) ||\\n            isKind(id, SILVER_TICKET_KIND) ||\\n            isKind(id, GOLD_TICKET_KIND) ||\\n            isKind(id, BRONZE_GIVEAWAY_KIND) ||\\n            isKind(id, SILVER_GIVEAWAY_KIND) ||\\n            isKind(id, GOLD_GIVEAWAY_KIND);\\n    }\\n\\n    function getKind(uint256 id) public pure returns (uint256) {\\n        return (KIND_MASK & id) >> 16;\\n    }\\n\\n    function getType(uint256 id) public pure returns (uint256) {\\n        return (id >> 16) >> 16;\\n    }\\n\\n    function isKind(uint256 id, uint256 kind) public pure returns (bool) {\\n        return getKind(id) == kind;\\n    }\\n\\n    function setURI(string memory newUri) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"need DEFAULT_ADMIN_ROLE\\\");\\n        _setURI(newUri);\\n    }\\n\\n    function getPerks(uint256 id) external view returns (Perks memory) {\\n        require(isGameToken(id) || isKind(id, PET_TOKEN_KIND), \\\"Perks are available only for characters, pets and tickets\\\");\\n        return tokenPerks[id];\\n    }\\n\\n    function setPerks(uint256 id, Perks memory perks) public {\\n        require(isGameToken(id) || isKind(id, PET_TOKEN_KIND), \\\"Perks are available only for characters, pets and tickets\\\");\\n        require(hasRole(SETTER_ROLE, _msgSender()), \\\"need SETTER_ROLE\\\");\\n        tokenPerks[id] = perks;\\n    }\\n}\\n\",\"keccak256\":\"0xf15eb042dc34e0bf3ec951e09a202438723a07a8d80914e7748b89b20486ee5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c8062fdd58e1461034757806301ffc9a71461036d57806302fe53051461039057806306093c4c146103a55780630d59c65b146103af5780630d5da3cf146103b95780630e5bda98146103c35780630e89341c146103cb5780630f3f4c18146103eb578063156e29f6146103f55780631a13569f146104085780631c4444c314610412578063248a9ca31461041c578063257a11671461042f5780632b2a43c0146104395780632cc5e3b2146104425780632ce0a9b61461044c5780632d1e97f8146104565780632e81aaea1461045f5780632eb2c2d6146104725780632f2ff15d146104855780632f85a8271461049857806332714229146104ab57806336568abe146104b55780634036ab78146104c8578063492e17fe146104dc5780634e1273f4146104ef5780634f558e791461050f578063528575fd14610522578063565554ff1461052b5780635b945a22146105345780635bd149311461053e57806364b05f191461054857806365a9bf89146105525780636b20c4541461055b5780636ca8fede1461056e5780636dc225d21461058857806377041f1814610592578063792f96cf146105a557806380c9cc44146105ad57806381453cb0146105b75780638478ff27146105c15780638a6ad02e146105ca5780638e2c0bb2146105eb5780638fbe4c6b146105f55780639177595e146105ff57806391d148541461060757806394e9a88d1461061a57806399275190146106245780639c3ddd4a1461062d578063a2011b3f14610636578063a217fddf1461064b578063a22cb46514610653578063bd85b03914610666578063c2b7fe5c14610686578063c95e491114610690578063c9701c1b1461069a578063ca16487b146106a4578063d539139314610730578063d547741f14610745578063d7a9263e14610758578063d91a1d7f14610762578063df4b5aeb1461076b578063e0a3e43414610773578063e0e8223a1461077d578063e368468714610787578063e461781914610791578063e985e9c51461079b578063edd75e94146107d7578063f242432a146107e0578063f5298aca146107f3578063f62d188814610806578063fe4ba8c114610819575b600080fd5b61035a61035536600461255c565b610821565b6040519081526020015b60405180910390f35b61038061037b36600461259c565b6108ba565b6040519015158152602001610364565b6103a361039e36600461268d565b6108cb565b005b61035a6203070181565b61035a6203070081565b61035a6201060081565b61035a610928565b6103de6103d93660046126dd565b61093a565b6040516103649190612752565b61035a6203060181565b6103a3610403366004612765565b6109ce565b61035a6202070281565b61035a6201060281565b61035a61042a3660046126dd565b610adf565b61035a6201080281565b61035a61020081565b61035a6203080081565b61035a6202080281565b61035a61010081565b6103a361046d366004612765565b610af4565b6103a361048036600461284c565b610d82565b6103a36104933660046128f5565b610e19565b6103806104a63660046126dd565b610e3b565b61035a6203080181565b6103a36104c33660046128f5565b610ede565b61035a6104d63660046126dd565b60201c90565b6103806104ea366004612921565b610f5c565b6105026104fd366004612943565b610f6c565b6040516103649190612a48565b61038061051d3660046126dd565b611095565b61035a61040281565b61035a61050081565b61035a6202080181565b61035a6202060281565b61035a6202080081565b61035a61040081565b6103a3610569366004612a5b565b6110a9565b61035a61057c3660046126dd565b60101c63ffffffff1690565b61035a6201060181565b6103a36105a0366004612ace565b6110ec565b61035a6111ed565b61035a6203060281565b61035a6203070281565b61035a61040481565b61035a6105d83660046126dd565b600090815261012d602052604090205490565b61035a6201070281565b61035a6201080081565b61035a6111fc565b6103806106153660046128f5565b61120b565b61035a6202070181565b61035a61040681565b61035a61040581565b61035a60008051602061327083398151915281565b61035a600081565b6103a3610661366004612b75565b611236565b61035a6106743660046126dd565b600090815260fb602052604090205490565b61035a6203060081565b61035a6202060081565b61035a6202060181565b6106b76106b23660046126dd565b611241565b6040516103649190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b61035a60008051602061329083398151915281565b6103a36107533660046128f5565b611353565b61035a6201070181565b61035a61040181565b61035a611370565b61035a6203080281565b61035a6201080181565b61035a6202070081565b61035a6201070081565b6103806107a9366004612bb1565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61035a61040381565b6103a36107ee366004612bdb565b61137f565b6103a3610801366004612765565b6113c4565b6103a361081436600461268d565b611407565b61035a611508565b60006001600160a01b0383166108925760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006108c582611517565b92915050565b6108d660003361120b565b61091c5760405162461bcd60e51b81526020600482015260176024820152766e6565642044454641554c545f41444d494e5f524f4c4560481b6044820152606401610889565b6109258161153c565b50565b61093763050000006003612c55565b81565b60606067805461094990612c6d565b80601f016020809104026020016040519081016040528092919081815260200182805461097590612c6d565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b50505050509050919050565b6109e66000805160206132908339815191523361120b565b610a3e5760405162461bcd60e51b815260206004820152602360248201527f4d45544152554e434f4c4c454354494f4e3a206e656564204d494e5445525f526044820152624f4c4560e81b6064820152608401610889565b610a4a82610500610f5c565b610a945780600114610a6e5760405162461bcd60e51b815260040161088990612ca7565b610a7782611095565b15610a945760405162461bcd60e51b815260040161088990612ca7565b610aaf8383836040518060200160405280600081525061154f565b63ffffffff601083901c16600090815261012d60205260408120805491610ad583612cde565b9190505550505050565b60009081526097602052604090206001015490565b610b0c6000805160206132908339815191523361120b565b610b4b5760405162461bcd60e51b815260206004820152601060248201526f4e4545445f4d494e5445525f524f4c4560801b6044820152606401610889565b6105008203610b8e5760405162461bcd60e51b815260206004820152600f60248201526e155394d552551050931157d2d25391608a1b6044820152606401610889565b60008111610bd05760405162461bcd60e51b815260206004820152600f60248201526e434f554e545f554e444552464c4f5760881b6044820152606401610889565b6000816001600160401b03811115610bea57610bea6125b9565b604051908082528060200260200182016040528015610c13578160200160208202803683370190505b5090506000601084901b5b83821015610cb757610c308186610f5c565b610c6c5760405162461bcd60e51b815260206004820152600d60248201526c4b494e445f4f564552464c4f5760981b6044820152606401610889565b610c7581611095565b610ca55780838381518110610c8c57610c8c612cf7565b602090810291909101015281610ca181612cde565b9250505b80610caf81612cde565b915050610c1e565b6000846001600160401b03811115610cd157610cd16125b9565b604051908082528060200260200182016040528015610cfa578160200160208202803683370190505b50905060005b85811015610d39576001828281518110610d1c57610d1c612cf7565b602090810291909101015280610d3181612cde565b915050610d00565b50610d5587858360405180602001604052806000815250611615565b600086815261012d602052604081208054879290610d74908490612c55565b909155505050505050505050565b6001600160a01b038516331480610d9e5750610d9e85336107a9565b610e055760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610889565b610e12858585858561175e565b5050505050565b610e2282610adf565b610e2c81336118f9565b610e36838361195d565b505050565b60006001610e498360201c90565b1480610e5e57506002610e5c8360201c90565b145b80610e7257506003610e708360201c90565b145b80610e845750610e8482610400610f5c565b80610e965750610e9682610401610f5c565b80610ea85750610ea882610402610f5c565b80610eba5750610eba82610403610f5c565b80610ecc5750610ecc82610404610f5c565b806108c557506108c582610405610f5c565b6001600160a01b0381163314610f4e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610889565b610f5882826119e3565b5050565b60109190911c63ffffffff161490565b60608151835114610fd15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610889565b600083516001600160401b03811115610fec57610fec6125b9565b604051908082528060200260200182016040528015611015578160200160208202803683370190505b50905060005b845181101561108d5761106085828151811061103957611039612cf7565b602002602001015185838151811061105357611053612cf7565b6020026020010151610821565b82828151811061107257611072612cf7565b602090810291909101015261108681612cde565b905061101b565b509392505050565b600090815260fb6020526040902054151590565b6001600160a01b0383163314806110c557506110c583336107a9565b6110e15760405162461bcd60e51b815260040161088990612d0d565b610e36838383611a4a565b6110f582610e3b565b80611107575061110782610200610f5c565b6111235760405162461bcd60e51b815260040161088990612d56565b61113b6000805160206132708339815191523361120b565b61117a5760405162461bcd60e51b815260206004820152601060248201526f6e656564205345545445525f524f4c4560801b6044820152606401610889565b600091825261012e602090815260409283902082518155908201516001820155918101516002830155606081015160038301556080810151600483015560a0810151600583015560c0810151600683015560e0810151600783015561010081015160088301556101200151600990910155565b61093763050000006000612c55565b61093763050000006004612c55565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f58338383611bc9565b611297604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6112a082610e3b565b806112b257506112b282610200610f5c565b6112ce5760405162461bcd60e51b815260040161088990612d56565b50600090815261012e6020908152604091829020825161014081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015260099091015461012082015290565b61135c82610adf565b61136681336118f9565b610e3683836119e3565b61093763050000006002612c55565b6001600160a01b03851633148061139b575061139b85336107a9565b6113b75760405162461bcd60e51b815260040161088990612d0d565b610e128585858585611ca9565b6001600160a01b0383163314806113e057506113e083336107a9565b6113fc5760405162461bcd60e51b815260040161088990612d0d565b610e36838383611db8565b600054610100900460ff166114225760005460ff161561142a565b61142a611eab565b61148d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610889565b600054610100900460ff161580156114af576000805461ffff19166101011790555b6114b882611ebc565b6114c3600033611eec565b6114db60008051602061329083398151915233611eec565b6114f360008051602061327083398151915233611eec565b8015610f58576000805461ff00191690555050565b61093763050000006001612c55565b60006001600160e01b03198216637965db0b60e01b14806108c557506108c582611ef6565b8051610f589060679060208401906124a7565b6001600160a01b0384166115755760405162461bcd60e51b815260040161088990612daf565b336115958160008761158688611f46565b61158f88611f46565b87611f91565b60008481526065602090815260408083206001600160a01b0389168452909152812080548592906115c7908490612c55565b909155505060408051858152602081018590526001600160a01b038088169260009291851691600080516020613250833981519152910160405180910390a4610e1281600087878787611f9f565b6001600160a01b03841661163b5760405162461bcd60e51b815260040161088990612daf565b815183511461165c5760405162461bcd60e51b815260040161088990612df0565b3361166c81600087878787611f91565b60005b84518110156117085783818151811061168a5761168a612cf7565b6020026020010151606560008784815181106116a8576116a8612cf7565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546116f09190612c55565b9091555081905061170081612cde565b91505061166f565b50846001600160a01b031660006001600160a01b0316826001600160a01b03166000805160206132308339815191528787604051611747929190612e38565b60405180910390a4610e1281600087878787612101565b815183511461177f5760405162461bcd60e51b815260040161088990612df0565b6001600160a01b0384166117a55760405162461bcd60e51b815260040161088990612e66565b336117b4818787878787611f91565b60005b845181101561189d5760008582815181106117d4576117d4612cf7565b6020026020010151905060008583815181106117f2576117f2612cf7565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156118435760405162461bcd60e51b815260040161088990612eab565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611882908490612c55565b925050819055505050508061189690612cde565b90506117b7565b50846001600160a01b0316866001600160a01b0316826001600160a01b031660008051602061323083398151915287876040516118db929190612e38565b60405180910390a46118f1818787878787612101565b505050505050565b611903828261120b565b610f585761191b816001600160a01b031660146121c3565b6119268360206121c3565b604051602001611937929190612ef5565b60408051601f198184030181529082905262461bcd60e51b825261088991600401612752565b611967828261120b565b610f585760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561199f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119ed828261120b565b15610f585760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038316611a705760405162461bcd60e51b815260040161088990612f64565b8051825114611a915760405162461bcd60e51b815260040161088990612df0565b6000339050611ab481856000868660405180602001604052806000815250611f91565b60005b8351811015611b7c576000848281518110611ad457611ad4612cf7565b602002602001015190506000848381518110611af257611af2612cf7565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611b435760405162461bcd60e51b815260040161088990612fa7565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611b7481612cde565b915050611ab7565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03166000805160206132308339815191528686604051611bbb929190612e38565b60405180910390a450505050565b816001600160a01b0316836001600160a01b031603611c3c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610889565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611ccf5760405162461bcd60e51b815260040161088990612e66565b33611cdf81878761158688611f46565b60008481526065602090815260408083206001600160a01b038a16845290915290205483811015611d225760405162461bcd60e51b815260040161088990612eab565b60008581526065602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611d61908490612c55565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020613250833981519152910160405180910390a4611daf828888888888611f9f565b50505050505050565b6001600160a01b038316611dde5760405162461bcd60e51b815260040161088990612f64565b33611e0d81856000611def87611f46565b611df887611f46565b60405180602001604052806000815250611f91565b60008381526065602090815260408083206001600160a01b038816845290915290205482811015611e505760405162461bcd60e51b815260040161088990612fa7565b60008481526065602090815260408083206001600160a01b0389811680865291845282852088870390558251898152938401889052909290861691600080516020613250833981519152910160405180910390a45050505050565b6000611eb630612365565b15905090565b600054610100900460ff16611ee35760405162461bcd60e51b815260040161088990612feb565b61092581612374565b610f58828261195d565b60006001600160e01b03198216636cdb3d1360e11b1480611f2757506001600160e01b031982166303a24d0760e21b145b806108c557506301ffc9a760e01b6001600160e01b03198316146108c5565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f8057611f80612cf7565b602090810291909101015292915050565b6118f186868686868661239b565b611fb1846001600160a01b0316612365565b156118f15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611fea9089908990889088908890600401613036565b6020604051808303816000875af1925050508015612025575060408051601f3d908101601f191682019092526120229181019061307b565b60015b6120d157612031613098565b806308c379a00361206a57506120456130b3565b80612050575061206c565b8060405162461bcd60e51b81526004016108899190612752565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610889565b6001600160e01b0319811663f23a6e6160e01b14611daf5760405162461bcd60e51b81526004016108899061313c565b612113846001600160a01b0316612365565b156118f15760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061214c9089908990889088908890600401613184565b6020604051808303816000875af1925050508015612187575060408051601f3d908101601f191682019092526121849181019061307b565b60015b61219357612031613098565b6001600160e01b0319811663bc197c8160e01b14611daf5760405162461bcd60e51b81526004016108899061313c565b606060006121d28360026131e2565b6121dd906002612c55565b6001600160401b038111156121f4576121f46125b9565b6040519080825280601f01601f19166020018201604052801561221e576020820181803683370190505b509050600360fc1b8160008151811061223957612239612cf7565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061226857612268612cf7565b60200101906001600160f81b031916908160001a905350600061228c8460026131e2565b612297906001612c55565b90505b600181111561230f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122cb576122cb612cf7565b1a60f81b8282815181106122e1576122e1612cf7565b60200101906001600160f81b031916908160001a90535060049490941c9361230881613201565b905061229a565b50831561235e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610889565b9392505050565b6001600160a01b03163b151590565b600054610100900460ff1661091c5760405162461bcd60e51b815260040161088990612feb565b6001600160a01b0385166124225760005b8351811015612420578281815181106123c7576123c7612cf7565b602002602001015160fb60008684815181106123e5576123e5612cf7565b60200260200101518152602001908152602001600020600082825461240a9190612c55565b90915550612419905081612cde565b90506123ac565b505b6001600160a01b0384166118f15760005b8351811015611daf5782818151811061244e5761244e612cf7565b602002602001015160fb600086848151811061246c5761246c612cf7565b6020026020010151815260200190815260200160002060008282546124919190613218565b909155506124a0905081612cde565b9050612433565b8280546124b390612c6d565b90600052602060002090601f0160209004810192826124d5576000855561251b565b82601f106124ee57805160ff191683800117855561251b565b8280016001018555821561251b579182015b8281111561251b578251825591602001919060010190612500565b5061252792915061252b565b5090565b5b80821115612527576000815560010161252c565b80356001600160a01b038116811461255757600080fd5b919050565b6000806040838503121561256f57600080fd5b61257883612540565b946020939093013593505050565b6001600160e01b03198116811461092557600080fd5b6000602082840312156125ae57600080fd5b813561235e81612586565b634e487b7160e01b600052604160045260246000fd5b61014081016001600160401b03811182821017156125ef576125ef6125b9565b60405250565b601f8201601f191681016001600160401b038111828210171561261a5761261a6125b9565b6040525050565b60405161262d816125cf565b90565b60006001600160401b03831115612649576126496125b9565b604051612660601f8501601f1916602001826125f5565b80915083815284848401111561267557600080fd5b83836020830137600060208583010152509392505050565b60006020828403121561269f57600080fd5b81356001600160401b038111156126b557600080fd5b8201601f810184136126c657600080fd5b6126d584823560208401612630565b949350505050565b6000602082840312156126ef57600080fd5b5035919050565b60005b838110156127115781810151838201526020016126f9565b83811115612720576000848401525b50505050565b6000815180845261273e8160208601602086016126f6565b601f01601f19169290920160200192915050565b60208152600061235e6020830184612726565b60008060006060848603121561277a57600080fd5b61278384612540565b95602085013595506040909401359392505050565b60006001600160401b038211156127b1576127b16125b9565b5060051b60200190565b600082601f8301126127cc57600080fd5b813560206127d982612798565b6040516127e682826125f5565b83815260059390931b850182019282810191508684111561280657600080fd5b8286015b84811015612821578035835291830191830161280a565b509695505050505050565b600082601f83011261283d57600080fd5b61235e83833560208501612630565b600080600080600060a0868803121561286457600080fd5b61286d86612540565b945061287b60208701612540565b935060408601356001600160401b038082111561289757600080fd5b6128a389838a016127bb565b945060608801359150808211156128b957600080fd5b6128c589838a016127bb565b935060808801359150808211156128db57600080fd5b506128e88882890161282c565b9150509295509295909350565b6000806040838503121561290857600080fd5b8235915061291860208401612540565b90509250929050565b6000806040838503121561293457600080fd5b50508035926020909101359150565b6000806040838503121561295657600080fd5b82356001600160401b038082111561296d57600080fd5b818501915085601f83011261298157600080fd5b8135602061298e82612798565b60405161299b82826125f5565b83815260059390931b85018201928281019150898411156129bb57600080fd5b948201945b838610156129e0576129d186612540565b825294820194908201906129c0565b965050860135925050808211156129f657600080fd5b50612a03858286016127bb565b9150509250929050565b600081518084526020808501945080840160005b83811015612a3d57815187529582019590820190600101612a21565b509495945050505050565b60208152600061235e6020830184612a0d565b600080600060608486031215612a7057600080fd5b612a7984612540565b925060208401356001600160401b0380821115612a9557600080fd5b612aa1878388016127bb565b93506040860135915080821115612ab757600080fd5b50612ac4868287016127bb565b9150509250925092565b600080828403610160811215612ae357600080fd5b8335925061014080601f1983011215612afb57600080fd5b612b03612621565b91506020850135825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e084015261012080870135828501528287013581850152505050809150509250929050565b60008060408385031215612b8857600080fd5b612b9183612540565b915060208301358015158114612ba657600080fd5b809150509250929050565b60008060408385031215612bc457600080fd5b612bcd83612540565b915061291860208401612540565b600080600080600060a08688031215612bf357600080fd5b612bfc86612540565b9450612c0a60208701612540565b9350604086013592506060860135915060808601356001600160401b03811115612c3357600080fd5b6128e88882890161282c565b634e487b7160e01b600052601160045260246000fd5b60008219821115612c6857612c68612c3f565b500190565b600181811c90821680612c8157607f821691505b602082108103612ca157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601e908201527f43616e6e6f74206d696e74206d6f7265207468616e206f6e65206974656d0000604082015260600190565b600060018201612cf057612cf0612c3f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526039908201527f5065726b732061726520617661696c61626c65206f6e6c7920666f7220636861604082015278726163746572732c207065747320616e64207469636b65747360381b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000612e4b6040830185612a0d565b8281036020840152612e5d8185612a0d565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612f278160178501602088016126f6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f588160288401602088016126f6565b01602801949350505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061307090830184612726565b979650505050505050565b60006020828403121561308d57600080fd5b815161235e81612586565b600060033d111561262d5760046000803e5060005160e01c90565b600060443d10156130c15790565b6040516003193d81016004833e81513d6001600160401b0380831160248401831017156130f057505050505090565b82850191508151818111156131085750505050505090565b843d87010160208285010111156131225750505050505090565b613131602082860101876125f5565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906131b090830186612a0d565b82810360608401526131c28186612a0d565b905082810360808401526131d68185612726565b98975050505050505050565b60008160001904831182151516156131fc576131fc612c3f565b500290565b60008161321057613210612c3f565b506000190190565b60008282101561322a5761322a612c3f565b50039056fe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6261c92169ef077349011ff0b1383c894d86c5f0b41d986366b58a6cf31e93beda9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a26469706673582212206d6b873a6c286ae9a9c34a4ee97724b4a25a3b9c3bacb53b7d0621e42c60aff064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103425760003560e01c8062fdd58e1461034757806301ffc9a71461036d57806302fe53051461039057806306093c4c146103a55780630d59c65b146103af5780630d5da3cf146103b95780630e5bda98146103c35780630e89341c146103cb5780630f3f4c18146103eb578063156e29f6146103f55780631a13569f146104085780631c4444c314610412578063248a9ca31461041c578063257a11671461042f5780632b2a43c0146104395780632cc5e3b2146104425780632ce0a9b61461044c5780632d1e97f8146104565780632e81aaea1461045f5780632eb2c2d6146104725780632f2ff15d146104855780632f85a8271461049857806332714229146104ab57806336568abe146104b55780634036ab78146104c8578063492e17fe146104dc5780634e1273f4146104ef5780634f558e791461050f578063528575fd14610522578063565554ff1461052b5780635b945a22146105345780635bd149311461053e57806364b05f191461054857806365a9bf89146105525780636b20c4541461055b5780636ca8fede1461056e5780636dc225d21461058857806377041f1814610592578063792f96cf146105a557806380c9cc44146105ad57806381453cb0146105b75780638478ff27146105c15780638a6ad02e146105ca5780638e2c0bb2146105eb5780638fbe4c6b146105f55780639177595e146105ff57806391d148541461060757806394e9a88d1461061a57806399275190146106245780639c3ddd4a1461062d578063a2011b3f14610636578063a217fddf1461064b578063a22cb46514610653578063bd85b03914610666578063c2b7fe5c14610686578063c95e491114610690578063c9701c1b1461069a578063ca16487b146106a4578063d539139314610730578063d547741f14610745578063d7a9263e14610758578063d91a1d7f14610762578063df4b5aeb1461076b578063e0a3e43414610773578063e0e8223a1461077d578063e368468714610787578063e461781914610791578063e985e9c51461079b578063edd75e94146107d7578063f242432a146107e0578063f5298aca146107f3578063f62d188814610806578063fe4ba8c114610819575b600080fd5b61035a61035536600461255c565b610821565b6040519081526020015b60405180910390f35b61038061037b36600461259c565b6108ba565b6040519015158152602001610364565b6103a361039e36600461268d565b6108cb565b005b61035a6203070181565b61035a6203070081565b61035a6201060081565b61035a610928565b6103de6103d93660046126dd565b61093a565b6040516103649190612752565b61035a6203060181565b6103a3610403366004612765565b6109ce565b61035a6202070281565b61035a6201060281565b61035a61042a3660046126dd565b610adf565b61035a6201080281565b61035a61020081565b61035a6203080081565b61035a6202080281565b61035a61010081565b6103a361046d366004612765565b610af4565b6103a361048036600461284c565b610d82565b6103a36104933660046128f5565b610e19565b6103806104a63660046126dd565b610e3b565b61035a6203080181565b6103a36104c33660046128f5565b610ede565b61035a6104d63660046126dd565b60201c90565b6103806104ea366004612921565b610f5c565b6105026104fd366004612943565b610f6c565b6040516103649190612a48565b61038061051d3660046126dd565b611095565b61035a61040281565b61035a61050081565b61035a6202080181565b61035a6202060281565b61035a6202080081565b61035a61040081565b6103a3610569366004612a5b565b6110a9565b61035a61057c3660046126dd565b60101c63ffffffff1690565b61035a6201060181565b6103a36105a0366004612ace565b6110ec565b61035a6111ed565b61035a6203060281565b61035a6203070281565b61035a61040481565b61035a6105d83660046126dd565b600090815261012d602052604090205490565b61035a6201070281565b61035a6201080081565b61035a6111fc565b6103806106153660046128f5565b61120b565b61035a6202070181565b61035a61040681565b61035a61040581565b61035a60008051602061327083398151915281565b61035a600081565b6103a3610661366004612b75565b611236565b61035a6106743660046126dd565b600090815260fb602052604090205490565b61035a6203060081565b61035a6202060081565b61035a6202060181565b6106b76106b23660046126dd565b611241565b6040516103649190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b61035a60008051602061329083398151915281565b6103a36107533660046128f5565b611353565b61035a6201070181565b61035a61040181565b61035a611370565b61035a6203080281565b61035a6201080181565b61035a6202070081565b61035a6201070081565b6103806107a9366004612bb1565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b61035a61040381565b6103a36107ee366004612bdb565b61137f565b6103a3610801366004612765565b6113c4565b6103a361081436600461268d565b611407565b61035a611508565b60006001600160a01b0383166108925760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006108c582611517565b92915050565b6108d660003361120b565b61091c5760405162461bcd60e51b81526020600482015260176024820152766e6565642044454641554c545f41444d494e5f524f4c4560481b6044820152606401610889565b6109258161153c565b50565b61093763050000006003612c55565b81565b60606067805461094990612c6d565b80601f016020809104026020016040519081016040528092919081815260200182805461097590612c6d565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b50505050509050919050565b6109e66000805160206132908339815191523361120b565b610a3e5760405162461bcd60e51b815260206004820152602360248201527f4d45544152554e434f4c4c454354494f4e3a206e656564204d494e5445525f526044820152624f4c4560e81b6064820152608401610889565b610a4a82610500610f5c565b610a945780600114610a6e5760405162461bcd60e51b815260040161088990612ca7565b610a7782611095565b15610a945760405162461bcd60e51b815260040161088990612ca7565b610aaf8383836040518060200160405280600081525061154f565b63ffffffff601083901c16600090815261012d60205260408120805491610ad583612cde565b9190505550505050565b60009081526097602052604090206001015490565b610b0c6000805160206132908339815191523361120b565b610b4b5760405162461bcd60e51b815260206004820152601060248201526f4e4545445f4d494e5445525f524f4c4560801b6044820152606401610889565b6105008203610b8e5760405162461bcd60e51b815260206004820152600f60248201526e155394d552551050931157d2d25391608a1b6044820152606401610889565b60008111610bd05760405162461bcd60e51b815260206004820152600f60248201526e434f554e545f554e444552464c4f5760881b6044820152606401610889565b6000816001600160401b03811115610bea57610bea6125b9565b604051908082528060200260200182016040528015610c13578160200160208202803683370190505b5090506000601084901b5b83821015610cb757610c308186610f5c565b610c6c5760405162461bcd60e51b815260206004820152600d60248201526c4b494e445f4f564552464c4f5760981b6044820152606401610889565b610c7581611095565b610ca55780838381518110610c8c57610c8c612cf7565b602090810291909101015281610ca181612cde565b9250505b80610caf81612cde565b915050610c1e565b6000846001600160401b03811115610cd157610cd16125b9565b604051908082528060200260200182016040528015610cfa578160200160208202803683370190505b50905060005b85811015610d39576001828281518110610d1c57610d1c612cf7565b602090810291909101015280610d3181612cde565b915050610d00565b50610d5587858360405180602001604052806000815250611615565b600086815261012d602052604081208054879290610d74908490612c55565b909155505050505050505050565b6001600160a01b038516331480610d9e5750610d9e85336107a9565b610e055760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610889565b610e12858585858561175e565b5050505050565b610e2282610adf565b610e2c81336118f9565b610e36838361195d565b505050565b60006001610e498360201c90565b1480610e5e57506002610e5c8360201c90565b145b80610e7257506003610e708360201c90565b145b80610e845750610e8482610400610f5c565b80610e965750610e9682610401610f5c565b80610ea85750610ea882610402610f5c565b80610eba5750610eba82610403610f5c565b80610ecc5750610ecc82610404610f5c565b806108c557506108c582610405610f5c565b6001600160a01b0381163314610f4e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610889565b610f5882826119e3565b5050565b60109190911c63ffffffff161490565b60608151835114610fd15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610889565b600083516001600160401b03811115610fec57610fec6125b9565b604051908082528060200260200182016040528015611015578160200160208202803683370190505b50905060005b845181101561108d5761106085828151811061103957611039612cf7565b602002602001015185838151811061105357611053612cf7565b6020026020010151610821565b82828151811061107257611072612cf7565b602090810291909101015261108681612cde565b905061101b565b509392505050565b600090815260fb6020526040902054151590565b6001600160a01b0383163314806110c557506110c583336107a9565b6110e15760405162461bcd60e51b815260040161088990612d0d565b610e36838383611a4a565b6110f582610e3b565b80611107575061110782610200610f5c565b6111235760405162461bcd60e51b815260040161088990612d56565b61113b6000805160206132708339815191523361120b565b61117a5760405162461bcd60e51b815260206004820152601060248201526f6e656564205345545445525f524f4c4560801b6044820152606401610889565b600091825261012e602090815260409283902082518155908201516001820155918101516002830155606081015160038301556080810151600483015560a0810151600583015560c0810151600683015560e0810151600783015561010081015160088301556101200151600990910155565b61093763050000006000612c55565b61093763050000006004612c55565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f58338383611bc9565b611297604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6112a082610e3b565b806112b257506112b282610200610f5c565b6112ce5760405162461bcd60e51b815260040161088990612d56565b50600090815261012e6020908152604091829020825161014081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015260099091015461012082015290565b61135c82610adf565b61136681336118f9565b610e3683836119e3565b61093763050000006002612c55565b6001600160a01b03851633148061139b575061139b85336107a9565b6113b75760405162461bcd60e51b815260040161088990612d0d565b610e128585858585611ca9565b6001600160a01b0383163314806113e057506113e083336107a9565b6113fc5760405162461bcd60e51b815260040161088990612d0d565b610e36838383611db8565b600054610100900460ff166114225760005460ff161561142a565b61142a611eab565b61148d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610889565b600054610100900460ff161580156114af576000805461ffff19166101011790555b6114b882611ebc565b6114c3600033611eec565b6114db60008051602061329083398151915233611eec565b6114f360008051602061327083398151915233611eec565b8015610f58576000805461ff00191690555050565b61093763050000006001612c55565b60006001600160e01b03198216637965db0b60e01b14806108c557506108c582611ef6565b8051610f589060679060208401906124a7565b6001600160a01b0384166115755760405162461bcd60e51b815260040161088990612daf565b336115958160008761158688611f46565b61158f88611f46565b87611f91565b60008481526065602090815260408083206001600160a01b0389168452909152812080548592906115c7908490612c55565b909155505060408051858152602081018590526001600160a01b038088169260009291851691600080516020613250833981519152910160405180910390a4610e1281600087878787611f9f565b6001600160a01b03841661163b5760405162461bcd60e51b815260040161088990612daf565b815183511461165c5760405162461bcd60e51b815260040161088990612df0565b3361166c81600087878787611f91565b60005b84518110156117085783818151811061168a5761168a612cf7565b6020026020010151606560008784815181106116a8576116a8612cf7565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546116f09190612c55565b9091555081905061170081612cde565b91505061166f565b50846001600160a01b031660006001600160a01b0316826001600160a01b03166000805160206132308339815191528787604051611747929190612e38565b60405180910390a4610e1281600087878787612101565b815183511461177f5760405162461bcd60e51b815260040161088990612df0565b6001600160a01b0384166117a55760405162461bcd60e51b815260040161088990612e66565b336117b4818787878787611f91565b60005b845181101561189d5760008582815181106117d4576117d4612cf7565b6020026020010151905060008583815181106117f2576117f2612cf7565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156118435760405162461bcd60e51b815260040161088990612eab565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611882908490612c55565b925050819055505050508061189690612cde565b90506117b7565b50846001600160a01b0316866001600160a01b0316826001600160a01b031660008051602061323083398151915287876040516118db929190612e38565b60405180910390a46118f1818787878787612101565b505050505050565b611903828261120b565b610f585761191b816001600160a01b031660146121c3565b6119268360206121c3565b604051602001611937929190612ef5565b60408051601f198184030181529082905262461bcd60e51b825261088991600401612752565b611967828261120b565b610f585760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561199f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119ed828261120b565b15610f585760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038316611a705760405162461bcd60e51b815260040161088990612f64565b8051825114611a915760405162461bcd60e51b815260040161088990612df0565b6000339050611ab481856000868660405180602001604052806000815250611f91565b60005b8351811015611b7c576000848281518110611ad457611ad4612cf7565b602002602001015190506000848381518110611af257611af2612cf7565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611b435760405162461bcd60e51b815260040161088990612fa7565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611b7481612cde565b915050611ab7565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03166000805160206132308339815191528686604051611bbb929190612e38565b60405180910390a450505050565b816001600160a01b0316836001600160a01b031603611c3c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610889565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611ccf5760405162461bcd60e51b815260040161088990612e66565b33611cdf81878761158688611f46565b60008481526065602090815260408083206001600160a01b038a16845290915290205483811015611d225760405162461bcd60e51b815260040161088990612eab565b60008581526065602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611d61908490612c55565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020613250833981519152910160405180910390a4611daf828888888888611f9f565b50505050505050565b6001600160a01b038316611dde5760405162461bcd60e51b815260040161088990612f64565b33611e0d81856000611def87611f46565b611df887611f46565b60405180602001604052806000815250611f91565b60008381526065602090815260408083206001600160a01b038816845290915290205482811015611e505760405162461bcd60e51b815260040161088990612fa7565b60008481526065602090815260408083206001600160a01b0389811680865291845282852088870390558251898152938401889052909290861691600080516020613250833981519152910160405180910390a45050505050565b6000611eb630612365565b15905090565b600054610100900460ff16611ee35760405162461bcd60e51b815260040161088990612feb565b61092581612374565b610f58828261195d565b60006001600160e01b03198216636cdb3d1360e11b1480611f2757506001600160e01b031982166303a24d0760e21b145b806108c557506301ffc9a760e01b6001600160e01b03198316146108c5565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f8057611f80612cf7565b602090810291909101015292915050565b6118f186868686868661239b565b611fb1846001600160a01b0316612365565b156118f15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611fea9089908990889088908890600401613036565b6020604051808303816000875af1925050508015612025575060408051601f3d908101601f191682019092526120229181019061307b565b60015b6120d157612031613098565b806308c379a00361206a57506120456130b3565b80612050575061206c565b8060405162461bcd60e51b81526004016108899190612752565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610889565b6001600160e01b0319811663f23a6e6160e01b14611daf5760405162461bcd60e51b81526004016108899061313c565b612113846001600160a01b0316612365565b156118f15760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061214c9089908990889088908890600401613184565b6020604051808303816000875af1925050508015612187575060408051601f3d908101601f191682019092526121849181019061307b565b60015b61219357612031613098565b6001600160e01b0319811663bc197c8160e01b14611daf5760405162461bcd60e51b81526004016108899061313c565b606060006121d28360026131e2565b6121dd906002612c55565b6001600160401b038111156121f4576121f46125b9565b6040519080825280601f01601f19166020018201604052801561221e576020820181803683370190505b509050600360fc1b8160008151811061223957612239612cf7565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061226857612268612cf7565b60200101906001600160f81b031916908160001a905350600061228c8460026131e2565b612297906001612c55565b90505b600181111561230f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122cb576122cb612cf7565b1a60f81b8282815181106122e1576122e1612cf7565b60200101906001600160f81b031916908160001a90535060049490941c9361230881613201565b905061229a565b50831561235e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610889565b9392505050565b6001600160a01b03163b151590565b600054610100900460ff1661091c5760405162461bcd60e51b815260040161088990612feb565b6001600160a01b0385166124225760005b8351811015612420578281815181106123c7576123c7612cf7565b602002602001015160fb60008684815181106123e5576123e5612cf7565b60200260200101518152602001908152602001600020600082825461240a9190612c55565b90915550612419905081612cde565b90506123ac565b505b6001600160a01b0384166118f15760005b8351811015611daf5782818151811061244e5761244e612cf7565b602002602001015160fb600086848151811061246c5761246c612cf7565b6020026020010151815260200190815260200160002060008282546124919190613218565b909155506124a0905081612cde565b9050612433565b8280546124b390612c6d565b90600052602060002090601f0160209004810192826124d5576000855561251b565b82601f106124ee57805160ff191683800117855561251b565b8280016001018555821561251b579182015b8281111561251b578251825591602001919060010190612500565b5061252792915061252b565b5090565b5b80821115612527576000815560010161252c565b80356001600160a01b038116811461255757600080fd5b919050565b6000806040838503121561256f57600080fd5b61257883612540565b946020939093013593505050565b6001600160e01b03198116811461092557600080fd5b6000602082840312156125ae57600080fd5b813561235e81612586565b634e487b7160e01b600052604160045260246000fd5b61014081016001600160401b03811182821017156125ef576125ef6125b9565b60405250565b601f8201601f191681016001600160401b038111828210171561261a5761261a6125b9565b6040525050565b60405161262d816125cf565b90565b60006001600160401b03831115612649576126496125b9565b604051612660601f8501601f1916602001826125f5565b80915083815284848401111561267557600080fd5b83836020830137600060208583010152509392505050565b60006020828403121561269f57600080fd5b81356001600160401b038111156126b557600080fd5b8201601f810184136126c657600080fd5b6126d584823560208401612630565b949350505050565b6000602082840312156126ef57600080fd5b5035919050565b60005b838110156127115781810151838201526020016126f9565b83811115612720576000848401525b50505050565b6000815180845261273e8160208601602086016126f6565b601f01601f19169290920160200192915050565b60208152600061235e6020830184612726565b60008060006060848603121561277a57600080fd5b61278384612540565b95602085013595506040909401359392505050565b60006001600160401b038211156127b1576127b16125b9565b5060051b60200190565b600082601f8301126127cc57600080fd5b813560206127d982612798565b6040516127e682826125f5565b83815260059390931b850182019282810191508684111561280657600080fd5b8286015b84811015612821578035835291830191830161280a565b509695505050505050565b600082601f83011261283d57600080fd5b61235e83833560208501612630565b600080600080600060a0868803121561286457600080fd5b61286d86612540565b945061287b60208701612540565b935060408601356001600160401b038082111561289757600080fd5b6128a389838a016127bb565b945060608801359150808211156128b957600080fd5b6128c589838a016127bb565b935060808801359150808211156128db57600080fd5b506128e88882890161282c565b9150509295509295909350565b6000806040838503121561290857600080fd5b8235915061291860208401612540565b90509250929050565b6000806040838503121561293457600080fd5b50508035926020909101359150565b6000806040838503121561295657600080fd5b82356001600160401b038082111561296d57600080fd5b818501915085601f83011261298157600080fd5b8135602061298e82612798565b60405161299b82826125f5565b83815260059390931b85018201928281019150898411156129bb57600080fd5b948201945b838610156129e0576129d186612540565b825294820194908201906129c0565b965050860135925050808211156129f657600080fd5b50612a03858286016127bb565b9150509250929050565b600081518084526020808501945080840160005b83811015612a3d57815187529582019590820190600101612a21565b509495945050505050565b60208152600061235e6020830184612a0d565b600080600060608486031215612a7057600080fd5b612a7984612540565b925060208401356001600160401b0380821115612a9557600080fd5b612aa1878388016127bb565b93506040860135915080821115612ab757600080fd5b50612ac4868287016127bb565b9150509250925092565b600080828403610160811215612ae357600080fd5b8335925061014080601f1983011215612afb57600080fd5b612b03612621565b91506020850135825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e084015261012080870135828501528287013581850152505050809150509250929050565b60008060408385031215612b8857600080fd5b612b9183612540565b915060208301358015158114612ba657600080fd5b809150509250929050565b60008060408385031215612bc457600080fd5b612bcd83612540565b915061291860208401612540565b600080600080600060a08688031215612bf357600080fd5b612bfc86612540565b9450612c0a60208701612540565b9350604086013592506060860135915060808601356001600160401b03811115612c3357600080fd5b6128e88882890161282c565b634e487b7160e01b600052601160045260246000fd5b60008219821115612c6857612c68612c3f565b500190565b600181811c90821680612c8157607f821691505b602082108103612ca157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601e908201527f43616e6e6f74206d696e74206d6f7265207468616e206f6e65206974656d0000604082015260600190565b600060018201612cf057612cf0612c3f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526039908201527f5065726b732061726520617661696c61626c65206f6e6c7920666f7220636861604082015278726163746572732c207065747320616e64207469636b65747360381b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000612e4b6040830185612a0d565b8281036020840152612e5d8185612a0d565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612f278160178501602088016126f6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f588160288401602088016126f6565b01602801949350505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061307090830184612726565b979650505050505050565b60006020828403121561308d57600080fd5b815161235e81612586565b600060033d111561262d5760046000803e5060005160e01c90565b600060443d10156130c15790565b6040516003193d81016004833e81513d6001600160401b0380831160248401831017156130f057505050505090565b82850191508151818111156131085750505050505090565b843d87010160208285010111156131225750505050505090565b613131602082860101876125f5565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906131b090830186612a0d565b82810360608401526131c28186612a0d565b905082810360808401526131d68185612726565b98975050505050505050565b60008160001904831182151516156131fc576131fc612c3f565b500290565b60008161321057613210612c3f565b506000190190565b60008282101561322a5761322a612c3f565b50039056fe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6261c92169ef077349011ff0b1383c894d86c5f0b41d986366b58a6cf31e93beda9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a26469706673582212206d6b873a6c286ae9a9c34a4ee97724b4a25a3b9c3bacb53b7d0621e42c60aff064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 532,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 535,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2848,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3652,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 628,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 634,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 636,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1716,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1968,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1994,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2121,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7475,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "kindSupply",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7501,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenPerks",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_uint256,t_struct(Perks)7496_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Perks)7496_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MetarunCollection.Perks)",
        "numberOfBytes": "32",
        "value": "t_struct(Perks)7496_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Perks)7496_storage": {
        "encoding": "inplace",
        "label": "struct MetarunCollection.Perks",
        "members": [
          {
            "astId": 7477,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7479,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "runs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7481,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "wins",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7483,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "ability",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7485,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "health",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7487,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "mana",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7489,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "speed",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7491,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "collisionDamage",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7493,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "runsPerDayLimit",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 7495,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "runsTotalLimit",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}