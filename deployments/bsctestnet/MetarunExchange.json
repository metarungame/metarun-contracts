{
  "address": "0x167fc889C2571793A258462536e86C7fCbB6C9E8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunExchange.SellOrder",
          "name": "sellOrder",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunExchange.SellOrder",
          "name": "sellOrder",
          "type": "tuple"
        }
      ],
      "name": "hashSellOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x17e17e23f8a6699f98b575e95add054a55a371eb72dda4fd40193458f64b87c8",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0x167fc889C2571793A258462536e86C7fCbB6C9E8",
    "transactionIndex": 0,
    "gasUsed": "1284568",
    "logsBloom": "0x
    "blockHash": "0x89e630ca2d243a45cccfcf26072fa2d57a48adf290e683737afc6b8fbe29e3d4",
    "transactionHash": "0x17e17e23f8a6699f98b575e95add054a55a371eb72dda4fd40193458f64b87c8",
    "logs": [],
    "blockNumber": 17550880,
    "cumulativeGasUsed": "1284568",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8327c9c1957DB5e31895805F70B101b419011810"
  ],
  "numDeployments": 1,
  "solcInputHash": "f785cabe857bbf5fe6529270290fe01e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunExchange.SellOrder\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunExchange.SellOrder\",\"name\":\"sellOrder\",\"type\":\"tuple\"}],\"name\":\"hashSellOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Ensures the sale of tokens (exchanging them on Ether) by matching orders\",\"events\":{\"Purchase(bytes32,address,address,uint256,uint256,uint256)\":{\"details\":\"Gets emitted on token purchase\"}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Metarun ERC-1155 exchange\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetarunExchange.sol\":\"MetarunExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetarunExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\n/**\\n * @title Metarun ERC-1155 exchange\\n * @dev Ensures the sale of tokens (exchanging them on Ether) by matching orders\\n */\\ncontract MetarunExchange is EIP712 {\\n    IERC1155 public token;\\n    mapping(bytes32 => bool) sellOrderPerformed;\\n    struct SellOrder {\\n        // address of the current tokenholder\\n        address payable seller;\\n        // id of ERC-1155 token (kind)\\n        uint256 tokenId;\\n        // ERC155 amount of given Id user is going to sell\\n        uint256 amount;\\n        // the point at which order becomes outdated\\n        uint256 expirationTime;\\n        // price in wei (for entire amount of tokens)\\n        uint256 price;\\n        // random salt to prevent duplicate hashes\\n        uint256 salt;\\n    }\\n\\n    /**\\n     * @dev Gets emitted on token purchase\\n     */\\n    event Purchase(\\n        bytes32 indexed orderHash,\\n        address indexed seller,\\n        address indexed buyer,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 price\\n    );\\n\\n    constructor(address _token) EIP712(\\\"metarun.game\\\", \\\"0.1\\\") {\\n        require(_token != address(0), \\\"token address cannot be zero\\\");\\n        token = IERC1155(_token);\\n    }\\n\\n    // todo: SECURITY! make non-reentrant!\\n    function buy(SellOrder memory sellOrder, bytes memory signature) external payable {\\n        bytes32 sellOrderHash = hashSellOrder(sellOrder);\\n        address signer = ECDSA.recover(sellOrderHash, signature);\\n        require(signer != address(0), \\\"BAD_SIGNATURE\\\");\\n        require(signer == sellOrder.seller, \\\"BAD SIGNER\\\");\\n        require(msg.value == sellOrder.price, \\\"BAD VALUE\\\");\\n        require(!sellOrderPerformed[sellOrderHash], \\\"ALREADY_DONE\\\");\\n        require(block.timestamp < sellOrder.expirationTime, \\\"EXPIRED\\\");\\n        bytes32 orderHash = hashSellOrder(sellOrder);\\n        emit Purchase(orderHash, sellOrder.seller, msg.sender, sellOrder.tokenId, sellOrder.amount, sellOrder.price);\\n        token.safeTransferFrom(sellOrder.seller, msg.sender, sellOrder.tokenId, sellOrder.amount, \\\"\\\");\\n        sellOrder.seller.transfer(msg.value);\\n        sellOrderPerformed[sellOrderHash] = true;\\n    }\\n\\n    // Returns the hash of the fully encoded EIP712 SellOrder for this domain.\\n    // todo: made public for debugging reasons.\\n    // Need to make it internal to optimize gas consumption\\n    function hashSellOrder(SellOrder memory sellOrder) public view returns (bytes32) {\\n        bytes32 sellOrderTypeHash = keccak256(\\n            \\\"SellOrder(address seller,uint256 tokenId,uint256 amount,uint256 expirationTime,uint256 price,uint256 salt)\\\"\\n        );\\n        bytes32 orderHash = keccak256(\\n            abi.encode(\\n                sellOrderTypeHash,\\n                sellOrder.seller,\\n                sellOrder.tokenId,\\n                sellOrder.amount,\\n                sellOrder.expirationTime,\\n                sellOrder.price,\\n                sellOrder.salt\\n            )\\n        );\\n        return (_hashTypedDataV4(orderHash));\\n    }\\n}\\n\",\"keccak256\":\"0x705cfa42bd75dc46f3d0aeb40deb3ceb3d1c5899155a2c0c7c73050681b5649d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001a1d38038062001a1d8339818101604052810190620000389190620002b6565b6040518060400160405280600c81526020017f6d65746172756e2e67616d6500000000000000000000000000000000000000008152506040518060400160405280600381526020017f302e31000000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a081815250506200010d8184846200021060201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508061012081815250505050505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c09062000349565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200040f565b600083838346306040516020016200022d959493929190620003b2565b6040516020818303038152906040528051906020012090509392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200027e8262000251565b9050919050565b620002908162000271565b81146200029c57600080fd5b50565b600081519050620002b08162000285565b92915050565b600060208284031215620002cf57620002ce6200024c565b5b6000620002df848285016200029f565b91505092915050565b600082825260208201905092915050565b7f746f6b656e20616464726573732063616e6e6f74206265207a65726f00000000600082015250565b600062000331601c83620002e8565b91506200033e82620002f9565b602082019050919050565b60006020820190508181036000830152620003648162000322565b9050919050565b6000819050919050565b62000380816200036b565b82525050565b6000819050919050565b6200039b8162000386565b82525050565b620003ac8162000271565b82525050565b600060a082019050620003c9600083018862000375565b620003d8602083018762000375565b620003e7604083018662000375565b620003f6606083018562000390565b620004056080830184620003a1565b9695505050505050565b60805160a05160c05160e05161010051610120516115be6200045f60003960006105e20152600061062401526000610603015260006105380152600061058e015260006105b701526115be6000f3fe6080604052600436106100345760003560e01c80635e53f14514610039578063a76c881614610076578063fc0c546a14610092575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610c47565b6100bd565b60405161006d9190610c8d565b60405180910390f35b610090600480360381019061008b9190610d62565b610144565b005b34801561009e57600080fd5b506100a76104cf565b6040516100b49190610e1d565b60405180910390f35b6000807f506f2e315ad03a56810fd6bd4798a950bff51cd12e2a1f40bae2969ad4b6cd699050600081846000015185602001518660400151876060015188608001518960a0015160405160200161011a9796959493929190610e56565b60405160208183030381529060405280519060200120905061013b816104f3565b92505050919050565b600061014f836100bd565b9050600061015d828461050d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c690610f22565b60405180910390fd5b836000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023890610f8e565b60405180910390fd5b83608001513414610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027e90610ffa565b60405180910390fd5b6001600083815260200190815260200160002060009054906101000a900460ff16156102e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102df90611066565b60405180910390fd5b8360600151421061032e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610325906110d2565b60405180910390fd5b6000610339856100bd565b90503373ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff16827f39d7ae3c050edb013db51816405491a59692cc2bae0e948a82fa619991fadaa8886020015189604001518a608001516040516103ad939291906110f2565b60405180910390a460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a866000015133886020015189604001516040518563ffffffff1660e01b815260040161042094939291906111a2565b600060405180830381600087803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b50505050846000015173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561049c573d6000803e3d6000fd5b50600180600085815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610506610500610534565b8361064e565b9050919050565b600080600061051c8585610681565b9150915061052981610704565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156105b057507f000000000000000000000000000000000000000000000000000000000000000046145b156105dd577f0000000000000000000000000000000000000000000000000000000000000000905061064b565b6106487f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006108d9565b90505b90565b60008282604051602001610663929190611272565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156106c35760008060006020860151925060408601519150606086015160001a90506106b787828585610913565b945094505050506106fd565b6040835114156106f45760008060208501519150604085015190506106e9868383610a20565b9350935050506106fd565b60006002915091505b9250929050565b60006004811115610718576107176112a9565b5b81600481111561072b5761072a6112a9565b5b1415610736576108d6565b6001600481111561074a576107496112a9565b5b81600481111561075d5761075c6112a9565b5b141561079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079590611324565b60405180910390fd5b600260048111156107b2576107b16112a9565b5b8160048111156107c5576107c46112a9565b5b1415610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd90611390565b60405180910390fd5b6003600481111561081a576108196112a9565b5b81600481111561082d5761082c6112a9565b5b141561086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590611422565b60405180910390fd5b600480811115610881576108806112a9565b5b816004811115610894576108936112a9565b5b14156108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cc906114b4565b60405180910390fd5b5b50565b600083838346306040516020016108f49594939291906114d4565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561094e576000600391509150610a17565b601b8560ff16141580156109665750601c8560ff1614155b15610978576000600491509150610a17565b60006001878787876040516000815260200160405260405161099d9493929190611543565b6020604051602081039080840390855afa1580156109bf573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a0e57600060019250925050610a17565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050610a6087828885610913565b935093505050935093915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ad082610a87565b810181811067ffffffffffffffff82111715610aef57610aee610a98565b5b80604052505050565b6000610b02610a6e565b9050610b0e8282610ac7565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3e82610b13565b9050919050565b610b4e81610b33565b8114610b5957600080fd5b50565b600081359050610b6b81610b45565b92915050565b6000819050919050565b610b8481610b71565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b600060c08284031215610bbd57610bbc610a82565b5b610bc760c0610af8565b90506000610bd784828501610b5c565b6000830152506020610beb84828501610b92565b6020830152506040610bff84828501610b92565b6040830152506060610c1384828501610b92565b6060830152506080610c2784828501610b92565b60808301525060a0610c3b84828501610b92565b60a08301525092915050565b600060c08284031215610c5d57610c5c610a78565b5b6000610c6b84828501610ba7565b91505092915050565b6000819050919050565b610c8781610c74565b82525050565b6000602082019050610ca26000830184610c7e565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115610ccd57610ccc610a98565b5b610cd682610a87565b9050602081019050919050565b82818337600083830152505050565b6000610d05610d0084610cb2565b610af8565b905082815260208101848484011115610d2157610d20610cad565b5b610d2c848285610ce3565b509392505050565b600082601f830112610d4957610d48610ca8565b5b8135610d59848260208601610cf2565b91505092915050565b60008060e08385031215610d7957610d78610a78565b5b6000610d8785828601610ba7565b92505060c083013567ffffffffffffffff811115610da857610da7610a7d565b5b610db485828601610d34565b9150509250929050565b6000819050919050565b6000610de3610dde610dd984610b13565b610dbe565b610b13565b9050919050565b6000610df582610dc8565b9050919050565b6000610e0782610dea565b9050919050565b610e1781610dfc565b82525050565b6000602082019050610e326000830184610e0e565b92915050565b610e4181610b33565b82525050565b610e5081610b71565b82525050565b600060e082019050610e6b600083018a610c7e565b610e786020830189610e38565b610e856040830188610e47565b610e926060830187610e47565b610e9f6080830186610e47565b610eac60a0830185610e47565b610eb960c0830184610e47565b98975050505050505050565b600082825260208201905092915050565b7f4241445f5349474e415455524500000000000000000000000000000000000000600082015250565b6000610f0c600d83610ec5565b9150610f1782610ed6565b602082019050919050565b60006020820190508181036000830152610f3b81610eff565b9050919050565b7f424144205349474e455200000000000000000000000000000000000000000000600082015250565b6000610f78600a83610ec5565b9150610f8382610f42565b602082019050919050565b60006020820190508181036000830152610fa781610f6b565b9050919050565b7f4241442056414c55450000000000000000000000000000000000000000000000600082015250565b6000610fe4600983610ec5565b9150610fef82610fae565b602082019050919050565b6000602082019050818103600083015261101381610fd7565b9050919050565b7f414c52454144595f444f4e450000000000000000000000000000000000000000600082015250565b6000611050600c83610ec5565b915061105b8261101a565b602082019050919050565b6000602082019050818103600083015261107f81611043565b9050919050565b7f4558504952454400000000000000000000000000000000000000000000000000600082015250565b60006110bc600783610ec5565b91506110c782611086565b602082019050919050565b600060208201905081810360008301526110eb816110af565b9050919050565b60006060820190506111076000830186610e47565b6111146020830185610e47565b6111216040830184610e47565b949350505050565b600061113482610dea565b9050919050565b61114481611129565b82525050565b600061115582610b13565b9050919050565b6111658161114a565b82525050565b600082825260208201905092915050565b50565b600061118c60008361116b565b91506111978261117c565b600082019050919050565b600060a0820190506111b7600083018761113b565b6111c4602083018661115c565b6111d16040830185610e47565b6111de6060830184610e47565b81810360808301526111ef8161117f565b905095945050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b600061123b6002836111fa565b915061124682611205565b600282019050919050565b6000819050919050565b61126c61126782610c74565b611251565b82525050565b600061127d8261122e565b9150611289828561125b565b602082019150611299828461125b565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061130e601883610ec5565b9150611319826112d8565b602082019050919050565b6000602082019050818103600083015261133d81611301565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061137a601f83610ec5565b915061138582611344565b602082019050919050565b600060208201905081810360008301526113a98161136d565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061140c602283610ec5565b9150611417826113b0565b604082019050919050565b6000602082019050818103600083015261143b816113ff565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061149e602283610ec5565b91506114a982611442565b604082019050919050565b600060208201905081810360008301526114cd81611491565b9050919050565b600060a0820190506114e96000830188610c7e565b6114f66020830187610c7e565b6115036040830186610c7e565b6115106060830185610e47565b61151d608083018461115c565b9695505050505050565b600060ff82169050919050565b61153d81611527565b82525050565b60006080820190506115586000830187610c7e565b6115656020830186611534565b6115726040830185610c7e565b61157f6060830184610c7e565b9594505050505056fea2646970667358221220afbee15e49eac3db29ab205b3193b32dd0b3ecf7821a522a71653f712b1492e464736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80635e53f14514610039578063a76c881614610076578063fc0c546a14610092575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610c47565b6100bd565b60405161006d9190610c8d565b60405180910390f35b610090600480360381019061008b9190610d62565b610144565b005b34801561009e57600080fd5b506100a76104cf565b6040516100b49190610e1d565b60405180910390f35b6000807f506f2e315ad03a56810fd6bd4798a950bff51cd12e2a1f40bae2969ad4b6cd699050600081846000015185602001518660400151876060015188608001518960a0015160405160200161011a9796959493929190610e56565b60405160208183030381529060405280519060200120905061013b816104f3565b92505050919050565b600061014f836100bd565b9050600061015d828461050d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c690610f22565b60405180910390fd5b836000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023890610f8e565b60405180910390fd5b83608001513414610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027e90610ffa565b60405180910390fd5b6001600083815260200190815260200160002060009054906101000a900460ff16156102e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102df90611066565b60405180910390fd5b8360600151421061032e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610325906110d2565b60405180910390fd5b6000610339856100bd565b90503373ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff16827f39d7ae3c050edb013db51816405491a59692cc2bae0e948a82fa619991fadaa8886020015189604001518a608001516040516103ad939291906110f2565b60405180910390a460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a866000015133886020015189604001516040518563ffffffff1660e01b815260040161042094939291906111a2565b600060405180830381600087803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b50505050846000015173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561049c573d6000803e3d6000fd5b50600180600085815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610506610500610534565b8361064e565b9050919050565b600080600061051c8585610681565b9150915061052981610704565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156105b057507f000000000000000000000000000000000000000000000000000000000000000046145b156105dd577f0000000000000000000000000000000000000000000000000000000000000000905061064b565b6106487f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006108d9565b90505b90565b60008282604051602001610663929190611272565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156106c35760008060006020860151925060408601519150606086015160001a90506106b787828585610913565b945094505050506106fd565b6040835114156106f45760008060208501519150604085015190506106e9868383610a20565b9350935050506106fd565b60006002915091505b9250929050565b60006004811115610718576107176112a9565b5b81600481111561072b5761072a6112a9565b5b1415610736576108d6565b6001600481111561074a576107496112a9565b5b81600481111561075d5761075c6112a9565b5b141561079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079590611324565b60405180910390fd5b600260048111156107b2576107b16112a9565b5b8160048111156107c5576107c46112a9565b5b1415610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd90611390565b60405180910390fd5b6003600481111561081a576108196112a9565b5b81600481111561082d5761082c6112a9565b5b141561086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590611422565b60405180910390fd5b600480811115610881576108806112a9565b5b816004811115610894576108936112a9565b5b14156108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cc906114b4565b60405180910390fd5b5b50565b600083838346306040516020016108f49594939291906114d4565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561094e576000600391509150610a17565b601b8560ff16141580156109665750601c8560ff1614155b15610978576000600491509150610a17565b60006001878787876040516000815260200160405260405161099d9493929190611543565b6020604051602081039080840390855afa1580156109bf573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a0e57600060019250925050610a17565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050610a6087828885610913565b935093505050935093915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ad082610a87565b810181811067ffffffffffffffff82111715610aef57610aee610a98565b5b80604052505050565b6000610b02610a6e565b9050610b0e8282610ac7565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3e82610b13565b9050919050565b610b4e81610b33565b8114610b5957600080fd5b50565b600081359050610b6b81610b45565b92915050565b6000819050919050565b610b8481610b71565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b600060c08284031215610bbd57610bbc610a82565b5b610bc760c0610af8565b90506000610bd784828501610b5c565b6000830152506020610beb84828501610b92565b6020830152506040610bff84828501610b92565b6040830152506060610c1384828501610b92565b6060830152506080610c2784828501610b92565b60808301525060a0610c3b84828501610b92565b60a08301525092915050565b600060c08284031215610c5d57610c5c610a78565b5b6000610c6b84828501610ba7565b91505092915050565b6000819050919050565b610c8781610c74565b82525050565b6000602082019050610ca26000830184610c7e565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115610ccd57610ccc610a98565b5b610cd682610a87565b9050602081019050919050565b82818337600083830152505050565b6000610d05610d0084610cb2565b610af8565b905082815260208101848484011115610d2157610d20610cad565b5b610d2c848285610ce3565b509392505050565b600082601f830112610d4957610d48610ca8565b5b8135610d59848260208601610cf2565b91505092915050565b60008060e08385031215610d7957610d78610a78565b5b6000610d8785828601610ba7565b92505060c083013567ffffffffffffffff811115610da857610da7610a7d565b5b610db485828601610d34565b9150509250929050565b6000819050919050565b6000610de3610dde610dd984610b13565b610dbe565b610b13565b9050919050565b6000610df582610dc8565b9050919050565b6000610e0782610dea565b9050919050565b610e1781610dfc565b82525050565b6000602082019050610e326000830184610e0e565b92915050565b610e4181610b33565b82525050565b610e5081610b71565b82525050565b600060e082019050610e6b600083018a610c7e565b610e786020830189610e38565b610e856040830188610e47565b610e926060830187610e47565b610e9f6080830186610e47565b610eac60a0830185610e47565b610eb960c0830184610e47565b98975050505050505050565b600082825260208201905092915050565b7f4241445f5349474e415455524500000000000000000000000000000000000000600082015250565b6000610f0c600d83610ec5565b9150610f1782610ed6565b602082019050919050565b60006020820190508181036000830152610f3b81610eff565b9050919050565b7f424144205349474e455200000000000000000000000000000000000000000000600082015250565b6000610f78600a83610ec5565b9150610f8382610f42565b602082019050919050565b60006020820190508181036000830152610fa781610f6b565b9050919050565b7f4241442056414c55450000000000000000000000000000000000000000000000600082015250565b6000610fe4600983610ec5565b9150610fef82610fae565b602082019050919050565b6000602082019050818103600083015261101381610fd7565b9050919050565b7f414c52454144595f444f4e450000000000000000000000000000000000000000600082015250565b6000611050600c83610ec5565b915061105b8261101a565b602082019050919050565b6000602082019050818103600083015261107f81611043565b9050919050565b7f4558504952454400000000000000000000000000000000000000000000000000600082015250565b60006110bc600783610ec5565b91506110c782611086565b602082019050919050565b600060208201905081810360008301526110eb816110af565b9050919050565b60006060820190506111076000830186610e47565b6111146020830185610e47565b6111216040830184610e47565b949350505050565b600061113482610dea565b9050919050565b61114481611129565b82525050565b600061115582610b13565b9050919050565b6111658161114a565b82525050565b600082825260208201905092915050565b50565b600061118c60008361116b565b91506111978261117c565b600082019050919050565b600060a0820190506111b7600083018761113b565b6111c4602083018661115c565b6111d16040830185610e47565b6111de6060830184610e47565b81810360808301526111ef8161117f565b905095945050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b600061123b6002836111fa565b915061124682611205565b600282019050919050565b6000819050919050565b61126c61126782610c74565b611251565b82525050565b600061127d8261122e565b9150611289828561125b565b602082019150611299828461125b565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061130e601883610ec5565b9150611319826112d8565b602082019050919050565b6000602082019050818103600083015261133d81611301565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061137a601f83610ec5565b915061138582611344565b602082019050919050565b600060208201905081810360008301526113a98161136d565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061140c602283610ec5565b9150611417826113b0565b604082019050919050565b6000602082019050818103600083015261143b816113ff565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061149e602283610ec5565b91506114a982611442565b604082019050919050565b600060208201905081810360008301526114cd81611491565b9050919050565b600060a0820190506114e96000830188610c7e565b6114f66020830187610c7e565b6115036040830186610c7e565b6115106060830185610e47565b61151d608083018461115c565b9695505050505050565b600060ff82169050919050565b61153d81611527565b82525050565b60006080820190506115586000830187610c7e565b6115656020830186611534565b6115726040830185610c7e565b61157f6060830184610c7e565b9594505050505056fea2646970667358221220afbee15e49eac3db29ab205b3193b32dd0b3ecf7821a522a71653f712b1492e464736f6c634300080b0033",
  "devdoc": {
    "details": "Ensures the sale of tokens (exchanging them on Ether) by matching orders",
    "events": {
      "Purchase(bytes32,address,address,uint256,uint256,uint256)": {
        "details": "Gets emitted on token purchase"
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "Metarun ERC-1155 exchange",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4227,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC1155)1639"
      },
      {
        "astId": 4231,
        "contract": "contracts/MetarunExchange.sol:MetarunExchange",
        "label": "sellOrderPerformed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC1155)1639": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}