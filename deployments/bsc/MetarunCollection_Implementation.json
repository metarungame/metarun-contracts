{
  "address": "0xE9E0d0846Bfe30e46f3EE84fa30d0977c5D87fAA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARTIFACT_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BRONZE_GIVEAWAY_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BRONZE_TICKET_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLISION_DAMAGE_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMON_SKIN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRAFTSMAN_CHARACTER_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FIGHTER_CHARACTER_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNGIBLE_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOLD_GIVEAWAY_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOLD_TICKET_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEALTH_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANA_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MYTHICAL_SKIN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPAL_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PET_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RARE_SKIN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILVER_GIVEAWAY_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILVER_TICKET_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPEED_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPRINTER_CHARACTER_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getKind",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "kind",
          "type": "uint256"
        }
      ],
      "name": "getKindSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPerks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wins",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mana",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "speed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collisionDamage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runsPerDayLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runsTotalLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunCollection.Perks",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isGameToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kind",
          "type": "uint256"
        }
      ],
      "name": "isKind",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "kind",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wins",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mana",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "speed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collisionDamage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runsPerDayLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "runsTotalLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetarunCollection.Perks",
          "name": "perks",
          "type": "tuple"
        }
      ],
      "name": "setPerks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b3a0dfdc79eee0ff07dd8eb6414ab4df5e19951db29795d8852a7e2cf17ebaa",
  "receipt": {
    "to": null,
    "from": "0x03ddcBbAe9e2bD20aC394fC2Db6688C3C22361D8",
    "contractAddress": "0xE9E0d0846Bfe30e46f3EE84fa30d0977c5D87fAA",
    "transactionIndex": 10,
    "gasUsed": "5318873",
    "logsBloom": "0x
    "blockHash": "0xeae0af27bbced9c5fe73d8639145a812f6dfae3025fc8f3b971a2d61c941832a",
    "transactionHash": "0x7b3a0dfdc79eee0ff07dd8eb6414ab4df5e19951db29795d8852a7e2cf17ebaa",
    "logs": [],
    "blockNumber": 20257386,
    "cumulativeGasUsed": "5808280",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "f3be58a6711a87d3736f25e90a50a83c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARTIFACT_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRONZE_GIVEAWAY_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRONZE_TICKET_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLISION_DAMAGE_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMON_SKIN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRAFTSMAN_CHARACTER_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIGHTER_CHARACTER_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNGIBLE_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_GIVEAWAY_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_TICKET_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEALTH_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANA_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MYTHICAL_SKIN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPAL_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PET_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RARE_SKIN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER_GIVEAWAY_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER_TICKET_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPEED_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPRINTER_CHARACTER_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getKind\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"}],\"name\":\"getKindSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPerks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collisionDamage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsPerDayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsTotalLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunCollection.Perks\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isGameToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"}],\"name\":\"isKind\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collisionDamage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsPerDayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsTotalLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct MetarunCollection.Perks\",\"name\":\"perks\",\"type\":\"tuple\"}],\"name\":\"setPerks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetarunCollection.sol\":\"MetarunCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x00a36a453484b7145a0d4a0c64daea248a7e806e6be4d7bbae1032a328777c82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xce2d5b25063e871aeca913786040a56117d16f01a819fbdc0b726128b6cbe25a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb04849e624ffff85de1ee3d541aaa058ed9323a26200e34dd443fc46a642ba56\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/MetarunCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\ncontract MetarunCollection is ERC1155Upgradeable, AccessControlUpgradeable, ERC1155BurnableUpgradeable, ERC1155SupplyUpgradeable {\\n    uint256 internal constant KIND_MASK = 0xffff0000;\\n\\n    uint256 public constant CRAFTSMAN_CHARACTER_KIND = 0x0000;\\n    uint256 public constant FIGHTER_CHARACTER_KIND = 0x0001;\\n    uint256 public constant SPRINTER_CHARACTER_KIND = 0x0002;\\n\\n    uint256 public constant ARTIFACT_TOKEN_KIND = 0x0100;\\n    uint256 public constant PET_TOKEN_KIND = 0x0200;\\n\\n    uint256 public constant COMMON_SKIN_KIND = 0x0300;\\n    uint256 public constant RARE_SKIN_KIND = 0x0301;\\n    uint256 public constant MYTHICAL_SKIN_KIND = 0x0302;\\n\\n    uint256 public constant BRONZE_TICKET_KIND = 0x0400;\\n    uint256 public constant SILVER_TICKET_KIND = 0x0401;\\n    uint256 public constant GOLD_TICKET_KIND = 0x0402;\\n    uint256 public constant BRONZE_GIVEAWAY_KIND = 0x0403;\\n    uint256 public constant SILVER_GIVEAWAY_KIND = 0x0404;\\n    uint256 public constant GOLD_GIVEAWAY_KIND = 0x0405;\\n\\n    uint256 public constant FUNGIBLE_TOKEN_KIND = 0x0500;\\n    uint256 public constant HEALTH_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0000;\\n    uint256 public constant MANA_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0001;\\n    uint256 public constant SPEED_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0002;\\n    uint256 public constant COLLISION_DAMAGE_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0003;\\n    uint256 public constant OPAL_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0004;\\n\\n    mapping(uint256 => uint256) kindSupply;\\n    struct Perks {\\n        uint256 level;\\n        uint256 runs;\\n        uint256 wins;\\n        uint256 ability;\\n        uint256 health;\\n        uint256 mana;\\n        uint256 speed;\\n        uint256 collisionDamage;\\n        uint256 runsPerDayLimit;\\n        uint256 runsTotalLimit;\\n    }\\n\\n    mapping(uint256 => Perks) tokenPerks;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SETTER_ROLE = keccak256(\\\"SETTER_ROLE\\\");\\n\\n    function initialize(string memory uri) public initializer {\\n        __ERC1155_init(uri);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(SETTER_ROLE, _msgSender());\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC1155Upgradeable, AccessControlUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function getKindSupply(uint256 kind) public view returns (uint256) {\\n        return kindSupply[kind];\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need MINTER_ROLE\\\");\\n        if (!isKind(id, FUNGIBLE_TOKEN_KIND)) {\\n            require(amount == 1, \\\"Cannot mint more than one item\\\");\\n            require(!exists(id), \\\"Cannot mint more than one item\\\");\\n        }\\n        _mint(to, id, amount, \\\"\\\");\\n        kindSupply[getKind(id)]++;\\n\\n        if (getKind(id) == BRONZE_TICKET_KIND) {\\n            tokenPerks[id].runsPerDayLimit = 10;\\n            tokenPerks[id].runsTotalLimit = 100;\\n        }\\n\\n        if (getKind(id) == SILVER_TICKET_KIND) {\\n            tokenPerks[id].runsPerDayLimit = 15;\\n            tokenPerks[id].runsTotalLimit = 135;\\n        }\\n\\n        if (getKind(id) == GOLD_TICKET_KIND) {\\n            tokenPerks[id].runsPerDayLimit = 20;\\n            tokenPerks[id].runsTotalLimit = 150;\\n        }\\n\\n        if (getKind(id) == BRONZE_GIVEAWAY_KIND) {\\n            tokenPerks[id].runsPerDayLimit = 5;\\n            tokenPerks[id].runsTotalLimit = 70;\\n        }\\n\\n        if (getKind(id) == SILVER_GIVEAWAY_KIND) {\\n            tokenPerks[id].runsPerDayLimit = 7;\\n            tokenPerks[id].runsTotalLimit = 70;\\n        }\\n\\n        if (getKind(id) == GOLD_GIVEAWAY_KIND) {\\n            tokenPerks[id].runsPerDayLimit = 10;\\n            tokenPerks[id].runsTotalLimit = 70;\\n        }\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256 kind,\\n        uint256 count\\n    ) public {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"NEED_MINTER_ROLE\\\");\\n        require(kind != FUNGIBLE_TOKEN_KIND, \\\"UNSUITABLE_KIND\\\");\\n        require(count > 0, \\\"COUNT_UNDERFLOW\\\");\\n        uint256[] memory tokenIds = new uint256[](count);\\n        uint256 countOfReadyToMintIds = 0;\\n        uint256 currentTokenId = kind << 16;\\n        while (countOfReadyToMintIds < count) {\\n            require(isKind(currentTokenId, kind), \\\"KIND_OVERFLOW\\\");\\n            if (!exists(currentTokenId)) {\\n                tokenIds[countOfReadyToMintIds] = currentTokenId;\\n                countOfReadyToMintIds++;\\n            }\\n            currentTokenId++;\\n        }\\n        uint256[] memory amounts = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            amounts[i] = 1;\\n        }\\n\\n        _mintBatch(to, tokenIds, amounts, \\\"\\\");\\n        kindSupply[kind] += count;\\n\\n        if (kind == BRONZE_TICKET_KIND) {\\n            Perks memory bronzePerks = Perks(0, 0, 0, 0, 0, 0, 0, 0, 10, 100);\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                setPerks(tokenIds[i], bronzePerks);\\n            }\\n        }\\n\\n        if (kind == SILVER_TICKET_KIND) {\\n            Perks memory silverPerks = Perks(0, 0, 0, 0, 0, 0, 0, 0, 15, 135);\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                setPerks(tokenIds[i], silverPerks);\\n            }\\n        }\\n\\n        if (kind == GOLD_TICKET_KIND) {\\n            Perks memory goldPerks = Perks(0, 0, 0, 0, 0, 0, 0, 0, 20, 150);\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                setPerks(tokenIds[i], goldPerks);\\n            }\\n        }\\n\\n        if (kind == BRONZE_GIVEAWAY_KIND) {\\n            Perks memory bronzePerks = Perks(0, 0, 0, 0, 0, 0, 0, 0, 5, 70);\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                setPerks(tokenIds[i], bronzePerks);\\n            }\\n        }\\n\\n        if (kind == SILVER_GIVEAWAY_KIND) {\\n            Perks memory silverPerks = Perks(0, 0, 0, 0, 0, 0, 0, 0, 7, 70);\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                setPerks(tokenIds[i], silverPerks);\\n            }\\n        }\\n        if (kind == GOLD_GIVEAWAY_KIND) {\\n            Perks memory goldPerks = Perks(0, 0, 0, 0, 0, 0, 0, 0, 10, 70);\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                setPerks(tokenIds[i], goldPerks);\\n            }\\n        }\\n    }\\n\\n    function isGameToken(uint256 id) public pure returns (bool) {\\n        return\\n            isKind(id, CRAFTSMAN_CHARACTER_KIND) ||\\n            isKind(id, FIGHTER_CHARACTER_KIND) ||\\n            isKind(id, SPRINTER_CHARACTER_KIND) ||\\n            isKind(id, BRONZE_TICKET_KIND) ||\\n            isKind(id, SILVER_TICKET_KIND) ||\\n            isKind(id, GOLD_TICKET_KIND) ||\\n            isKind(id, BRONZE_GIVEAWAY_KIND) ||\\n            isKind(id, SILVER_GIVEAWAY_KIND) ||\\n            isKind(id, GOLD_GIVEAWAY_KIND);\\n    }\\n\\n    function getKind(uint256 id) public pure returns (uint256) {\\n        return (KIND_MASK & id) >> 16;\\n    }\\n\\n    function isKind(uint256 id, uint256 kind) public pure returns (bool) {\\n        return getKind(id) == kind;\\n    }\\n\\n    function setURI(string memory newUri) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"need DEFAULT_ADMIN_ROLE\\\");\\n        _setURI(newUri);\\n    }\\n\\n    function getPerks(uint256 id) external view returns (Perks memory) {\\n        require(\\n            isGameToken(id) || isKind(id, PET_TOKEN_KIND),\\n            \\\"Perks are available only for characters, pets and tickets\\\"\\n        );\\n        return tokenPerks[id];\\n    }\\n\\n    function setPerks(uint256 id, Perks memory perks) public {\\n        require(\\n            isGameToken(id) || isKind(id, PET_TOKEN_KIND),\\n            \\\"Perks are available only for characters, pets and tickets\\\"\\n        );\\n        require(hasRole(SETTER_ROLE, _msgSender()), \\\"need SETTER_ROLE\\\");\\n        tokenPerks[id] = perks;\\n    }\\n}\\n\",\"keccak256\":\"0xe88a10a4251ee11a2297d6cd435af6f690ba9d4a278b85de7b32871d6a28d573\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615fb280620000216000396000f3fe608060405234801561001057600080fd5b50600436106102d55760003560e01c80636b20c45411610182578063b73eeaf6116100e9578063df4b5aeb116100a2578063f242432a1161007c578063f242432a14610926578063f5298aca14610942578063f62d18881461095e578063fe4ba8c11461097a576102d5565b8063df4b5aeb146108ba578063e985e9c5146108d8578063edd75e9414610908576102d5565b8063b73eeaf6146107e4578063bd85b03914610802578063ca16487b14610832578063d539139314610862578063d547741f14610880578063d91a1d7f1461089c576102d5565b80639177595e1161013b5780639177595e1461072057806391d148541461073e5780639c3ddd4a1461076e578063a2011b3f1461078c578063a217fddf146107aa578063a22cb465146107c8576102d5565b80636b20c4541461064c5780636ca8fede1461066857806377041f1814610698578063792f96cf146106b45780638478ff27146106d25780638a6ad02e146106f0576102d5565b80632e81aaea1161024157806345ada2ab116101fa5780634f558e79116101d45780634f558e79146105c2578063528575fd146105f2578063565554ff1461061057806365a9bf891461062e576102d5565b806345ada2ab14610544578063492e17fe146105625780634e1273f414610592576102d5565b80632e81aaea146104865780632eb2c2d6146104a25780632f2ff15d146104be5780632f85a827146104da57806336568abe1461050a578063387570ca14610526576102d5565b8063156e29f611610293578063156e29f6146103c25780632147e111146103de578063248a9ca3146103fc57806327efa6ea1461042c5780632b2a43c01461044a5780632d1e97f814610468576102d5565b8062fdd58e146102da578063010a2ae11461030a57806301ffc9a71461032857806302fe5305146103585780630e5bda98146103745780630e89341c14610392575b600080fd5b6102f460048036038101906102ef9190613f00565b610998565b6040516103019190613f4f565b60405180910390f35b610312610a61565b60405161031f9190613f4f565b60405180910390f35b610342600480360381019061033d9190613fc2565b610a67565b60405161034f919061400a565b60405180910390f35b610372600480360381019061036d919061416b565b610a79565b005b61037c610ad8565b6040516103899190613f4f565b60405180910390f35b6103ac60048036038101906103a791906141b4565b610aee565b6040516103b99190614269565b60405180910390f35b6103dc60048036038101906103d7919061428b565b610b82565b005b6103e6610ea9565b6040516103f39190613f4f565b60405180910390f35b61041660048036038101906104119190614314565b610eae565b6040516104239190614350565b60405180910390f35b610434610ece565b6040516104419190613f4f565b60405180910390f35b610452610ed3565b60405161045f9190613f4f565b60405180910390f35b610470610ed9565b60405161047d9190613f4f565b60405180910390f35b6104a0600480360381019061049b919061428b565b610edf565b005b6104bc60048036038101906104b791906144d4565b61157c565b005b6104d860048036038101906104d391906145a3565b61161d565b005b6104f460048036038101906104ef91906141b4565b611646565b604051610501919061400a565b60405180910390f35b610524600480360381019061051f91906145a3565b6116f0565b005b61052e611773565b60405161053b9190613f4f565b60405180910390f35b61054c611779565b6040516105599190613f4f565b60405180910390f35b61057c600480360381019061057791906145e3565b61177f565b604051610589919061400a565b60405180910390f35b6105ac60048036038101906105a791906146e6565b611794565b6040516105b9919061481c565b60405180910390f35b6105dc60048036038101906105d791906141b4565b6118ad565b6040516105e9919061400a565b60405180910390f35b6105fa6118c1565b6040516106079190613f4f565b60405180910390f35b6106186118c7565b6040516106259190613f4f565b60405180910390f35b6106366118cd565b6040516106439190613f4f565b60405180910390f35b6106666004803603810190610661919061483e565b6118d3565b005b610682600480360381019061067d91906141b4565b611970565b60405161068f9190613f4f565b60405180910390f35b6106b260048036038101906106ad91906149c4565b611984565b005b6106bc611ad1565b6040516106c99190613f4f565b60405180910390f35b6106da611ae7565b6040516106e79190613f4f565b60405180910390f35b61070a600480360381019061070591906141b4565b611aed565b6040516107179190613f4f565b60405180910390f35b610728611b0b565b6040516107359190613f4f565b60405180910390f35b610758600480360381019061075391906145a3565b611b21565b604051610765919061400a565b60405180910390f35b610776611b8c565b6040516107839190613f4f565b60405180910390f35b610794611b92565b6040516107a19190614350565b60405180910390f35b6107b2611bb6565b6040516107bf9190614350565b60405180910390f35b6107e260048036038101906107dd9190614a31565b611bbd565b005b6107ec611bd3565b6040516107f99190613f4f565b60405180910390f35b61081c600480360381019061081791906141b4565b611bd8565b6040516108299190613f4f565b60405180910390f35b61084c600480360381019061084791906141b4565b611bf5565b6040516108599190614b3d565b60405180910390f35b61086a611ce3565b6040516108779190614350565b60405180910390f35b61089a600480360381019061089591906145a3565b611d07565b005b6108a4611d30565b6040516108b19190613f4f565b60405180910390f35b6108c2611d36565b6040516108cf9190613f4f565b60405180910390f35b6108f260048036038101906108ed9190614b59565b611d4c565b6040516108ff919061400a565b60405180910390f35b610910611de0565b60405161091d9190613f4f565b60405180910390f35b610940600480360381019061093b9190614b99565b611de6565b005b61095c6004803603810190610957919061428b565b611e87565b005b6109786004803603810190610973919061416b565b611f24565b005b610982612088565b60405161098f9190613f4f565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff90614ca2565b60405180910390fd5b6065600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61030181565b6000610a728261209e565b9050919050565b610a8d6000801b610a88612118565b611b21565b610acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac390614d0e565b60405180910390fd5b610ad581612120565b50565b60036010610500901b610aeb9190614d5d565b81565b606060678054610afd90614de2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2990614de2565b8015610b765780601f10610b4b57610100808354040283529160200191610b76565b820191906000526020600020905b815481529060010190602001808311610b5957829003601f168201915b50505050509050919050565b610bb37f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610bae612118565b611b21565b610bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be990614e85565b60405180910390fd5b610bfe8261050061177f565b610c8f5760018114610c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3c90614ef1565b60405180910390fd5b610c4e826118ad565b15610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8590614ef1565b60405180910390fd5b5b610caa8383836040518060200160405280600081525061213a565b61012d6000610cb884611970565b81526020019081526020016000206000815480929190610cd790614f11565b9190505550610400610ce883611970565b03610d2857600a61012e600084815260200190815260200160002060080181905550606461012e6000848152602001908152602001600020600901819055505b610401610d3483611970565b03610d7457600f61012e600084815260200190815260200160002060080181905550608761012e6000848152602001908152602001600020600901819055505b610402610d8083611970565b03610dc057601461012e600084815260200190815260200160002060080181905550609661012e6000848152602001908152602001600020600901819055505b610403610dcc83611970565b03610e0c57600561012e600084815260200190815260200160002060080181905550604661012e6000848152602001908152602001600020600901819055505b610404610e1883611970565b03610e5857600761012e600084815260200190815260200160002060080181905550604661012e6000848152602001908152602001600020600901819055505b610405610e6483611970565b03610ea457600a61012e600084815260200190815260200160002060080181905550604661012e6000848152602001908152602001600020600901819055505b505050565b600081565b600060976000838152602001908152602001600020600101549050919050565b600181565b61020081565b61010081565b610f107f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610f0b612118565b611b21565b610f4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4690614fa5565b60405180910390fd5b6105008203610f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8a90615011565b60405180910390fd5b60008111610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd9061507d565b60405180910390fd5b60008167ffffffffffffffff811115610ff257610ff1614040565b5b6040519080825280602002602001820160405280156110205781602001602082028036833780820191505090505b509050600080601085901b90505b838210156110ce57611040818661177f565b61107f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611076906150e9565b60405180910390fd5b611088816118ad565b6110bb57808383815181106110a05761109f615109565b5b60200260200101818152505081806110b790614f11565b9250505b80806110c690614f11565b91505061102e565b60008467ffffffffffffffff8111156110ea576110e9614040565b5b6040519080825280602002602001820160405280156111185781602001602082028036833780820191505090505b50905060005b8581101561115a57600182828151811061113b5761113a615109565b5b602002602001018181525050808061115290614f11565b91505061111e565b50611176878583604051806020016040528060008152506122d0565b8461012d6000888152602001908152602001600020600082825461119a9190614d5d565b9250508190555061040086036112445760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600a81526020016064815250905060005b85518110156112415761122e8682815181106112205761121f615109565b5b602002602001015183611984565b808061123990614f11565b915050611201565b50505b61040186036112e75760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600f81526020016087815250905060005b85518110156112e4576112d18682815181106112c3576112c2615109565b5b602002602001015183611984565b80806112dc90614f11565b9150506112a4565b50505b610402860361138a5760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001601481526020016096815250905060005b85518110156113875761137486828151811061136657611365615109565b5b602002602001015183611984565b808061137f90614f11565b915050611347565b50505b610403860361142d5760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600581526020016046815250905060005b855181101561142a5761141786828151811061140957611408615109565b5b602002602001015183611984565b808061142290614f11565b9150506113ea565b50505b61040486036114d05760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600781526020016046815250905060005b85518110156114cd576114ba8682815181106114ac576114ab615109565b5b602002602001015183611984565b80806114c590614f11565b91505061148d565b50505b61040586036115735760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600a81526020016046815250905060005b85518110156115705761155d86828151811061154f5761154e615109565b5b602002602001015183611984565b808061156890614f11565b915050611530565b50505b50505050505050565b611584612118565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806115ca57506115c9856115c4612118565b611d4c565b5b611609576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611600906151aa565b60405180910390fd5b61161685858585856124ee565b5050505050565b61162682610eae565b61163781611632612118565b612804565b61164183836128a1565b505050565b600061165382600061177f565b80611665575061166482600161177f565b5b80611677575061167682600261177f565b5b8061168a57506116898261040061177f565b5b8061169d575061169c8261040161177f565b5b806116b057506116af8261040261177f565b5b806116c357506116c28261040361177f565b5b806116d657506116d58261040461177f565b5b806116e957506116e88261040561177f565b5b9050919050565b6116f8612118565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c9061523c565b60405180910390fd5b61176f8282612982565b5050565b61030281565b61030081565b60008161178b84611970565b14905092915050565b606081518351146117da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d1906152ce565b60405180910390fd5b6000835167ffffffffffffffff8111156117f7576117f6614040565b5b6040519080825280602002602001820160405280156118255781602001602082028036833780820191505090505b50905060005b84518110156118a25761187285828151811061184a57611849615109565b5b602002602001015185838151811061186557611864615109565b5b6020026020010151610998565b82828151811061188557611884615109565b5b6020026020010181815250508061189b90614f11565b905061182b565b508091505092915050565b6000806118b983611bd8565b119050919050565b61040281565b61050081565b61040081565b6118db612118565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061192157506119208361191b612118565b611d4c565b5b611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790615360565b60405180910390fd5b61196b838383612a64565b505050565b600060108263ffff000016901c9050919050565b61198d82611646565b806119a0575061199f8261020061177f565b5b6119df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d6906153f2565b60405180910390fd5b611a107f61c92169ef077349011ff0b1383c894d86c5f0b41d986366b58a6cf31e93beda611a0b612118565b611b21565b611a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a469061545e565b60405180910390fd5b8061012e6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155610100820151816008015561012082015181600901559050505050565b60006010610500901b611ae49190614d5d565b81565b61040481565b600061012d6000838152602001908152602001600020549050919050565b60046010610500901b611b1e9190614d5d565b81565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61040581565b7f61c92169ef077349011ff0b1383c894d86c5f0b41d986366b58a6cf31e93beda81565b6000801b81565b611bcf611bc8612118565b8383612d16565b5050565b600281565b600060fb6000838152602001908152602001600020549050919050565b611bfd613d62565b611c0682611646565b80611c195750611c188261020061177f565b5b611c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4f906153f2565b60405180910390fd5b61012e6000838152602001908152602001600020604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611d1082610eae565b611d2181611d1c612118565b612804565b611d2b8383612982565b505050565b61040181565b60026010610500901b611d499190614d5d565b81565b6000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61040381565b611dee612118565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611e345750611e3385611e2e612118565b611d4c565b5b611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90615360565b60405180910390fd5b611e808585858585612e82565b5050505050565b611e8f612118565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611ed55750611ed483611ecf612118565b611d4c565b5b611f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b90615360565b60405180910390fd5b611f1f838383613106565b505050565b600060019054906101000a900460ff16611f4c5760008054906101000a900460ff1615611f55565b611f54613324565b5b611f94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8b906154f0565b60405180910390fd5b60008060019054906101000a900460ff161590508015611fe4576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611fed82613335565b6120016000801b611ffc612118565b613390565b6120327f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661202d612118565b613390565b6120637f61c92169ef077349011ff0b1383c894d86c5f0b41d986366b58a6cf31e93beda61205e612118565b613390565b80156120845760008060016101000a81548160ff0219169083151502179055505b5050565b60016010610500901b61209b9190614d5d565b81565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061211157506121108261339e565b5b9050919050565b600033905090565b8060679080519060200190612136929190613db5565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036121a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a090615582565b60405180910390fd5b60006121b3612118565b90506121d4816000876121c588613480565b6121ce88613480565b876134fa565b826065600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122349190614d5d565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516122b29291906155a2565b60405180910390a46122c981600087878787613510565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361233f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233690615582565b60405180910390fd5b8151835114612383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237a9061563d565b60405180910390fd5b600061238d612118565b905061239e816000878787876134fa565b60005b8451811015612458578381815181106123bd576123bc615109565b5b6020026020010151606560008784815181106123dc576123db615109565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461243e9190614d5d565b92505081905550808061245090614f11565b9150506123a1565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516124d092919061565d565b60405180910390a46124e7816000878787876136e7565b5050505050565b8151835114612532576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125299061563d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036125a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259890615706565b60405180910390fd5b60006125ab612118565b90506125bb8187878787876134fa565b60005b845181101561276f5760008582815181106125dc576125db615109565b5b6020026020010151905060008583815181106125fb576125fa615109565b5b6020026020010151905060006065600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561269d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269490615798565b60405180910390fd5b8181036065600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816065600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127549190614d5d565b925050819055505050508061276890614f11565b90506125be565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516127e692919061565d565b60405180910390a46127fc8187878787876136e7565b505050505050565b61280e8282611b21565b61289d576128338173ffffffffffffffffffffffffffffffffffffffff1660146138be565b6128418360001c60206138be565b60405160200161285292919061588c565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128949190614269565b60405180910390fd5b5050565b6128ab8282611b21565b61297e5760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612923612118565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61298c8282611b21565b15612a605760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612a05612118565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aca90615938565b60405180910390fd5b8051825114612b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0e9061563d565b60405180910390fd5b6000612b21612118565b9050612b41818560008686604051806020016040528060008152506134fa565b60005b8351811015612c90576000848281518110612b6257612b61615109565b5b602002602001015190506000848381518110612b8157612b80615109565b5b6020026020010151905060006065600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612c23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1a906159ca565b60405180910390fd5b8181036065600085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080612c8890614f11565b915050612b44565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612d0892919061565d565b60405180910390a450505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7b90615a5c565b60405180910390fd5b80606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612e75919061400a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee890615706565b60405180910390fd5b6000612efb612118565b9050612f1b818787612f0c88613480565b612f1588613480565b876134fa565b60006065600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612faa90615798565b60405180910390fd5b8381036065600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836065600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461306a9190614d5d565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516130e79291906155a2565b60405180910390a46130fd828888888888613510565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603613175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316c90615938565b60405180910390fd5b600061317f612118565b90506131af8185600061319187613480565b61319a87613480565b604051806020016040528060008152506134fa565b60006065600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015613247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323e906159ca565b60405180910390fd5b8281036065600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516133159291906155a2565b60405180910390a45050505050565b600061332f30613afa565b15905090565b600060019054906101000a900460ff16613384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337b90615aee565b60405180910390fd5b61338d81613b1d565b50565b61339a82826128a1565b5050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061346957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613479575061347882613b78565b5b9050919050565b60606000600167ffffffffffffffff81111561349f5761349e614040565b5b6040519080825280602002602001820160405280156134cd5781602001602082028036833780820191505090505b50905082816000815181106134e5576134e4615109565b5b60200260200101818152505080915050919050565b613508868686868686613be2565b505050505050565b61352f8473ffffffffffffffffffffffffffffffffffffffff16613afa565b156136df578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613575959493929190615b72565b6020604051808303816000875af19250505080156135b157506040513d601f19601f820116820180604052508101906135ae9190615be1565b60015b613656576135bd615c1b565b806308c379a00361361957506135d1615c3d565b806135dc575061361b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136109190614269565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161364d90615d3f565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146136dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136d490615dd1565b60405180910390fd5b505b505050505050565b6137068473ffffffffffffffffffffffffffffffffffffffff16613afa565b156138b6578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161374c959493929190615df1565b6020604051808303816000875af192505050801561378857506040513d601f19601f820116820180604052508101906137859190615be1565b60015b61382d57613794615c1b565b806308c379a0036137f057506137a8615c3d565b806137b357506137f2565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137e79190614269565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161382490615d3f565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146138b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138ab90615dd1565b60405180910390fd5b505b505050505050565b6060600060028360026138d19190615e59565b6138db9190614d5d565b67ffffffffffffffff8111156138f4576138f3614040565b5b6040519080825280601f01601f1916602001820160405280156139265781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061395e5761395d615109565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106139c2576139c1615109565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613a029190615e59565b613a0c9190614d5d565b90505b6001811115613aac577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613a4e57613a4d615109565b5b1a60f81b828281518110613a6557613a64615109565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613aa590615eb3565b9050613a0f565b5060008414613af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ae790615f28565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16613b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b6390615aee565b60405180910390fd5b613b7581612120565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b613bf0868686868686613d5a565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603613ca15760005b8351811015613c9f57828181518110613c4357613c42615109565b5b602002602001015160fb6000868481518110613c6257613c61615109565b5b602002602001015181526020019081526020016000206000828254613c879190614d5d565b9250508190555080613c9890614f11565b9050613c27565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603613d525760005b8351811015613d5057828181518110613cf457613cf3615109565b5b602002602001015160fb6000868481518110613d1357613d12615109565b5b602002602001015181526020019081526020016000206000828254613d389190615f48565b9250508190555080613d4990614f11565b9050613cd8565b505b505050505050565b505050505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054613dc190614de2565b90600052602060002090601f016020900481019282613de35760008555613e2a565b82601f10613dfc57805160ff1916838001178555613e2a565b82800160010185558215613e2a579182015b82811115613e29578251825591602001919060010190613e0e565b5b509050613e379190613e3b565b5090565b5b80821115613e54576000816000905550600101613e3c565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613e9782613e6c565b9050919050565b613ea781613e8c565b8114613eb257600080fd5b50565b600081359050613ec481613e9e565b92915050565b6000819050919050565b613edd81613eca565b8114613ee857600080fd5b50565b600081359050613efa81613ed4565b92915050565b60008060408385031215613f1757613f16613e62565b5b6000613f2585828601613eb5565b9250506020613f3685828601613eeb565b9150509250929050565b613f4981613eca565b82525050565b6000602082019050613f646000830184613f40565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613f9f81613f6a565b8114613faa57600080fd5b50565b600081359050613fbc81613f96565b92915050565b600060208284031215613fd857613fd7613e62565b5b6000613fe684828501613fad565b91505092915050565b60008115159050919050565b61400481613fef565b82525050565b600060208201905061401f6000830184613ffb565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6140788261402f565b810181811067ffffffffffffffff8211171561409757614096614040565b5b80604052505050565b60006140aa613e58565b90506140b6828261406f565b919050565b600067ffffffffffffffff8211156140d6576140d5614040565b5b6140df8261402f565b9050602081019050919050565b82818337600083830152505050565b600061410e614109846140bb565b6140a0565b90508281526020810184848401111561412a5761412961402a565b5b6141358482856140ec565b509392505050565b600082601f83011261415257614151614025565b5b81356141628482602086016140fb565b91505092915050565b60006020828403121561418157614180613e62565b5b600082013567ffffffffffffffff81111561419f5761419e613e67565b5b6141ab8482850161413d565b91505092915050565b6000602082840312156141ca576141c9613e62565b5b60006141d884828501613eeb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561421b578082015181840152602081019050614200565b8381111561422a576000848401525b50505050565b600061423b826141e1565b61424581856141ec565b93506142558185602086016141fd565b61425e8161402f565b840191505092915050565b600060208201905081810360008301526142838184614230565b905092915050565b6000806000606084860312156142a4576142a3613e62565b5b60006142b286828701613eb5565b93505060206142c386828701613eeb565b92505060406142d486828701613eeb565b9150509250925092565b6000819050919050565b6142f1816142de565b81146142fc57600080fd5b50565b60008135905061430e816142e8565b92915050565b60006020828403121561432a57614329613e62565b5b6000614338848285016142ff565b91505092915050565b61434a816142de565b82525050565b60006020820190506143656000830184614341565b92915050565b600067ffffffffffffffff82111561438657614385614040565b5b602082029050602081019050919050565b600080fd5b60006143af6143aa8461436b565b6140a0565b905080838252602082019050602084028301858111156143d2576143d1614397565b5b835b818110156143fb57806143e78882613eeb565b8452602084019350506020810190506143d4565b5050509392505050565b600082601f83011261441a57614419614025565b5b813561442a84826020860161439c565b91505092915050565b600067ffffffffffffffff82111561444e5761444d614040565b5b6144578261402f565b9050602081019050919050565b600061447761447284614433565b6140a0565b9050828152602081018484840111156144935761449261402a565b5b61449e8482856140ec565b509392505050565b600082601f8301126144bb576144ba614025565b5b81356144cb848260208601614464565b91505092915050565b600080600080600060a086880312156144f0576144ef613e62565b5b60006144fe88828901613eb5565b955050602061450f88828901613eb5565b945050604086013567ffffffffffffffff8111156145305761452f613e67565b5b61453c88828901614405565b935050606086013567ffffffffffffffff81111561455d5761455c613e67565b5b61456988828901614405565b925050608086013567ffffffffffffffff81111561458a57614589613e67565b5b614596888289016144a6565b9150509295509295909350565b600080604083850312156145ba576145b9613e62565b5b60006145c8858286016142ff565b92505060206145d985828601613eb5565b9150509250929050565b600080604083850312156145fa576145f9613e62565b5b600061460885828601613eeb565b925050602061461985828601613eeb565b9150509250929050565b600067ffffffffffffffff82111561463e5761463d614040565b5b602082029050602081019050919050565b600061466261465d84614623565b6140a0565b9050808382526020820190506020840283018581111561468557614684614397565b5b835b818110156146ae578061469a8882613eb5565b845260208401935050602081019050614687565b5050509392505050565b600082601f8301126146cd576146cc614025565b5b81356146dd84826020860161464f565b91505092915050565b600080604083850312156146fd576146fc613e62565b5b600083013567ffffffffffffffff81111561471b5761471a613e67565b5b614727858286016146b8565b925050602083013567ffffffffffffffff81111561474857614747613e67565b5b61475485828601614405565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61479381613eca565b82525050565b60006147a5838361478a565b60208301905092915050565b6000602082019050919050565b60006147c98261475e565b6147d38185614769565b93506147de8361477a565b8060005b8381101561480f5781516147f68882614799565b9750614801836147b1565b9250506001810190506147e2565b5085935050505092915050565b6000602082019050818103600083015261483681846147be565b905092915050565b60008060006060848603121561485757614856613e62565b5b600061486586828701613eb5565b935050602084013567ffffffffffffffff81111561488657614885613e67565b5b61489286828701614405565b925050604084013567ffffffffffffffff8111156148b3576148b2613e67565b5b6148bf86828701614405565b9150509250925092565b600080fd5b600061014082840312156148e5576148e46148c9565b5b6148f06101406140a0565b9050600061490084828501613eeb565b600083015250602061491484828501613eeb565b602083015250604061492884828501613eeb565b604083015250606061493c84828501613eeb565b606083015250608061495084828501613eeb565b60808301525060a061496484828501613eeb565b60a08301525060c061497884828501613eeb565b60c08301525060e061498c84828501613eeb565b60e0830152506101006149a184828501613eeb565b610100830152506101206149b784828501613eeb565b6101208301525092915050565b60008061016083850312156149dc576149db613e62565b5b60006149ea85828601613eeb565b92505060206149fb858286016148ce565b9150509250929050565b614a0e81613fef565b8114614a1957600080fd5b50565b600081359050614a2b81614a05565b92915050565b60008060408385031215614a4857614a47613e62565b5b6000614a5685828601613eb5565b9250506020614a6785828601614a1c565b9150509250929050565b61014082016000820151614a88600085018261478a565b506020820151614a9b602085018261478a565b506040820151614aae604085018261478a565b506060820151614ac1606085018261478a565b506080820151614ad4608085018261478a565b5060a0820151614ae760a085018261478a565b5060c0820151614afa60c085018261478a565b5060e0820151614b0d60e085018261478a565b50610100820151614b2261010085018261478a565b50610120820151614b3761012085018261478a565b50505050565b600061014082019050614b536000830184614a71565b92915050565b60008060408385031215614b7057614b6f613e62565b5b6000614b7e85828601613eb5565b9250506020614b8f85828601613eb5565b9150509250929050565b600080600080600060a08688031215614bb557614bb4613e62565b5b6000614bc388828901613eb5565b9550506020614bd488828901613eb5565b9450506040614be588828901613eeb565b9350506060614bf688828901613eeb565b925050608086013567ffffffffffffffff811115614c1757614c16613e67565b5b614c23888289016144a6565b9150509295509295909350565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614c8c602b836141ec565b9150614c9782614c30565b604082019050919050565b60006020820190508181036000830152614cbb81614c7f565b9050919050565b7f6e6565642044454641554c545f41444d494e5f524f4c45000000000000000000600082015250565b6000614cf86017836141ec565b9150614d0382614cc2565b602082019050919050565b60006020820190508181036000830152614d2781614ceb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614d6882613eca565b9150614d7383613eca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614da857614da7614d2e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614dfa57607f821691505b602082108103614e0d57614e0c614db3565b5b50919050565b7f4d45544152554e434f4c4c454354494f4e3a206e656564204d494e5445525f5260008201527f4f4c450000000000000000000000000000000000000000000000000000000000602082015250565b6000614e6f6023836141ec565b9150614e7a82614e13565b604082019050919050565b60006020820190508181036000830152614e9e81614e62565b9050919050565b7f43616e6e6f74206d696e74206d6f7265207468616e206f6e65206974656d0000600082015250565b6000614edb601e836141ec565b9150614ee682614ea5565b602082019050919050565b60006020820190508181036000830152614f0a81614ece565b9050919050565b6000614f1c82613eca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f4e57614f4d614d2e565b5b600182019050919050565b7f4e4545445f4d494e5445525f524f4c4500000000000000000000000000000000600082015250565b6000614f8f6010836141ec565b9150614f9a82614f59565b602082019050919050565b60006020820190508181036000830152614fbe81614f82565b9050919050565b7f554e5355495441424c455f4b494e440000000000000000000000000000000000600082015250565b6000614ffb600f836141ec565b915061500682614fc5565b602082019050919050565b6000602082019050818103600083015261502a81614fee565b9050919050565b7f434f554e545f554e444552464c4f570000000000000000000000000000000000600082015250565b6000615067600f836141ec565b915061507282615031565b602082019050919050565b600060208201905081810360008301526150968161505a565b9050919050565b7f4b494e445f4f564552464c4f5700000000000000000000000000000000000000600082015250565b60006150d3600d836141ec565b91506150de8261509d565b602082019050919050565b60006020820190508181036000830152615102816150c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b60006151946032836141ec565b915061519f82615138565b604082019050919050565b600060208201905081810360008301526151c381615187565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000615226602f836141ec565b9150615231826151ca565b604082019050919050565b6000602082019050818103600083015261525581615219565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006152b86029836141ec565b91506152c38261525c565b604082019050919050565b600060208201905081810360008301526152e7816152ab565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b600061534a6029836141ec565b9150615355826152ee565b604082019050919050565b600060208201905081810360008301526153798161533d565b9050919050565b7f5065726b732061726520617661696c61626c65206f6e6c7920666f722063686160008201527f726163746572732c207065747320616e64207469636b65747300000000000000602082015250565b60006153dc6039836141ec565b91506153e782615380565b604082019050919050565b6000602082019050818103600083015261540b816153cf565b9050919050565b7f6e656564205345545445525f524f4c4500000000000000000000000000000000600082015250565b60006154486010836141ec565b915061545382615412565b602082019050919050565b600060208201905081810360008301526154778161543b565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006154da602e836141ec565b91506154e58261547e565b604082019050919050565b60006020820190508181036000830152615509816154cd565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061556c6021836141ec565b915061557782615510565b604082019050919050565b6000602082019050818103600083015261559b8161555f565b9050919050565b60006040820190506155b76000830185613f40565b6155c46020830184613f40565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006156276028836141ec565b9150615632826155cb565b604082019050919050565b600060208201905081810360008301526156568161561a565b9050919050565b6000604082019050818103600083015261567781856147be565b9050818103602083015261568b81846147be565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006156f06025836141ec565b91506156fb82615694565b604082019050919050565b6000602082019050818103600083015261571f816156e3565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000615782602a836141ec565b915061578d82615726565b604082019050919050565b600060208201905081810360008301526157b181615775565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006157f96017836157b8565b9150615804826157c3565b601782019050919050565b600061581a826141e1565b61582481856157b8565b93506158348185602086016141fd565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006158766011836157b8565b915061588182615840565b601182019050919050565b6000615897826157ec565b91506158a3828561580f565b91506158ae82615869565b91506158ba828461580f565b91508190509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006159226023836141ec565b915061592d826158c6565b604082019050919050565b6000602082019050818103600083015261595181615915565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006159b46024836141ec565b91506159bf82615958565b604082019050919050565b600060208201905081810360008301526159e3816159a7565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000615a466029836141ec565b9150615a51826159ea565b604082019050919050565b60006020820190508181036000830152615a7581615a39565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615ad8602b836141ec565b9150615ae382615a7c565b604082019050919050565b60006020820190508181036000830152615b0781615acb565b9050919050565b615b1781613e8c565b82525050565b600081519050919050565b600082825260208201905092915050565b6000615b4482615b1d565b615b4e8185615b28565b9350615b5e8185602086016141fd565b615b678161402f565b840191505092915050565b600060a082019050615b876000830188615b0e565b615b946020830187615b0e565b615ba16040830186613f40565b615bae6060830185613f40565b8181036080830152615bc08184615b39565b90509695505050505050565b600081519050615bdb81613f96565b92915050565b600060208284031215615bf757615bf6613e62565b5b6000615c0584828501615bcc565b91505092915050565b60008160e01c9050919050565b600060033d1115615c3a5760046000803e615c37600051615c0e565b90505b90565b600060443d10615cca57615c4f613e58565b60043d036004823e80513d602482011167ffffffffffffffff82111715615c77575050615cca565b808201805167ffffffffffffffff811115615c955750505050615cca565b80602083010160043d038501811115615cb2575050505050615cca565b615cc18260200185018661406f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615d296034836141ec565b9150615d3482615ccd565b604082019050919050565b60006020820190508181036000830152615d5881615d1c565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615dbb6028836141ec565b9150615dc682615d5f565b604082019050919050565b60006020820190508181036000830152615dea81615dae565b9050919050565b600060a082019050615e066000830188615b0e565b615e136020830187615b0e565b8181036040830152615e2581866147be565b90508181036060830152615e3981856147be565b90508181036080830152615e4d8184615b39565b90509695505050505050565b6000615e6482613eca565b9150615e6f83613eca565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615ea857615ea7614d2e565b5b828202905092915050565b6000615ebe82613eca565b915060008203615ed157615ed0614d2e565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615f126020836141ec565b9150615f1d82615edc565b602082019050919050565b60006020820190508181036000830152615f4181615f05565b9050919050565b6000615f5382613eca565b9150615f5e83613eca565b925082821015615f7157615f70614d2e565b5b82820390509291505056fea2646970667358221220f5d8698e810166258751bdee832816b6ee9f72ece07149ef883fb080b131f54364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d55760003560e01c80636b20c45411610182578063b73eeaf6116100e9578063df4b5aeb116100a2578063f242432a1161007c578063f242432a14610926578063f5298aca14610942578063f62d18881461095e578063fe4ba8c11461097a576102d5565b8063df4b5aeb146108ba578063e985e9c5146108d8578063edd75e9414610908576102d5565b8063b73eeaf6146107e4578063bd85b03914610802578063ca16487b14610832578063d539139314610862578063d547741f14610880578063d91a1d7f1461089c576102d5565b80639177595e1161013b5780639177595e1461072057806391d148541461073e5780639c3ddd4a1461076e578063a2011b3f1461078c578063a217fddf146107aa578063a22cb465146107c8576102d5565b80636b20c4541461064c5780636ca8fede1461066857806377041f1814610698578063792f96cf146106b45780638478ff27146106d25780638a6ad02e146106f0576102d5565b80632e81aaea1161024157806345ada2ab116101fa5780634f558e79116101d45780634f558e79146105c2578063528575fd146105f2578063565554ff1461061057806365a9bf891461062e576102d5565b806345ada2ab14610544578063492e17fe146105625780634e1273f414610592576102d5565b80632e81aaea146104865780632eb2c2d6146104a25780632f2ff15d146104be5780632f85a827146104da57806336568abe1461050a578063387570ca14610526576102d5565b8063156e29f611610293578063156e29f6146103c25780632147e111146103de578063248a9ca3146103fc57806327efa6ea1461042c5780632b2a43c01461044a5780632d1e97f814610468576102d5565b8062fdd58e146102da578063010a2ae11461030a57806301ffc9a71461032857806302fe5305146103585780630e5bda98146103745780630e89341c14610392575b600080fd5b6102f460048036038101906102ef9190613f00565b610998565b6040516103019190613f4f565b60405180910390f35b610312610a61565b60405161031f9190613f4f565b60405180910390f35b610342600480360381019061033d9190613fc2565b610a67565b60405161034f919061400a565b60405180910390f35b610372600480360381019061036d919061416b565b610a79565b005b61037c610ad8565b6040516103899190613f4f565b60405180910390f35b6103ac60048036038101906103a791906141b4565b610aee565b6040516103b99190614269565b60405180910390f35b6103dc60048036038101906103d7919061428b565b610b82565b005b6103e6610ea9565b6040516103f39190613f4f565b60405180910390f35b61041660048036038101906104119190614314565b610eae565b6040516104239190614350565b60405180910390f35b610434610ece565b6040516104419190613f4f565b60405180910390f35b610452610ed3565b60405161045f9190613f4f565b60405180910390f35b610470610ed9565b60405161047d9190613f4f565b60405180910390f35b6104a0600480360381019061049b919061428b565b610edf565b005b6104bc60048036038101906104b791906144d4565b61157c565b005b6104d860048036038101906104d391906145a3565b61161d565b005b6104f460048036038101906104ef91906141b4565b611646565b604051610501919061400a565b60405180910390f35b610524600480360381019061051f91906145a3565b6116f0565b005b61052e611773565b60405161053b9190613f4f565b60405180910390f35b61054c611779565b6040516105599190613f4f565b60405180910390f35b61057c600480360381019061057791906145e3565b61177f565b604051610589919061400a565b60405180910390f35b6105ac60048036038101906105a791906146e6565b611794565b6040516105b9919061481c565b60405180910390f35b6105dc60048036038101906105d791906141b4565b6118ad565b6040516105e9919061400a565b60405180910390f35b6105fa6118c1565b6040516106079190613f4f565b60405180910390f35b6106186118c7565b6040516106259190613f4f565b60405180910390f35b6106366118cd565b6040516106439190613f4f565b60405180910390f35b6106666004803603810190610661919061483e565b6118d3565b005b610682600480360381019061067d91906141b4565b611970565b60405161068f9190613f4f565b60405180910390f35b6106b260048036038101906106ad91906149c4565b611984565b005b6106bc611ad1565b6040516106c99190613f4f565b60405180910390f35b6106da611ae7565b6040516106e79190613f4f565b60405180910390f35b61070a600480360381019061070591906141b4565b611aed565b6040516107179190613f4f565b60405180910390f35b610728611b0b565b6040516107359190613f4f565b60405180910390f35b610758600480360381019061075391906145a3565b611b21565b604051610765919061400a565b60405180910390f35b610776611b8c565b6040516107839190613f4f565b60405180910390f35b610794611b92565b6040516107a19190614350565b60405180910390f35b6107b2611bb6565b6040516107bf9190614350565b60405180910390f35b6107e260048036038101906107dd9190614a31565b611bbd565b005b6107ec611bd3565b6040516107f99190613f4f565b60405180910390f35b61081c600480360381019061081791906141b4565b611bd8565b6040516108299190613f4f565b60405180910390f35b61084c600480360381019061084791906141b4565b611bf5565b6040516108599190614b3d565b60405180910390f35b61086a611ce3565b6040516108779190614350565b60405180910390f35b61089a600480360381019061089591906145a3565b611d07565b005b6108a4611d30565b6040516108b19190613f4f565b60405180910390f35b6108c2611d36565b6040516108cf9190613f4f565b60405180910390f35b6108f260048036038101906108ed9190614b59565b611d4c565b6040516108ff919061400a565b60405180910390f35b610910611de0565b60405161091d9190613f4f565b60405180910390f35b610940600480360381019061093b9190614b99565b611de6565b005b61095c6004803603810190610957919061428b565b611e87565b005b6109786004803603810190610973919061416b565b611f24565b005b610982612088565b60405161098f9190613f4f565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff90614ca2565b60405180910390fd5b6065600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61030181565b6000610a728261209e565b9050919050565b610a8d6000801b610a88612118565b611b21565b610acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac390614d0e565b60405180910390fd5b610ad581612120565b50565b60036010610500901b610aeb9190614d5d565b81565b606060678054610afd90614de2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2990614de2565b8015610b765780601f10610b4b57610100808354040283529160200191610b76565b820191906000526020600020905b815481529060010190602001808311610b5957829003601f168201915b50505050509050919050565b610bb37f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610bae612118565b611b21565b610bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be990614e85565b60405180910390fd5b610bfe8261050061177f565b610c8f5760018114610c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3c90614ef1565b60405180910390fd5b610c4e826118ad565b15610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8590614ef1565b60405180910390fd5b5b610caa8383836040518060200160405280600081525061213a565b61012d6000610cb884611970565b81526020019081526020016000206000815480929190610cd790614f11565b9190505550610400610ce883611970565b03610d2857600a61012e600084815260200190815260200160002060080181905550606461012e6000848152602001908152602001600020600901819055505b610401610d3483611970565b03610d7457600f61012e600084815260200190815260200160002060080181905550608761012e6000848152602001908152602001600020600901819055505b610402610d8083611970565b03610dc057601461012e600084815260200190815260200160002060080181905550609661012e6000848152602001908152602001600020600901819055505b610403610dcc83611970565b03610e0c57600561012e600084815260200190815260200160002060080181905550604661012e6000848152602001908152602001600020600901819055505b610404610e1883611970565b03610e5857600761012e600084815260200190815260200160002060080181905550604661012e6000848152602001908152602001600020600901819055505b610405610e6483611970565b03610ea457600a61012e600084815260200190815260200160002060080181905550604661012e6000848152602001908152602001600020600901819055505b505050565b600081565b600060976000838152602001908152602001600020600101549050919050565b600181565b61020081565b61010081565b610f107f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610f0b612118565b611b21565b610f4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4690614fa5565b60405180910390fd5b6105008203610f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8a90615011565b60405180910390fd5b60008111610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd9061507d565b60405180910390fd5b60008167ffffffffffffffff811115610ff257610ff1614040565b5b6040519080825280602002602001820160405280156110205781602001602082028036833780820191505090505b509050600080601085901b90505b838210156110ce57611040818661177f565b61107f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611076906150e9565b60405180910390fd5b611088816118ad565b6110bb57808383815181106110a05761109f615109565b5b60200260200101818152505081806110b790614f11565b9250505b80806110c690614f11565b91505061102e565b60008467ffffffffffffffff8111156110ea576110e9614040565b5b6040519080825280602002602001820160405280156111185781602001602082028036833780820191505090505b50905060005b8581101561115a57600182828151811061113b5761113a615109565b5b602002602001018181525050808061115290614f11565b91505061111e565b50611176878583604051806020016040528060008152506122d0565b8461012d6000888152602001908152602001600020600082825461119a9190614d5d565b9250508190555061040086036112445760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600a81526020016064815250905060005b85518110156112415761122e8682815181106112205761121f615109565b5b602002602001015183611984565b808061123990614f11565b915050611201565b50505b61040186036112e75760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600f81526020016087815250905060005b85518110156112e4576112d18682815181106112c3576112c2615109565b5b602002602001015183611984565b80806112dc90614f11565b9150506112a4565b50505b610402860361138a5760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001601481526020016096815250905060005b85518110156113875761137486828151811061136657611365615109565b5b602002602001015183611984565b808061137f90614f11565b915050611347565b50505b610403860361142d5760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600581526020016046815250905060005b855181101561142a5761141786828151811061140957611408615109565b5b602002602001015183611984565b808061142290614f11565b9150506113ea565b50505b61040486036114d05760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600781526020016046815250905060005b85518110156114cd576114ba8682815181106114ac576114ab615109565b5b602002602001015183611984565b80806114c590614f11565b91505061148d565b50505b61040586036115735760006040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600a81526020016046815250905060005b85518110156115705761155d86828151811061154f5761154e615109565b5b602002602001015183611984565b808061156890614f11565b915050611530565b50505b50505050505050565b611584612118565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806115ca57506115c9856115c4612118565b611d4c565b5b611609576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611600906151aa565b60405180910390fd5b61161685858585856124ee565b5050505050565b61162682610eae565b61163781611632612118565b612804565b61164183836128a1565b505050565b600061165382600061177f565b80611665575061166482600161177f565b5b80611677575061167682600261177f565b5b8061168a57506116898261040061177f565b5b8061169d575061169c8261040161177f565b5b806116b057506116af8261040261177f565b5b806116c357506116c28261040361177f565b5b806116d657506116d58261040461177f565b5b806116e957506116e88261040561177f565b5b9050919050565b6116f8612118565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c9061523c565b60405180910390fd5b61176f8282612982565b5050565b61030281565b61030081565b60008161178b84611970565b14905092915050565b606081518351146117da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d1906152ce565b60405180910390fd5b6000835167ffffffffffffffff8111156117f7576117f6614040565b5b6040519080825280602002602001820160405280156118255781602001602082028036833780820191505090505b50905060005b84518110156118a25761187285828151811061184a57611849615109565b5b602002602001015185838151811061186557611864615109565b5b6020026020010151610998565b82828151811061188557611884615109565b5b6020026020010181815250508061189b90614f11565b905061182b565b508091505092915050565b6000806118b983611bd8565b119050919050565b61040281565b61050081565b61040081565b6118db612118565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061192157506119208361191b612118565b611d4c565b5b611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790615360565b60405180910390fd5b61196b838383612a64565b505050565b600060108263ffff000016901c9050919050565b61198d82611646565b806119a0575061199f8261020061177f565b5b6119df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d6906153f2565b60405180910390fd5b611a107f61c92169ef077349011ff0b1383c894d86c5f0b41d986366b58a6cf31e93beda611a0b612118565b611b21565b611a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a469061545e565b60405180910390fd5b8061012e6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155610100820151816008015561012082015181600901559050505050565b60006010610500901b611ae49190614d5d565b81565b61040481565b600061012d6000838152602001908152602001600020549050919050565b60046010610500901b611b1e9190614d5d565b81565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61040581565b7f61c92169ef077349011ff0b1383c894d86c5f0b41d986366b58a6cf31e93beda81565b6000801b81565b611bcf611bc8612118565b8383612d16565b5050565b600281565b600060fb6000838152602001908152602001600020549050919050565b611bfd613d62565b611c0682611646565b80611c195750611c188261020061177f565b5b611c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4f906153f2565b60405180910390fd5b61012e6000838152602001908152602001600020604051806101400160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611d1082610eae565b611d2181611d1c612118565b612804565b611d2b8383612982565b505050565b61040181565b60026010610500901b611d499190614d5d565b81565b6000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61040381565b611dee612118565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611e345750611e3385611e2e612118565b611d4c565b5b611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90615360565b60405180910390fd5b611e808585858585612e82565b5050505050565b611e8f612118565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611ed55750611ed483611ecf612118565b611d4c565b5b611f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b90615360565b60405180910390fd5b611f1f838383613106565b505050565b600060019054906101000a900460ff16611f4c5760008054906101000a900460ff1615611f55565b611f54613324565b5b611f94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8b906154f0565b60405180910390fd5b60008060019054906101000a900460ff161590508015611fe4576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611fed82613335565b6120016000801b611ffc612118565b613390565b6120327f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661202d612118565b613390565b6120637f61c92169ef077349011ff0b1383c894d86c5f0b41d986366b58a6cf31e93beda61205e612118565b613390565b80156120845760008060016101000a81548160ff0219169083151502179055505b5050565b60016010610500901b61209b9190614d5d565b81565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061211157506121108261339e565b5b9050919050565b600033905090565b8060679080519060200190612136929190613db5565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036121a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a090615582565b60405180910390fd5b60006121b3612118565b90506121d4816000876121c588613480565b6121ce88613480565b876134fa565b826065600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122349190614d5d565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516122b29291906155a2565b60405180910390a46122c981600087878787613510565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361233f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233690615582565b60405180910390fd5b8151835114612383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237a9061563d565b60405180910390fd5b600061238d612118565b905061239e816000878787876134fa565b60005b8451811015612458578381815181106123bd576123bc615109565b5b6020026020010151606560008784815181106123dc576123db615109565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461243e9190614d5d565b92505081905550808061245090614f11565b9150506123a1565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516124d092919061565d565b60405180910390a46124e7816000878787876136e7565b5050505050565b8151835114612532576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125299061563d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036125a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259890615706565b60405180910390fd5b60006125ab612118565b90506125bb8187878787876134fa565b60005b845181101561276f5760008582815181106125dc576125db615109565b5b6020026020010151905060008583815181106125fb576125fa615109565b5b6020026020010151905060006065600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561269d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269490615798565b60405180910390fd5b8181036065600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816065600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127549190614d5d565b925050819055505050508061276890614f11565b90506125be565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516127e692919061565d565b60405180910390a46127fc8187878787876136e7565b505050505050565b61280e8282611b21565b61289d576128338173ffffffffffffffffffffffffffffffffffffffff1660146138be565b6128418360001c60206138be565b60405160200161285292919061588c565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128949190614269565b60405180910390fd5b5050565b6128ab8282611b21565b61297e5760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612923612118565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61298c8282611b21565b15612a605760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612a05612118565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aca90615938565b60405180910390fd5b8051825114612b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0e9061563d565b60405180910390fd5b6000612b21612118565b9050612b41818560008686604051806020016040528060008152506134fa565b60005b8351811015612c90576000848281518110612b6257612b61615109565b5b602002602001015190506000848381518110612b8157612b80615109565b5b6020026020010151905060006065600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612c23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1a906159ca565b60405180910390fd5b8181036065600085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080612c8890614f11565b915050612b44565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612d0892919061565d565b60405180910390a450505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7b90615a5c565b60405180910390fd5b80606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612e75919061400a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee890615706565b60405180910390fd5b6000612efb612118565b9050612f1b818787612f0c88613480565b612f1588613480565b876134fa565b60006065600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612faa90615798565b60405180910390fd5b8381036065600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836065600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461306a9190614d5d565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516130e79291906155a2565b60405180910390a46130fd828888888888613510565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603613175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316c90615938565b60405180910390fd5b600061317f612118565b90506131af8185600061319187613480565b61319a87613480565b604051806020016040528060008152506134fa565b60006065600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015613247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323e906159ca565b60405180910390fd5b8281036065600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516133159291906155a2565b60405180910390a45050505050565b600061332f30613afa565b15905090565b600060019054906101000a900460ff16613384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337b90615aee565b60405180910390fd5b61338d81613b1d565b50565b61339a82826128a1565b5050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061346957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613479575061347882613b78565b5b9050919050565b60606000600167ffffffffffffffff81111561349f5761349e614040565b5b6040519080825280602002602001820160405280156134cd5781602001602082028036833780820191505090505b50905082816000815181106134e5576134e4615109565b5b60200260200101818152505080915050919050565b613508868686868686613be2565b505050505050565b61352f8473ffffffffffffffffffffffffffffffffffffffff16613afa565b156136df578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613575959493929190615b72565b6020604051808303816000875af19250505080156135b157506040513d601f19601f820116820180604052508101906135ae9190615be1565b60015b613656576135bd615c1b565b806308c379a00361361957506135d1615c3d565b806135dc575061361b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136109190614269565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161364d90615d3f565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146136dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136d490615dd1565b60405180910390fd5b505b505050505050565b6137068473ffffffffffffffffffffffffffffffffffffffff16613afa565b156138b6578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161374c959493929190615df1565b6020604051808303816000875af192505050801561378857506040513d601f19601f820116820180604052508101906137859190615be1565b60015b61382d57613794615c1b565b806308c379a0036137f057506137a8615c3d565b806137b357506137f2565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137e79190614269565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161382490615d3f565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146138b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138ab90615dd1565b60405180910390fd5b505b505050505050565b6060600060028360026138d19190615e59565b6138db9190614d5d565b67ffffffffffffffff8111156138f4576138f3614040565b5b6040519080825280601f01601f1916602001820160405280156139265781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061395e5761395d615109565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106139c2576139c1615109565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613a029190615e59565b613a0c9190614d5d565b90505b6001811115613aac577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613a4e57613a4d615109565b5b1a60f81b828281518110613a6557613a64615109565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613aa590615eb3565b9050613a0f565b5060008414613af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ae790615f28565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16613b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b6390615aee565b60405180910390fd5b613b7581612120565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b613bf0868686868686613d5a565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603613ca15760005b8351811015613c9f57828181518110613c4357613c42615109565b5b602002602001015160fb6000868481518110613c6257613c61615109565b5b602002602001015181526020019081526020016000206000828254613c879190614d5d565b9250508190555080613c9890614f11565b9050613c27565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603613d525760005b8351811015613d5057828181518110613cf457613cf3615109565b5b602002602001015160fb6000868481518110613d1357613d12615109565b5b602002602001015181526020019081526020016000206000828254613d389190615f48565b9250508190555080613d4990614f11565b9050613cd8565b505b505050505050565b505050505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054613dc190614de2565b90600052602060002090601f016020900481019282613de35760008555613e2a565b82601f10613dfc57805160ff1916838001178555613e2a565b82800160010185558215613e2a579182015b82811115613e29578251825591602001919060010190613e0e565b5b509050613e379190613e3b565b5090565b5b80821115613e54576000816000905550600101613e3c565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613e9782613e6c565b9050919050565b613ea781613e8c565b8114613eb257600080fd5b50565b600081359050613ec481613e9e565b92915050565b6000819050919050565b613edd81613eca565b8114613ee857600080fd5b50565b600081359050613efa81613ed4565b92915050565b60008060408385031215613f1757613f16613e62565b5b6000613f2585828601613eb5565b9250506020613f3685828601613eeb565b9150509250929050565b613f4981613eca565b82525050565b6000602082019050613f646000830184613f40565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613f9f81613f6a565b8114613faa57600080fd5b50565b600081359050613fbc81613f96565b92915050565b600060208284031215613fd857613fd7613e62565b5b6000613fe684828501613fad565b91505092915050565b60008115159050919050565b61400481613fef565b82525050565b600060208201905061401f6000830184613ffb565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6140788261402f565b810181811067ffffffffffffffff8211171561409757614096614040565b5b80604052505050565b60006140aa613e58565b90506140b6828261406f565b919050565b600067ffffffffffffffff8211156140d6576140d5614040565b5b6140df8261402f565b9050602081019050919050565b82818337600083830152505050565b600061410e614109846140bb565b6140a0565b90508281526020810184848401111561412a5761412961402a565b5b6141358482856140ec565b509392505050565b600082601f83011261415257614151614025565b5b81356141628482602086016140fb565b91505092915050565b60006020828403121561418157614180613e62565b5b600082013567ffffffffffffffff81111561419f5761419e613e67565b5b6141ab8482850161413d565b91505092915050565b6000602082840312156141ca576141c9613e62565b5b60006141d884828501613eeb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561421b578082015181840152602081019050614200565b8381111561422a576000848401525b50505050565b600061423b826141e1565b61424581856141ec565b93506142558185602086016141fd565b61425e8161402f565b840191505092915050565b600060208201905081810360008301526142838184614230565b905092915050565b6000806000606084860312156142a4576142a3613e62565b5b60006142b286828701613eb5565b93505060206142c386828701613eeb565b92505060406142d486828701613eeb565b9150509250925092565b6000819050919050565b6142f1816142de565b81146142fc57600080fd5b50565b60008135905061430e816142e8565b92915050565b60006020828403121561432a57614329613e62565b5b6000614338848285016142ff565b91505092915050565b61434a816142de565b82525050565b60006020820190506143656000830184614341565b92915050565b600067ffffffffffffffff82111561438657614385614040565b5b602082029050602081019050919050565b600080fd5b60006143af6143aa8461436b565b6140a0565b905080838252602082019050602084028301858111156143d2576143d1614397565b5b835b818110156143fb57806143e78882613eeb565b8452602084019350506020810190506143d4565b5050509392505050565b600082601f83011261441a57614419614025565b5b813561442a84826020860161439c565b91505092915050565b600067ffffffffffffffff82111561444e5761444d614040565b5b6144578261402f565b9050602081019050919050565b600061447761447284614433565b6140a0565b9050828152602081018484840111156144935761449261402a565b5b61449e8482856140ec565b509392505050565b600082601f8301126144bb576144ba614025565b5b81356144cb848260208601614464565b91505092915050565b600080600080600060a086880312156144f0576144ef613e62565b5b60006144fe88828901613eb5565b955050602061450f88828901613eb5565b945050604086013567ffffffffffffffff8111156145305761452f613e67565b5b61453c88828901614405565b935050606086013567ffffffffffffffff81111561455d5761455c613e67565b5b61456988828901614405565b925050608086013567ffffffffffffffff81111561458a57614589613e67565b5b614596888289016144a6565b9150509295509295909350565b600080604083850312156145ba576145b9613e62565b5b60006145c8858286016142ff565b92505060206145d985828601613eb5565b9150509250929050565b600080604083850312156145fa576145f9613e62565b5b600061460885828601613eeb565b925050602061461985828601613eeb565b9150509250929050565b600067ffffffffffffffff82111561463e5761463d614040565b5b602082029050602081019050919050565b600061466261465d84614623565b6140a0565b9050808382526020820190506020840283018581111561468557614684614397565b5b835b818110156146ae578061469a8882613eb5565b845260208401935050602081019050614687565b5050509392505050565b600082601f8301126146cd576146cc614025565b5b81356146dd84826020860161464f565b91505092915050565b600080604083850312156146fd576146fc613e62565b5b600083013567ffffffffffffffff81111561471b5761471a613e67565b5b614727858286016146b8565b925050602083013567ffffffffffffffff81111561474857614747613e67565b5b61475485828601614405565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61479381613eca565b82525050565b60006147a5838361478a565b60208301905092915050565b6000602082019050919050565b60006147c98261475e565b6147d38185614769565b93506147de8361477a565b8060005b8381101561480f5781516147f68882614799565b9750614801836147b1565b9250506001810190506147e2565b5085935050505092915050565b6000602082019050818103600083015261483681846147be565b905092915050565b60008060006060848603121561485757614856613e62565b5b600061486586828701613eb5565b935050602084013567ffffffffffffffff81111561488657614885613e67565b5b61489286828701614405565b925050604084013567ffffffffffffffff8111156148b3576148b2613e67565b5b6148bf86828701614405565b9150509250925092565b600080fd5b600061014082840312156148e5576148e46148c9565b5b6148f06101406140a0565b9050600061490084828501613eeb565b600083015250602061491484828501613eeb565b602083015250604061492884828501613eeb565b604083015250606061493c84828501613eeb565b606083015250608061495084828501613eeb565b60808301525060a061496484828501613eeb565b60a08301525060c061497884828501613eeb565b60c08301525060e061498c84828501613eeb565b60e0830152506101006149a184828501613eeb565b610100830152506101206149b784828501613eeb565b6101208301525092915050565b60008061016083850312156149dc576149db613e62565b5b60006149ea85828601613eeb565b92505060206149fb858286016148ce565b9150509250929050565b614a0e81613fef565b8114614a1957600080fd5b50565b600081359050614a2b81614a05565b92915050565b60008060408385031215614a4857614a47613e62565b5b6000614a5685828601613eb5565b9250506020614a6785828601614a1c565b9150509250929050565b61014082016000820151614a88600085018261478a565b506020820151614a9b602085018261478a565b506040820151614aae604085018261478a565b506060820151614ac1606085018261478a565b506080820151614ad4608085018261478a565b5060a0820151614ae760a085018261478a565b5060c0820151614afa60c085018261478a565b5060e0820151614b0d60e085018261478a565b50610100820151614b2261010085018261478a565b50610120820151614b3761012085018261478a565b50505050565b600061014082019050614b536000830184614a71565b92915050565b60008060408385031215614b7057614b6f613e62565b5b6000614b7e85828601613eb5565b9250506020614b8f85828601613eb5565b9150509250929050565b600080600080600060a08688031215614bb557614bb4613e62565b5b6000614bc388828901613eb5565b9550506020614bd488828901613eb5565b9450506040614be588828901613eeb565b9350506060614bf688828901613eeb565b925050608086013567ffffffffffffffff811115614c1757614c16613e67565b5b614c23888289016144a6565b9150509295509295909350565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614c8c602b836141ec565b9150614c9782614c30565b604082019050919050565b60006020820190508181036000830152614cbb81614c7f565b9050919050565b7f6e6565642044454641554c545f41444d494e5f524f4c45000000000000000000600082015250565b6000614cf86017836141ec565b9150614d0382614cc2565b602082019050919050565b60006020820190508181036000830152614d2781614ceb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614d6882613eca565b9150614d7383613eca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614da857614da7614d2e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614dfa57607f821691505b602082108103614e0d57614e0c614db3565b5b50919050565b7f4d45544152554e434f4c4c454354494f4e3a206e656564204d494e5445525f5260008201527f4f4c450000000000000000000000000000000000000000000000000000000000602082015250565b6000614e6f6023836141ec565b9150614e7a82614e13565b604082019050919050565b60006020820190508181036000830152614e9e81614e62565b9050919050565b7f43616e6e6f74206d696e74206d6f7265207468616e206f6e65206974656d0000600082015250565b6000614edb601e836141ec565b9150614ee682614ea5565b602082019050919050565b60006020820190508181036000830152614f0a81614ece565b9050919050565b6000614f1c82613eca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f4e57614f4d614d2e565b5b600182019050919050565b7f4e4545445f4d494e5445525f524f4c4500000000000000000000000000000000600082015250565b6000614f8f6010836141ec565b9150614f9a82614f59565b602082019050919050565b60006020820190508181036000830152614fbe81614f82565b9050919050565b7f554e5355495441424c455f4b494e440000000000000000000000000000000000600082015250565b6000614ffb600f836141ec565b915061500682614fc5565b602082019050919050565b6000602082019050818103600083015261502a81614fee565b9050919050565b7f434f554e545f554e444552464c4f570000000000000000000000000000000000600082015250565b6000615067600f836141ec565b915061507282615031565b602082019050919050565b600060208201905081810360008301526150968161505a565b9050919050565b7f4b494e445f4f564552464c4f5700000000000000000000000000000000000000600082015250565b60006150d3600d836141ec565b91506150de8261509d565b602082019050919050565b60006020820190508181036000830152615102816150c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b60006151946032836141ec565b915061519f82615138565b604082019050919050565b600060208201905081810360008301526151c381615187565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000615226602f836141ec565b9150615231826151ca565b604082019050919050565b6000602082019050818103600083015261525581615219565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006152b86029836141ec565b91506152c38261525c565b604082019050919050565b600060208201905081810360008301526152e7816152ab565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b600061534a6029836141ec565b9150615355826152ee565b604082019050919050565b600060208201905081810360008301526153798161533d565b9050919050565b7f5065726b732061726520617661696c61626c65206f6e6c7920666f722063686160008201527f726163746572732c207065747320616e64207469636b65747300000000000000602082015250565b60006153dc6039836141ec565b91506153e782615380565b604082019050919050565b6000602082019050818103600083015261540b816153cf565b9050919050565b7f6e656564205345545445525f524f4c4500000000000000000000000000000000600082015250565b60006154486010836141ec565b915061545382615412565b602082019050919050565b600060208201905081810360008301526154778161543b565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006154da602e836141ec565b91506154e58261547e565b604082019050919050565b60006020820190508181036000830152615509816154cd565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061556c6021836141ec565b915061557782615510565b604082019050919050565b6000602082019050818103600083015261559b8161555f565b9050919050565b60006040820190506155b76000830185613f40565b6155c46020830184613f40565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006156276028836141ec565b9150615632826155cb565b604082019050919050565b600060208201905081810360008301526156568161561a565b9050919050565b6000604082019050818103600083015261567781856147be565b9050818103602083015261568b81846147be565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006156f06025836141ec565b91506156fb82615694565b604082019050919050565b6000602082019050818103600083015261571f816156e3565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000615782602a836141ec565b915061578d82615726565b604082019050919050565b600060208201905081810360008301526157b181615775565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006157f96017836157b8565b9150615804826157c3565b601782019050919050565b600061581a826141e1565b61582481856157b8565b93506158348185602086016141fd565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006158766011836157b8565b915061588182615840565b601182019050919050565b6000615897826157ec565b91506158a3828561580f565b91506158ae82615869565b91506158ba828461580f565b91508190509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006159226023836141ec565b915061592d826158c6565b604082019050919050565b6000602082019050818103600083015261595181615915565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006159b46024836141ec565b91506159bf82615958565b604082019050919050565b600060208201905081810360008301526159e3816159a7565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000615a466029836141ec565b9150615a51826159ea565b604082019050919050565b60006020820190508181036000830152615a7581615a39565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615ad8602b836141ec565b9150615ae382615a7c565b604082019050919050565b60006020820190508181036000830152615b0781615acb565b9050919050565b615b1781613e8c565b82525050565b600081519050919050565b600082825260208201905092915050565b6000615b4482615b1d565b615b4e8185615b28565b9350615b5e8185602086016141fd565b615b678161402f565b840191505092915050565b600060a082019050615b876000830188615b0e565b615b946020830187615b0e565b615ba16040830186613f40565b615bae6060830185613f40565b8181036080830152615bc08184615b39565b90509695505050505050565b600081519050615bdb81613f96565b92915050565b600060208284031215615bf757615bf6613e62565b5b6000615c0584828501615bcc565b91505092915050565b60008160e01c9050919050565b600060033d1115615c3a5760046000803e615c37600051615c0e565b90505b90565b600060443d10615cca57615c4f613e58565b60043d036004823e80513d602482011167ffffffffffffffff82111715615c77575050615cca565b808201805167ffffffffffffffff811115615c955750505050615cca565b80602083010160043d038501811115615cb2575050505050615cca565b615cc18260200185018661406f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615d296034836141ec565b9150615d3482615ccd565b604082019050919050565b60006020820190508181036000830152615d5881615d1c565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615dbb6028836141ec565b9150615dc682615d5f565b604082019050919050565b60006020820190508181036000830152615dea81615dae565b9050919050565b600060a082019050615e066000830188615b0e565b615e136020830187615b0e565b8181036040830152615e2581866147be565b90508181036060830152615e3981856147be565b90508181036080830152615e4d8184615b39565b90509695505050505050565b6000615e6482613eca565b9150615e6f83613eca565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615ea857615ea7614d2e565b5b828202905092915050565b6000615ebe82613eca565b915060008203615ed157615ed0614d2e565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615f126020836141ec565b9150615f1d82615edc565b602082019050919050565b60006020820190508181036000830152615f4181615f05565b9050919050565b6000615f5382613eca565b9150615f5e83613eca565b925082821015615f7157615f70614d2e565b5b82820390509291505056fea2646970667358221220f5d8698e810166258751bdee832816b6ee9f72ece07149ef883fb080b131f54364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2422,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2669,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 504,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 510,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 512,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1592,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1844,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1870,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1997,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3364,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "kindSupply",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3390,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenPerks",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_uint256,t_struct(Perks)3385_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Perks)3385_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MetarunCollection.Perks)",
        "numberOfBytes": "32",
        "value": "t_struct(Perks)3385_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Perks)3385_storage": {
        "encoding": "inplace",
        "label": "struct MetarunCollection.Perks",
        "members": [
          {
            "astId": 3366,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3368,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "runs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3370,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "wins",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3372,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "ability",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3374,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "health",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3376,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "mana",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3378,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "speed",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3380,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "collisionDamage",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3382,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "runsPerDayLimit",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3384,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "runsTotalLimit",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}