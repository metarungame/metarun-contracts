{
  "address": "0x535fB0e1A44a224d05C0D7fC4A3ec90DEe52Eb14",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeDurationDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yieldRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earlyUnstakeFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestTime",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allocatedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyUnstakeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestableYield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getStakesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDurationDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakesOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20mintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb05166bd2226910096ec31cfdd6d0f7e349cc080702851b9f996184696c6d002",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0x535fB0e1A44a224d05C0D7fC4A3ec90DEe52Eb14",
    "transactionIndex": 14,
    "gasUsed": "2132577",
    "logsBloom": "0x
    "blockHash": "0x6617967e76d9c1ba60a9e79f7f9e5b0dc3871f85108a01008ca6b1a5cb733334",
    "transactionHash": "0xb05166bd2226910096ec31cfdd6d0f7e349cc080702851b9f996184696c6d002",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 10548255,
        "transactionHash": "0xb05166bd2226910096ec31cfdd6d0f7e349cc080702851b9f996184696c6d002",
        "address": "0x535fB0e1A44a224d05C0D7fC4A3ec90DEe52Eb14",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x6617967e76d9c1ba60a9e79f7f9e5b0dc3871f85108a01008ca6b1a5cb733334"
      }
    ],
    "blockNumber": 10548255,
    "cumulativeGasUsed": "8072890",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3D8DD9d2b49ed10455d1c3cb683E514fE3C9a123",
    6,
    2250,
    2250
  ],
  "numDeployments": 1,
  "solcInputHash": "c602ae77f0674d92a8599fe5d1a12dbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeDurationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yieldRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyUnstakeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestTime\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyUnstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestableYield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getStakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDurationDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"the constructor arguments:\",\"params\":{\"_earlyUnstakeFee\":\"fee for unstaking before stake expiration\",\"_stakeDurationDays\":\"the stake duration in days\",\"_token\":\"address of token - the same accepted for staking and used to pay rewards\",\"_yieldRate\":\"reward rate in basis points (1/10000)\"}},\"getStake(address,uint256)\":{\"details\":\"get the individual stake parameters of the user\",\"params\":{\"_stakeId\":\"stake index\",\"_userAddress\":\"account of staker\"},\"returns\":{\"endTime\":\"the time when unstaking (w.o. penalties) becomes possible\",\"harvestableYield\":\"The unlocked part of yield available for harvesting\",\"harvestedYield\":\"The part of yield user harvested already\",\"lastHarvestTime\":\"The time of last harvest event\",\"staked\":\"the status of stake\",\"stakedAmount\":\"the number of deposited tokens\",\"startTime\":\"the moment of stake start\",\"totalYield\":\"entire yield for the stake (totally released on endTime)\"}},\"getStakesLength(address)\":{\"details\":\"get the count of user's stakes. Used on frontend to iterate and display individual stakes\",\"params\":{\"_userAddress\":\"account of staker\"},\"returns\":{\"_0\":\"stakes\"}},\"harvest(uint256)\":{\"details\":\"harvest accumulated rewards. Can be called many times.\",\"params\":{\"_stakeId\":\"Id of the stake\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256)\":{\"details\":\"submit the stake\",\"params\":{\"_amount\":\"amount of tokens to be transferred from user's account\"}},\"start()\":{\"details\":\"start accepting new stakes. Called only by the owner\"},\"stop()\":{\"details\":\"stop accepting new stakes. Called only by the owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256)\":{\"details\":\"withdraw the `body` of user's stake. Can be called only once\",\"params\":{\"_stakeId\":\"Id of the stake\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FixedStaking.sol\":\"FixedStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FixedStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20mintable is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\\ncontract FixedStaking is Ownable {\\n    using SafeERC20 for IERC20mintable;\\n\\n    // user deposits are recorded in StakeInfo[] stakes struct\\n    struct StakeInfo {\\n        // staked is true if deposit is staked and hasn't been unstaked.\\n        // After user claims his stake back, `staked` becomes false\\n        bool staked;\\n        // stakedAmount get recorded at the stake time and doesn't change.\\n        uint256 stakedAmount;\\n        uint256 startTime;\\n        // endTime and totalYield get calculated in advance at the moment of staking\\n        // endTime is the date when unstaking becomes possible (without penalties)\\n        uint256 endTime;\\n        // totalYield is a total value of rewards for the given stake.\\n        // Gets calculated on the stake start and doesnt' change\\n        // but the amount that user is able to withdraw gets gradually unlocked over time.\\n        uint256 totalYield;\\n        // The amount of yield user already harvested and the time of last harvest call.\\n        uint256 harvestedYield;\\n        uint256 lastHarvestTime;\\n    }\\n\\n    // If stakesOpen == true, the contract is operational and accepts new stakes.\\n    // Otherwise it allows just harvesting and unstaking.\\n    bool public stakesOpen;\\n\\n    // The token accepted for staking and used for rewards (The same token for both).\\n    IERC20mintable public token;\\n\\n    // struccture that stores the records of users' stakes\\n    mapping(address => StakeInfo[]) public stakes;\\n\\n    // the total number of staked tokens. Accounted separately to avoid mixing stake and reward balances\\n    uint256 public stakedTokens;\\n\\n    // The staking interval in days.\\n    // Early unstaking is possible but a fine is withheld.\\n    uint256 public stakeDurationDays;\\n\\n    // Fee for early unstake in basis points (1/10000)\\n    // If the user withdraws before stake expiration, he pays `earlyUnstakeFee`\\n    uint256 public earlyUnstakeFee;\\n\\n    // Reward that staker will receive for his stake\\n    // nominated in basis points (1/10000) of staked amount\\n    uint256 public yieldRate;\\n\\n    // Yield tokens reserved for existing stakes to pay on harvest.\\n    // The reward tokens get allocated at the moment of stake.\\n    uint256 public allocatedTokens;\\n\\n    event Stake(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 startTime, uint256 endTime);\\n\\n    event Unstake(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 startTime, uint256 endTime, bool early);\\n\\n    event Harvest(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 harvestTime);\\n\\n    /**\\n     * @dev the constructor arguments:\\n     * @param _token address of token - the same accepted for staking and used to pay rewards\\n     * @param _stakeDurationDays the stake duration in days\\n     * @param _yieldRate reward rate in basis points (1/10000)\\n     * @param _earlyUnstakeFee fee for unstaking before stake expiration\\n     */\\n    constructor(\\n        address _token,\\n        uint256 _stakeDurationDays,\\n        uint256 _yieldRate,\\n        uint256 _earlyUnstakeFee\\n    ) {\\n        require(_token != address(0), \\\"Empty token address\\\");\\n        require(_yieldRate > 0, \\\"Zero yield rate\\\");\\n        require(_earlyUnstakeFee > 0, \\\"Zero early Unstake Fee\\\");\\n        token = IERC20mintable(_token);\\n        stakeDurationDays = _stakeDurationDays;\\n        yieldRate = _yieldRate;\\n        earlyUnstakeFee = _earlyUnstakeFee;\\n    }\\n\\n    /**\\n     * @dev start accepting new stakes. Called only by the owner\\n     */\\n    function start() public onlyOwner {\\n        require(!stakesOpen, \\\"Stakes are open already\\\");\\n        stakesOpen = true;\\n    }\\n\\n    /**\\n     * @dev stop accepting new stakes. Called only by the owner\\n     */\\n    function stop() public onlyOwner {\\n        require(stakesOpen, \\\"Stakes are stopped already\\\");\\n        stakesOpen = false;\\n    }\\n\\n    /**\\n     * @dev submit the stake\\n     * @param _amount   amount of tokens to be transferred from user's account\\n     */\\n    function stake(uint256 _amount) external {\\n        require(stakesOpen, \\\"stake: not open\\\");\\n        require(_amount > 0, \\\"stake: zero amount\\\");\\n        // entire reward allocated for the user for this stake\\n        uint256 totalYield = (_amount * yieldRate) / 10000;\\n        uint256 startTime = _now();\\n        uint256 endTime = _now() + stakeDurationDays * 1 hours;\\n        stakes[msg.sender].push(\\n            StakeInfo({\\n                staked: true,\\n                stakedAmount: _amount,\\n                startTime: startTime,\\n                endTime: endTime,\\n                totalYield: totalYield,\\n                harvestedYield: 0,\\n                lastHarvestTime: startTime\\n            })\\n        );\\n        allocatedTokens = allocatedTokens + totalYield;\\n        stakedTokens = stakedTokens + _amount;\\n        uint256 stakeId = getStakesLength(msg.sender) - 1;\\n        emit Stake(msg.sender, stakeId, _amount, startTime, endTime);\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev withdraw the `body` of user's stake. Can be called only once\\n     * @param _stakeId   Id of the stake\\n     */\\n    function unstake(uint256 _stakeId) external {\\n        (\\n            bool staked,\\n            uint256 stakedAmount,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalYield,\\n            uint256 harvestedYield,\\n            ,\\n            uint256 harvestableYield\\n        ) = getStake(msg.sender, _stakeId);\\n        bool early;\\n        require(staked, \\\"Unstaked already\\\");\\n        if (_now() > endTime) {\\n            stakes[msg.sender][_stakeId].staked = false;\\n            stakedTokens = stakedTokens - stakedAmount;\\n            early = false;\\n            token.safeTransfer(msg.sender, stakedAmount);\\n        } else {\\n            uint256 newTotalYield = harvestedYield + harvestableYield;\\n            allocatedTokens = allocatedTokens - (totalYield - newTotalYield);\\n            stakes[msg.sender][_stakeId].staked = false;\\n            stakes[msg.sender][_stakeId].endTime = _now();\\n            stakes[msg.sender][_stakeId].totalYield = newTotalYield;\\n            stakedTokens = stakedTokens - stakedAmount;\\n            early = true;\\n\\n            uint256 fee = (stakedAmount * earlyUnstakeFee) / 10000;\\n            uint256 amountToTransfer = stakedAmount - fee;\\n            token.safeTransfer(msg.sender, amountToTransfer);\\n            token.burn(fee);\\n        }\\n\\n        emit Unstake(msg.sender, _stakeId, stakedAmount, startTime, endTime, early);\\n    }\\n\\n    /**\\n     * @dev harvest accumulated rewards. Can be called many times.\\n     * @param _stakeId   Id of the stake\\n     */\\n    function harvest(uint256 _stakeId) external {\\n        (, , , , , uint256 harvestedYield, , uint256 harvestableYield) = getStake(msg.sender, _stakeId);\\n        require(harvestableYield != 0, \\\"harvestableYield is zero\\\");\\n        allocatedTokens = allocatedTokens - harvestableYield;\\n        stakes[msg.sender][_stakeId].harvestedYield = harvestedYield + harvestableYield;\\n        stakes[msg.sender][_stakeId].lastHarvestTime = _now();\\n        emit Harvest(msg.sender, _stakeId, harvestableYield, _now());\\n        token.mint(msg.sender, harvestableYield);\\n    }\\n\\n    /**\\n     * @dev get the count of user's stakes. Used on frontend to iterate and display individual stakes\\n     * @param _userAddress account of staker\\n     * @return stakes\\n     */\\n    function getStakesLength(address _userAddress) public view returns (uint256) {\\n        return stakes[_userAddress].length;\\n    }\\n\\n    /**\\n     * @dev get the individual stake parameters of the user\\n     * @param _userAddress account of staker\\n     * @param _stakeId stake index\\n     * @return staked the status of stake\\n     * @return stakedAmount the number of deposited tokens\\n     * @return startTime the moment of stake start\\n     * @return endTime the time when unstaking (w.o. penalties) becomes possible\\n     * @return totalYield entire yield for the stake (totally released on endTime)\\n     * @return harvestedYield The part of yield user harvested already\\n     * @return lastHarvestTime The time of last harvest event\\n     * @return harvestableYield The unlocked part of yield available for harvesting\\n     */\\n    function getStake(address _userAddress, uint256 _stakeId)\\n        public\\n        view\\n        returns (\\n            bool staked,\\n            uint256 stakedAmount,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalYield, // Entire yield for the stake (totally released on endTime)\\n            uint256 harvestedYield, // The part of yield user harvested already\\n            uint256 lastHarvestTime, // The time of last harvest event\\n            uint256 harvestableYield // The unlocked part of yield available for harvesting\\n        )\\n    {\\n        StakeInfo memory _stake = stakes[_userAddress][_stakeId];\\n        staked = _stake.staked;\\n        stakedAmount = _stake.stakedAmount;\\n        startTime = _stake.startTime;\\n        endTime = _stake.endTime;\\n        totalYield = _stake.totalYield;\\n        harvestedYield = _stake.harvestedYield;\\n        lastHarvestTime = _stake.lastHarvestTime;\\n        if (_now() > endTime) {\\n            harvestableYield = totalYield - harvestedYield;\\n        } else {\\n            harvestableYield = (totalYield * (_now() - lastHarvestTime)) / (endTime - startTime);\\n        }\\n    }\\n\\n    // Returns block.timestamp, overridable for test purposes.\\n    function _now() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x864a8714982ea46669b27e5531b10b85c760d3d7d78cecee210f952bfd1f7b59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200287238038062002872833981810160405281019062000037919062000327565b620000576200004b620001b660201b60201c565b620001be60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c190620003fa565b60405180910390fd5b6000821162000110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000107906200046c565b60405180910390fd5b6000811162000156576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014d90620004de565b60405180910390fd5b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260048190555081600681905550806005819055505050505062000500565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002b48262000287565b9050919050565b620002c681620002a7565b8114620002d257600080fd5b50565b600081519050620002e681620002bb565b92915050565b6000819050919050565b6200030181620002ec565b81146200030d57600080fd5b50565b6000815190506200032181620002f6565b92915050565b6000806000806080858703121562000344576200034362000282565b5b60006200035487828801620002d5565b9450506020620003678782880162000310565b93505060406200037a8782880162000310565b92505060606200038d8782880162000310565b91505092959194509250565b600082825260208201905092915050565b7f456d70747920746f6b656e206164647265737300000000000000000000000000600082015250565b6000620003e260138362000399565b9150620003ef82620003aa565b602082019050919050565b600060208201905081810360008301526200041581620003d3565b9050919050565b7f5a65726f207969656c6420726174650000000000000000000000000000000000600082015250565b600062000454600f8362000399565b915062000461826200041c565b602082019050919050565b60006020820190508181036000830152620004878162000445565b9050919050565b7f5a65726f206561726c7920556e7374616b652046656500000000000000000000600082015250565b6000620004c660168362000399565b9150620004d3826200048e565b602082019050919050565b60006020820190508181036000830152620004f981620004b7565b9050919050565b61236280620005106000396000f3fe608060405234801561001057600080fd5b50600436106101155760003560e01c8063909767d9116100a2578063cb913c8211610071578063cb913c821461028a578063cfd47663146102a8578063ddc63262146102df578063f2fde38b146102fb578063fc0c546a1461031757610115565b8063909767d914610216578063a694fc3a14610246578063be9a655514610262578063cb6290091461026c57610115565b80632e17de78116100e95780632e17de781461017e578063584b62a11461019a5780636999ac93146101d0578063715018a6146101ee5780638da5cb5b146101f857610115565b80622f95691461011a5780630711306d1461013857806307da68f514610156578063245acab214610160575b600080fd5b610122610335565b60405161012f91906116f2565b60405180910390f35b61014061033b565b60405161014d91906116f2565b60405180910390f35b61015e610341565b005b610168610428565b60405161017591906116f2565b60405180910390f35b6101986004803603810190610193919061173e565b61042e565b005b6101b460048036038101906101af91906117c9565b61088c565b6040516101c79796959493929190611824565b60405180910390f35b6101d86108f8565b6040516101e591906116f2565b60405180910390f35b6101f66108fe565b005b610200610986565b60405161020d91906118a2565b60405180910390f35b610230600480360381019061022b91906118bd565b6109af565b60405161023d91906116f2565b60405180910390f35b610260600480360381019061025b919061173e565b6109fb565b005b61026a610cc5565b005b610274610dae565b60405161028191906116f2565b60405180910390f35b610292610db4565b60405161029f91906118ea565b60405180910390f35b6102c260048036038101906102bd91906117c9565b610dc7565b6040516102d6989796959493929190611905565b60405180910390f35b6102f960048036038101906102f4919061173e565b610f30565b005b610315600480360381019061031091906118bd565b61116b565b005b61031f611263565b60405161032c91906119e2565b60405180910390f35b60075481565b60055481565b610349611289565b73ffffffffffffffffffffffffffffffffffffffff16610367610986565b73ffffffffffffffffffffffffffffffffffffffff16146103bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b490611a5a565b60405180910390fd5b600060149054906101000a900460ff1661040c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040390611ac6565b60405180910390fd5b60008060146101000a81548160ff021916908315150217905550565b60045481565b60008060008060008060006104433389610dc7565b975050965096509650965096509650600087610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90611b32565b60405180910390fd5b8461049d611291565b1115610588576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a815481106104f6576104f5611b52565b5b906000526020600020906007020160000160006101000a81548160ff0219169083151502179055508660035461052c9190611bb0565b600381905550600090506105833388600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112999092919063ffffffff16565b61082c565b600082846105969190611be4565b905080856105a49190611bb0565b6007546105b19190611bb0565b6007819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b8154811061060a57610609611b52565b5b906000526020600020906007020160000160006101000a81548160ff02191690831515021790555061063a611291565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b8154811061068b5761068a611b52565b5b90600052602060002090600702016003018190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b815481106106f2576106f1611b52565b5b906000526020600020906007020160040181905550876003546107159190611bb0565b6003819055506001915060006127106005548a6107329190611c3a565b61073c9190611cc3565b90506000818a61074c9190611bb0565b905061079b3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112999092919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b81526004016107f691906116f2565b600060405180830381600087803b15801561081057600080fd5b505af1158015610824573d6000803e3d6000fd5b505050505050505b883373ffffffffffffffffffffffffffffffffffffffff167fc27678b8d9d59c0688159890347f79df5b543dff3fcad311f8142181a3661c14898989866040516108799493929190611cf4565b60405180910390a3505050505050505050565b600260205281600052604060002081815481106108a857600080fd5b9060005260206000209060070201600091509150508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154905087565b60065481565b610906611289565b73ffffffffffffffffffffffffffffffffffffffff16610924610986565b73ffffffffffffffffffffffffffffffffffffffff161461097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190611a5a565b60405180910390fd5b610984600061131f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600060149054906101000a900460ff16610a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4190611d85565b60405180910390fd5b60008111610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490611df1565b60405180910390fd5b600061271060065483610aa09190611c3a565b610aaa9190611cc3565b90506000610ab6611291565b90506000610e10600454610aca9190611c3a565b610ad2611291565b610adc9190611be4565b9050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052806001151581526020018681526020018481526020018381526020018581526020016000815260200184815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505082600754610be99190611be4565b60078190555083600354610bfd9190611be4565b60038190555060006001610c10336109af565b610c1a9190611bb0565b9050803373ffffffffffffffffffffffffffffffffffffffff167f2720efa4b2dd4f3f8a347da3cbd290a522e9432da9072c5b8e6300496fdde282878686604051610c6793929190611e11565b60405180910390a3610cbe333087600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113e3909392919063ffffffff16565b5050505050565b610ccd611289565b73ffffffffffffffffffffffffffffffffffffffff16610ceb610986565b73ffffffffffffffffffffffffffffffffffffffff1614610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3890611a5a565b60405180910390fd5b600060149054906101000a900460ff1615610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8890611e94565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550565b60035481565b600060149054906101000a900460ff1681565b6000806000806000806000806000600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a81548110610e2657610e25611b52565b5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050905080600001519850806020015197508060400151965080606001519550806080015194508060a0015193508060c00151925085610ed2611291565b1115610eeb578385610ee49190611bb0565b9150610f22565b8686610ef79190611bb0565b83610f00611291565b610f0a9190611bb0565b86610f159190611c3a565b610f1f9190611cc3565b91505b509295985092959890939650565b600080610f3d3384610dc7565b975050965050505050506000811415610f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8290611f00565b60405180910390fd5b80600754610f999190611bb0565b6007819055508082610fab9190611be4565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110610ffc57610ffb611b52565b5b906000526020600020906007020160050181905550611019611291565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061106a57611069611b52565b5b906000526020600020906007020160060181905550823373ffffffffffffffffffffffffffffffffffffffff167f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe76836110c1611291565b6040516110cf929190611f20565b60405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401611134929190611f49565b600060405180830381600087803b15801561114e57600080fd5b505af1158015611162573d6000803e3d6000fd5b50505050505050565b611173611289565b73ffffffffffffffffffffffffffffffffffffffff16611191610986565b73ffffffffffffffffffffffffffffffffffffffff16146111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de90611a5a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124e90611fe4565b60405180910390fd5b6112608161131f565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600042905090565b61131a8363a9059cbb60e01b84846040516024016112b8929190611f49565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061146c565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611466846323b872dd60e01b85858560405160240161140493929190612004565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061146c565b50505050565b60006114ce826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115339092919063ffffffff16565b905060008151111561152e57808060200190518101906114ee9190612067565b61152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152490612106565b60405180910390fd5b5b505050565b6060611542848460008561154b565b90509392505050565b606082471015611590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158790612198565b60405180910390fd5b6115998561165f565b6115d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cf90612204565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611601919061229e565b60006040518083038185875af1925050503d806000811461163e576040519150601f19603f3d011682016040523d82523d6000602084013e611643565b606091505b5091509150611653828286611672565b92505050949350505050565b600080823b905060008111915050919050565b60608315611682578290506116d2565b6000835111156116955782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c9919061230a565b60405180910390fd5b9392505050565b6000819050919050565b6116ec816116d9565b82525050565b600060208201905061170760008301846116e3565b92915050565b600080fd5b61171b816116d9565b811461172657600080fd5b50565b60008135905061173881611712565b92915050565b6000602082840312156117545761175361170d565b5b600061176284828501611729565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117968261176b565b9050919050565b6117a68161178b565b81146117b157600080fd5b50565b6000813590506117c38161179d565b92915050565b600080604083850312156117e0576117df61170d565b5b60006117ee858286016117b4565b92505060206117ff85828601611729565b9150509250929050565b60008115159050919050565b61181e81611809565b82525050565b600060e082019050611839600083018a611815565b61184660208301896116e3565b61185360408301886116e3565b61186060608301876116e3565b61186d60808301866116e3565b61187a60a08301856116e3565b61188760c08301846116e3565b98975050505050505050565b61189c8161178b565b82525050565b60006020820190506118b76000830184611893565b92915050565b6000602082840312156118d3576118d261170d565b5b60006118e1848285016117b4565b91505092915050565b60006020820190506118ff6000830184611815565b92915050565b60006101008201905061191b600083018b611815565b611928602083018a6116e3565b61193560408301896116e3565b61194260608301886116e3565b61194f60808301876116e3565b61195c60a08301866116e3565b61196960c08301856116e3565b61197660e08301846116e3565b9998505050505050505050565b6000819050919050565b60006119a86119a361199e8461176b565b611983565b61176b565b9050919050565b60006119ba8261198d565b9050919050565b60006119cc826119af565b9050919050565b6119dc816119c1565b82525050565b60006020820190506119f760008301846119d3565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611a446020836119fd565b9150611a4f82611a0e565b602082019050919050565b60006020820190508181036000830152611a7381611a37565b9050919050565b7f5374616b6573206172652073746f7070656420616c7265616479000000000000600082015250565b6000611ab0601a836119fd565b9150611abb82611a7a565b602082019050919050565b60006020820190508181036000830152611adf81611aa3565b9050919050565b7f556e7374616b656420616c726561647900000000000000000000000000000000600082015250565b6000611b1c6010836119fd565b9150611b2782611ae6565b602082019050919050565b60006020820190508181036000830152611b4b81611b0f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bbb826116d9565b9150611bc6836116d9565b925082821015611bd957611bd8611b81565b5b828203905092915050565b6000611bef826116d9565b9150611bfa836116d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c2f57611c2e611b81565b5b828201905092915050565b6000611c45826116d9565b9150611c50836116d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c8957611c88611b81565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611cce826116d9565b9150611cd9836116d9565b925082611ce957611ce8611c94565b5b828204905092915050565b6000608082019050611d0960008301876116e3565b611d1660208301866116e3565b611d2360408301856116e3565b611d306060830184611815565b95945050505050565b7f7374616b653a206e6f74206f70656e0000000000000000000000000000000000600082015250565b6000611d6f600f836119fd565b9150611d7a82611d39565b602082019050919050565b60006020820190508181036000830152611d9e81611d62565b9050919050565b7f7374616b653a207a65726f20616d6f756e740000000000000000000000000000600082015250565b6000611ddb6012836119fd565b9150611de682611da5565b602082019050919050565b60006020820190508181036000830152611e0a81611dce565b9050919050565b6000606082019050611e2660008301866116e3565b611e3360208301856116e3565b611e4060408301846116e3565b949350505050565b7f5374616b657320617265206f70656e20616c7265616479000000000000000000600082015250565b6000611e7e6017836119fd565b9150611e8982611e48565b602082019050919050565b60006020820190508181036000830152611ead81611e71565b9050919050565b7f6861727665737461626c655969656c64206973207a65726f0000000000000000600082015250565b6000611eea6018836119fd565b9150611ef582611eb4565b602082019050919050565b60006020820190508181036000830152611f1981611edd565b9050919050565b6000604082019050611f3560008301856116e3565b611f4260208301846116e3565b9392505050565b6000604082019050611f5e6000830185611893565b611f6b60208301846116e3565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611fce6026836119fd565b9150611fd982611f72565b604082019050919050565b60006020820190508181036000830152611ffd81611fc1565b9050919050565b60006060820190506120196000830186611893565b6120266020830185611893565b61203360408301846116e3565b949350505050565b61204481611809565b811461204f57600080fd5b50565b6000815190506120618161203b565b92915050565b60006020828403121561207d5761207c61170d565b5b600061208b84828501612052565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006120f0602a836119fd565b91506120fb82612094565b604082019050919050565b6000602082019050818103600083015261211f816120e3565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006121826026836119fd565b915061218d82612126565b604082019050919050565b600060208201905081810360008301526121b181612175565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006121ee601d836119fd565b91506121f9826121b8565b602082019050919050565b6000602082019050818103600083015261221d816121e1565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561225857808201518184015260208101905061223d565b83811115612267576000848401525b50505050565b600061227882612224565b612282818561222f565b935061229281856020860161223a565b80840191505092915050565b60006122aa828461226d565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006122dc826122b5565b6122e681856119fd565b93506122f681856020860161223a565b6122ff816122c0565b840191505092915050565b6000602082019050818103600083015261232481846122d1565b90509291505056fea26469706673582212203c06a56756f0db00c1d03eb69ad5258c71f78871fde132cac6392a813d6c1e0964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101155760003560e01c8063909767d9116100a2578063cb913c8211610071578063cb913c821461028a578063cfd47663146102a8578063ddc63262146102df578063f2fde38b146102fb578063fc0c546a1461031757610115565b8063909767d914610216578063a694fc3a14610246578063be9a655514610262578063cb6290091461026c57610115565b80632e17de78116100e95780632e17de781461017e578063584b62a11461019a5780636999ac93146101d0578063715018a6146101ee5780638da5cb5b146101f857610115565b80622f95691461011a5780630711306d1461013857806307da68f514610156578063245acab214610160575b600080fd5b610122610335565b60405161012f91906116f2565b60405180910390f35b61014061033b565b60405161014d91906116f2565b60405180910390f35b61015e610341565b005b610168610428565b60405161017591906116f2565b60405180910390f35b6101986004803603810190610193919061173e565b61042e565b005b6101b460048036038101906101af91906117c9565b61088c565b6040516101c79796959493929190611824565b60405180910390f35b6101d86108f8565b6040516101e591906116f2565b60405180910390f35b6101f66108fe565b005b610200610986565b60405161020d91906118a2565b60405180910390f35b610230600480360381019061022b91906118bd565b6109af565b60405161023d91906116f2565b60405180910390f35b610260600480360381019061025b919061173e565b6109fb565b005b61026a610cc5565b005b610274610dae565b60405161028191906116f2565b60405180910390f35b610292610db4565b60405161029f91906118ea565b60405180910390f35b6102c260048036038101906102bd91906117c9565b610dc7565b6040516102d6989796959493929190611905565b60405180910390f35b6102f960048036038101906102f4919061173e565b610f30565b005b610315600480360381019061031091906118bd565b61116b565b005b61031f611263565b60405161032c91906119e2565b60405180910390f35b60075481565b60055481565b610349611289565b73ffffffffffffffffffffffffffffffffffffffff16610367610986565b73ffffffffffffffffffffffffffffffffffffffff16146103bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b490611a5a565b60405180910390fd5b600060149054906101000a900460ff1661040c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040390611ac6565b60405180910390fd5b60008060146101000a81548160ff021916908315150217905550565b60045481565b60008060008060008060006104433389610dc7565b975050965096509650965096509650600087610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90611b32565b60405180910390fd5b8461049d611291565b1115610588576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a815481106104f6576104f5611b52565b5b906000526020600020906007020160000160006101000a81548160ff0219169083151502179055508660035461052c9190611bb0565b600381905550600090506105833388600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112999092919063ffffffff16565b61082c565b600082846105969190611be4565b905080856105a49190611bb0565b6007546105b19190611bb0565b6007819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b8154811061060a57610609611b52565b5b906000526020600020906007020160000160006101000a81548160ff02191690831515021790555061063a611291565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b8154811061068b5761068a611b52565b5b90600052602060002090600702016003018190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b815481106106f2576106f1611b52565b5b906000526020600020906007020160040181905550876003546107159190611bb0565b6003819055506001915060006127106005548a6107329190611c3a565b61073c9190611cc3565b90506000818a61074c9190611bb0565b905061079b3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112999092919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b81526004016107f691906116f2565b600060405180830381600087803b15801561081057600080fd5b505af1158015610824573d6000803e3d6000fd5b505050505050505b883373ffffffffffffffffffffffffffffffffffffffff167fc27678b8d9d59c0688159890347f79df5b543dff3fcad311f8142181a3661c14898989866040516108799493929190611cf4565b60405180910390a3505050505050505050565b600260205281600052604060002081815481106108a857600080fd5b9060005260206000209060070201600091509150508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154905087565b60065481565b610906611289565b73ffffffffffffffffffffffffffffffffffffffff16610924610986565b73ffffffffffffffffffffffffffffffffffffffff161461097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190611a5a565b60405180910390fd5b610984600061131f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600060149054906101000a900460ff16610a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4190611d85565b60405180910390fd5b60008111610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490611df1565b60405180910390fd5b600061271060065483610aa09190611c3a565b610aaa9190611cc3565b90506000610ab6611291565b90506000610e10600454610aca9190611c3a565b610ad2611291565b610adc9190611be4565b9050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052806001151581526020018681526020018481526020018381526020018581526020016000815260200184815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505082600754610be99190611be4565b60078190555083600354610bfd9190611be4565b60038190555060006001610c10336109af565b610c1a9190611bb0565b9050803373ffffffffffffffffffffffffffffffffffffffff167f2720efa4b2dd4f3f8a347da3cbd290a522e9432da9072c5b8e6300496fdde282878686604051610c6793929190611e11565b60405180910390a3610cbe333087600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113e3909392919063ffffffff16565b5050505050565b610ccd611289565b73ffffffffffffffffffffffffffffffffffffffff16610ceb610986565b73ffffffffffffffffffffffffffffffffffffffff1614610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3890611a5a565b60405180910390fd5b600060149054906101000a900460ff1615610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8890611e94565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550565b60035481565b600060149054906101000a900460ff1681565b6000806000806000806000806000600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a81548110610e2657610e25611b52565b5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050905080600001519850806020015197508060400151965080606001519550806080015194508060a0015193508060c00151925085610ed2611291565b1115610eeb578385610ee49190611bb0565b9150610f22565b8686610ef79190611bb0565b83610f00611291565b610f0a9190611bb0565b86610f159190611c3a565b610f1f9190611cc3565b91505b509295985092959890939650565b600080610f3d3384610dc7565b975050965050505050506000811415610f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8290611f00565b60405180910390fd5b80600754610f999190611bb0565b6007819055508082610fab9190611be4565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110610ffc57610ffb611b52565b5b906000526020600020906007020160050181905550611019611291565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061106a57611069611b52565b5b906000526020600020906007020160060181905550823373ffffffffffffffffffffffffffffffffffffffff167f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe76836110c1611291565b6040516110cf929190611f20565b60405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401611134929190611f49565b600060405180830381600087803b15801561114e57600080fd5b505af1158015611162573d6000803e3d6000fd5b50505050505050565b611173611289565b73ffffffffffffffffffffffffffffffffffffffff16611191610986565b73ffffffffffffffffffffffffffffffffffffffff16146111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de90611a5a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124e90611fe4565b60405180910390fd5b6112608161131f565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600042905090565b61131a8363a9059cbb60e01b84846040516024016112b8929190611f49565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061146c565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611466846323b872dd60e01b85858560405160240161140493929190612004565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061146c565b50505050565b60006114ce826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115339092919063ffffffff16565b905060008151111561152e57808060200190518101906114ee9190612067565b61152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152490612106565b60405180910390fd5b5b505050565b6060611542848460008561154b565b90509392505050565b606082471015611590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158790612198565b60405180910390fd5b6115998561165f565b6115d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cf90612204565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611601919061229e565b60006040518083038185875af1925050503d806000811461163e576040519150601f19603f3d011682016040523d82523d6000602084013e611643565b606091505b5091509150611653828286611672565b92505050949350505050565b600080823b905060008111915050919050565b60608315611682578290506116d2565b6000835111156116955782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c9919061230a565b60405180910390fd5b9392505050565b6000819050919050565b6116ec816116d9565b82525050565b600060208201905061170760008301846116e3565b92915050565b600080fd5b61171b816116d9565b811461172657600080fd5b50565b60008135905061173881611712565b92915050565b6000602082840312156117545761175361170d565b5b600061176284828501611729565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117968261176b565b9050919050565b6117a68161178b565b81146117b157600080fd5b50565b6000813590506117c38161179d565b92915050565b600080604083850312156117e0576117df61170d565b5b60006117ee858286016117b4565b92505060206117ff85828601611729565b9150509250929050565b60008115159050919050565b61181e81611809565b82525050565b600060e082019050611839600083018a611815565b61184660208301896116e3565b61185360408301886116e3565b61186060608301876116e3565b61186d60808301866116e3565b61187a60a08301856116e3565b61188760c08301846116e3565b98975050505050505050565b61189c8161178b565b82525050565b60006020820190506118b76000830184611893565b92915050565b6000602082840312156118d3576118d261170d565b5b60006118e1848285016117b4565b91505092915050565b60006020820190506118ff6000830184611815565b92915050565b60006101008201905061191b600083018b611815565b611928602083018a6116e3565b61193560408301896116e3565b61194260608301886116e3565b61194f60808301876116e3565b61195c60a08301866116e3565b61196960c08301856116e3565b61197660e08301846116e3565b9998505050505050505050565b6000819050919050565b60006119a86119a361199e8461176b565b611983565b61176b565b9050919050565b60006119ba8261198d565b9050919050565b60006119cc826119af565b9050919050565b6119dc816119c1565b82525050565b60006020820190506119f760008301846119d3565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611a446020836119fd565b9150611a4f82611a0e565b602082019050919050565b60006020820190508181036000830152611a7381611a37565b9050919050565b7f5374616b6573206172652073746f7070656420616c7265616479000000000000600082015250565b6000611ab0601a836119fd565b9150611abb82611a7a565b602082019050919050565b60006020820190508181036000830152611adf81611aa3565b9050919050565b7f556e7374616b656420616c726561647900000000000000000000000000000000600082015250565b6000611b1c6010836119fd565b9150611b2782611ae6565b602082019050919050565b60006020820190508181036000830152611b4b81611b0f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bbb826116d9565b9150611bc6836116d9565b925082821015611bd957611bd8611b81565b5b828203905092915050565b6000611bef826116d9565b9150611bfa836116d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c2f57611c2e611b81565b5b828201905092915050565b6000611c45826116d9565b9150611c50836116d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c8957611c88611b81565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611cce826116d9565b9150611cd9836116d9565b925082611ce957611ce8611c94565b5b828204905092915050565b6000608082019050611d0960008301876116e3565b611d1660208301866116e3565b611d2360408301856116e3565b611d306060830184611815565b95945050505050565b7f7374616b653a206e6f74206f70656e0000000000000000000000000000000000600082015250565b6000611d6f600f836119fd565b9150611d7a82611d39565b602082019050919050565b60006020820190508181036000830152611d9e81611d62565b9050919050565b7f7374616b653a207a65726f20616d6f756e740000000000000000000000000000600082015250565b6000611ddb6012836119fd565b9150611de682611da5565b602082019050919050565b60006020820190508181036000830152611e0a81611dce565b9050919050565b6000606082019050611e2660008301866116e3565b611e3360208301856116e3565b611e4060408301846116e3565b949350505050565b7f5374616b657320617265206f70656e20616c7265616479000000000000000000600082015250565b6000611e7e6017836119fd565b9150611e8982611e48565b602082019050919050565b60006020820190508181036000830152611ead81611e71565b9050919050565b7f6861727665737461626c655969656c64206973207a65726f0000000000000000600082015250565b6000611eea6018836119fd565b9150611ef582611eb4565b602082019050919050565b60006020820190508181036000830152611f1981611edd565b9050919050565b6000604082019050611f3560008301856116e3565b611f4260208301846116e3565b9392505050565b6000604082019050611f5e6000830185611893565b611f6b60208301846116e3565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611fce6026836119fd565b9150611fd982611f72565b604082019050919050565b60006020820190508181036000830152611ffd81611fc1565b9050919050565b60006060820190506120196000830186611893565b6120266020830185611893565b61203360408301846116e3565b949350505050565b61204481611809565b811461204f57600080fd5b50565b6000815190506120618161203b565b92915050565b60006020828403121561207d5761207c61170d565b5b600061208b84828501612052565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006120f0602a836119fd565b91506120fb82612094565b604082019050919050565b6000602082019050818103600083015261211f816120e3565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006121826026836119fd565b915061218d82612126565b604082019050919050565b600060208201905081810360008301526121b181612175565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006121ee601d836119fd565b91506121f9826121b8565b602082019050919050565b6000602082019050818103600083015261221d816121e1565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561225857808201518184015260208101905061223d565b83811115612267576000848401525b50505050565b600061227882612224565b612282818561222f565b935061229281856020860161223a565b80840191505092915050565b60006122aa828461226d565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006122dc826122b5565b6122e681856119fd565b93506122f681856020860161223a565b6122ff816122c0565b840191505092915050565b6000602082019050818103600083015261232481846122d1565b90509291505056fea26469706673582212203c06a56756f0db00c1d03eb69ad5258c71f78871fde132cac6392a813d6c1e0964736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "the constructor arguments:",
        "params": {
          "_earlyUnstakeFee": "fee for unstaking before stake expiration",
          "_stakeDurationDays": "the stake duration in days",
          "_token": "address of token - the same accepted for staking and used to pay rewards",
          "_yieldRate": "reward rate in basis points (1/10000)"
        }
      },
      "getStake(address,uint256)": {
        "details": "get the individual stake parameters of the user",
        "params": {
          "_stakeId": "stake index",
          "_userAddress": "account of staker"
        },
        "returns": {
          "endTime": "the time when unstaking (w.o. penalties) becomes possible",
          "harvestableYield": "The unlocked part of yield available for harvesting",
          "harvestedYield": "The part of yield user harvested already",
          "lastHarvestTime": "The time of last harvest event",
          "staked": "the status of stake",
          "stakedAmount": "the number of deposited tokens",
          "startTime": "the moment of stake start",
          "totalYield": "entire yield for the stake (totally released on endTime)"
        }
      },
      "getStakesLength(address)": {
        "details": "get the count of user's stakes. Used on frontend to iterate and display individual stakes",
        "params": {
          "_userAddress": "account of staker"
        },
        "returns": {
          "_0": "stakes"
        }
      },
      "harvest(uint256)": {
        "details": "harvest accumulated rewards. Can be called many times.",
        "params": {
          "_stakeId": "Id of the stake"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256)": {
        "details": "submit the stake",
        "params": {
          "_amount": "amount of tokens to be transferred from user's account"
        }
      },
      "start()": {
        "details": "start accepting new stakes. Called only by the owner"
      },
      "stop()": {
        "details": "stop accepting new stakes. Called only by the owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256)": {
        "details": "withdraw the `body` of user's stake. Can be called only once",
        "params": {
          "_stakeId": "Id of the stake"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1080,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakesOpen",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1083,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20mintable)1057"
      },
      {
        "astId": 1089,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)1078_storage)dyn_storage)"
      },
      {
        "astId": 1091,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1093,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakeDurationDays",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1095,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "earlyUnstakeFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1097,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "yieldRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1099,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "allocatedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakeInfo)1078_storage)dyn_storage": {
        "base": "t_struct(StakeInfo)1078_storage",
        "encoding": "dynamic_array",
        "label": "struct FixedStaking.StakeInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20mintable)1057": {
        "encoding": "inplace",
        "label": "contract IERC20mintable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(StakeInfo)1078_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FixedStaking.StakeInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakeInfo)1078_storage)dyn_storage"
      },
      "t_struct(StakeInfo)1078_storage": {
        "encoding": "inplace",
        "label": "struct FixedStaking.StakeInfo",
        "members": [
          {
            "astId": 1065,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "staked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1067,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1069,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1071,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1073,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "totalYield",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1075,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "harvestedYield",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1077,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "lastHarvestTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}