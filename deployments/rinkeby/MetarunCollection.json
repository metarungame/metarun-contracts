{
  "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ABILITY_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ARTIFACT_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLISION_DAMAGE_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLISION_DAMAGE_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRAFTSMAN_CHARACTER_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FIGHTER_CHARACTER_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNGIBLE_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEALTH_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEALTH_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEVEL_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANA_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANA_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PET_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAFFLE_TICKET_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RUNS_COUNT_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SKIN_TOKEN_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPEED_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPEED_TOKEN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPRINTER_CHARACTER_KIND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WINS_COUNT_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "decreaseHealth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAbility",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCollisionDamage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getKind",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getMana",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRunCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getWinCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "increaseHealth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isArtifact",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isCharacter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isFungible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kind",
          "type": "uint256"
        }
      ],
      "name": "isKind",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isPet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isRaffleTicket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isSkin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ability",
          "type": "uint256"
        }
      ],
      "name": "setAbility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collisionDamage",
          "type": "uint256"
        }
      ],
      "name": "setCollisionDamage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "name": "setHealth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "setLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mana",
          "type": "uint256"
        }
      ],
      "name": "setMana",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "runsCount",
          "type": "uint256"
        }
      ],
      "name": "setRunCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        }
      ],
      "name": "setSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winsCount",
          "type": "uint256"
        }
      ],
      "name": "setWinCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
    "transactionIndex": 29,
    "gasUsed": "5603746",
    "logsBloom": "0x
    "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455",
    "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa3d72163ce6fc934df154b5f6bbfb1250cdd60b32d748787e476f06030524424",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfeffe962f1ba7ba637ffb49fbce1cf205617423e8835ba0974410df7d21a120d",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x746fc93084e2ac845d9130896cdc63bd9e75f2bbc1b0cea31872db37fde909aa",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x73da7fde363d3b0071fdb0c851239919ae58dbbcd1b3eff6bc36c82389e744d6",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb82eb398bb64dd7ceb76efcaf56fc84204afda77d1153a5f20a2187008847079",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x13e0d7467bbf260afa1121d76ed5f39bfeb9fb5c8b2fc11749f0111a002f09c4",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x887907f708c7c49027241c6f3748316e2ee182b27fdf61c30f29765977d32c52",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 10543409,
        "transactionHash": "0xd21fd892064d81fc4142397d7c314b6ff1c029aa49a664549308176d88e8a8ce",
        "address": "0x64E2b9580b2D6A4EbAdB0731eDB6354E9438BE35",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8f3129ea2f79bb22c81679d2301e3d5d2a4621835cb2fa1d7e2161def0a5c309",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0xb1b4771c28cae8830351ccf2cb976aea0f83a2e2910cb79d46e9f22246296455"
      }
    ],
    "blockNumber": 10543409,
    "cumulativeGasUsed": "8286042",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://app-staging.metarun.game/metadata/{id}.json"
  ],
  "numDeployments": 2,
  "solcInputHash": "572278f77f06c4adf5c3e102913b5c18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ABILITY_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARTIFACT_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLISION_DAMAGE_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLISION_DAMAGE_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRAFTSMAN_CHARACTER_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIGHTER_CHARACTER_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNGIBLE_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEALTH_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEALTH_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEVEL_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANA_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANA_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PET_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAFFLE_TICKET_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RUNS_COUNT_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SKIN_TOKEN_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPEED_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPEED_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPRINTER_CHARACTER_KIND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINS_COUNT_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"decreaseHealth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAbility\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCollisionDamage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getKind\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMana\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRunCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWinCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"increaseHealth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isArtifact\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isCharacter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kind\",\"type\":\"uint256\"}],\"name\":\"isKind\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isPet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isRaffleTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isSkin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ability\",\"type\":\"uint256\"}],\"name\":\"setAbility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collisionDamage\",\"type\":\"uint256\"}],\"name\":\"setCollisionDamage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"name\":\"setHealth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mana\",\"type\":\"uint256\"}],\"name\":\"setMana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runsCount\",\"type\":\"uint256\"}],\"name\":\"setRunCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"name\":\"setSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winsCount\",\"type\":\"uint256\"}],\"name\":\"setWinCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetarunCollection.sol\":\"MetarunCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetarunCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract MetarunCollection is ERC1155, AccessControl {\\n    uint256 internal constant KIND_MASK = 0xffff0000;\\n    uint256 internal constant ID_MASK = 0x0000ffff;\\n\\n    uint256 public constant CRAFTSMAN_CHARACTER_KIND = 0x0000;\\n    uint256 public constant FIGHTER_CHARACTER_KIND = 0x0001;\\n    uint256 public constant SPRINTER_CHARACTER_KIND = 0x0002;\\n\\n    uint256 public constant ARTIFACT_TOKEN_KIND = 0x0100;\\n    uint256 public constant PET_TOKEN_KIND = 0x0200;\\n    uint256 public constant SKIN_TOKEN_KIND = 0x0300;\\n    uint256 public constant RAFFLE_TICKET_TOKEN_KIND = 0x0400;\\n\\n    uint256 public constant FUNGIBLE_TOKEN_KIND = 0x0500;\\n    uint256 public constant HEALTH_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0000;\\n    uint256 public constant MANA_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0001;\\n    uint256 public constant SPEED_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0002;\\n    uint256 public constant COLLISION_DAMAGE_TOKEN_ID = (FUNGIBLE_TOKEN_KIND << 16) + 0x0003;\\n\\n    mapping(uint256 => uint256) tokenLevels;\\n\\n    mapping(uint256 => uint256) tokenRuns;\\n    mapping(uint256 => uint256) tokenWins;\\n\\n    mapping(uint256 => uint256) tokenAbilities;\\n\\n    mapping(uint256 => uint256) tokenHealthPoints;\\n    mapping(uint256 => uint256) tokenManaPoints;\\n    mapping(uint256 => uint256) tokenSpeedPoints;\\n    mapping(uint256 => uint256) tokenCollisionDamagePoints;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant LEVEL_SETTER_ROLE = keccak256(\\\"LEVEL_SETTER_ROLE\\\");\\n    bytes32 public constant RUNS_COUNT_SETTER_ROLE = keccak256(\\\"RUNS_COUNT_SETTER_ROLE\\\");\\n    bytes32 public constant WINS_COUNT_SETTER_ROLE = keccak256(\\\"WINS_COUNT_SETTER_ROLE\\\");\\n\\n    bytes32 public constant ABILITY_SETTER_ROLE = keccak256(\\\"ABILITY_SETTER_ROLE\\\");\\n\\n    bytes32 public constant HEALTH_SETTER_ROLE = keccak256(\\\"HEALTH_SETTER_ROLE\\\");\\n    bytes32 public constant MANA_SETTER_ROLE = keccak256(\\\"MANA_SETTER_ROLE\\\");\\n    bytes32 public constant SPEED_SETTER_ROLE = keccak256(\\\"SPEED_SETTER_ROLE\\\");\\n    bytes32 public constant COLLISION_DAMAGE_SETTER_ROLE = keccak256(\\\"COLLISION_DAMAGE_SETTER_ROLE\\\");\\n\\n    constructor(string memory uri) ERC1155(uri) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(LEVEL_SETTER_ROLE, _msgSender());\\n        _setupRole(RUNS_COUNT_SETTER_ROLE, _msgSender());\\n        _setupRole(WINS_COUNT_SETTER_ROLE, _msgSender());\\n\\n        _setupRole(ABILITY_SETTER_ROLE, _msgSender());\\n\\n        _setupRole(HEALTH_SETTER_ROLE, _msgSender());\\n        _setupRole(MANA_SETTER_ROLE, _msgSender());\\n        _setupRole(SPEED_SETTER_ROLE, _msgSender());\\n        _setupRole(COLLISION_DAMAGE_SETTER_ROLE, _msgSender());\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC1155, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) public {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need MINTER_ROLE\\\");\\n        if (!isFungible(id)) {\\n            require(amount == 1, \\\"Cannot mint more than one item\\\");\\n            require(balanceOf(to, id) == 0, \\\"Cannot mint more than one item\\\");\\n        }\\n        _mint(to, id, amount, \\\"\\\");\\n    }\\n\\n    function getKind(uint256 id) public pure returns (uint256) {\\n        return (KIND_MASK & id) >> 16;\\n    }\\n\\n    function isKind(uint256 id, uint256 kind) public pure returns (bool) {\\n        return getKind(id) == kind;\\n    }\\n\\n    function isFungible(uint256 id) public pure returns (bool) {\\n        return isKind(id, FUNGIBLE_TOKEN_KIND);\\n    }\\n\\n    function isCharacter(uint256 id) public pure returns (bool) {\\n        return isKind(id, CRAFTSMAN_CHARACTER_KIND) || isKind(id, FIGHTER_CHARACTER_KIND) || isKind(id, SPRINTER_CHARACTER_KIND);\\n    }\\n\\n    function isArtifact(uint256 id) public pure returns (bool) {\\n        return isKind(id, ARTIFACT_TOKEN_KIND);\\n    }\\n\\n    function isPet(uint256 id) public pure returns (bool) {\\n        return isKind(id, PET_TOKEN_KIND);\\n    }\\n\\n    function isSkin(uint256 id) public pure returns (bool) {\\n        return isKind(id, SKIN_TOKEN_KIND);\\n    }\\n\\n    function isRaffleTicket(uint256 id) public pure returns (bool) {\\n        return isKind(id, RAFFLE_TICKET_TOKEN_KIND);\\n    }\\n\\n    function setURI(string memory newUri) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need DEFAULT_ADMIN_ROLE\\\");\\n        _setURI(newUri);\\n    }\\n\\n    function getLevel(uint256 id) public view returns (uint256) {\\n        require(isCharacter(id) || isPet(id), \\\"Level is available only for pet or character\\\");\\n        return tokenLevels[id];\\n    }\\n\\n    function setLevel(uint256 id, uint256 level) public {\\n        require(isCharacter(id) || isPet(id), \\\"Level is available only for pet or character\\\");\\n        require(hasRole(LEVEL_SETTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need LEVEL_SETTER_ROLE\\\");\\n        tokenLevels[id] = level;\\n    }\\n\\n    function getRunCount(uint256 id) public view returns (uint256) {\\n        require(isCharacter(id), \\\"Runs count is available only for character\\\");\\n        return tokenRuns[id];\\n    }\\n\\n    function setRunCount(uint256 id, uint256 runsCount) public {\\n        require(isCharacter(id), \\\"Runs count is available only for character\\\");\\n        require(hasRole(RUNS_COUNT_SETTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need RUNS_COUNT_SETTER_ROLE\\\");\\n        tokenRuns[id] = runsCount;\\n    }\\n\\n    function getWinCount(uint256 id) public view returns (uint256) {\\n        require(isCharacter(id), \\\"Wins count is available only for character\\\");\\n        return tokenWins[id];\\n    }\\n\\n    function setWinCount(uint256 id, uint256 winsCount) public {\\n        require(isCharacter(id), \\\"Wins count is available only for character\\\");\\n        require(hasRole(WINS_COUNT_SETTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need WINS_COUNT_SETTER_ROLE\\\");\\n        tokenWins[id] = winsCount;\\n    }\\n\\n    function getAbility(uint256 id) public view returns (uint256) {\\n        require(isCharacter(id), \\\"Ability is available only for character\\\");\\n        return tokenAbilities[id];\\n    }\\n\\n    function setAbility(uint256 id, uint256 ability) public {\\n        require(isCharacter(id), \\\"Ability is available only for character\\\");\\n        require(hasRole(ABILITY_SETTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need ABILITY_SETTER_ROLE\\\");\\n        tokenAbilities[id] = ability;\\n    }\\n\\n    function getHealth(uint256 id) public view returns (uint256) {\\n        require(isCharacter(id), \\\"Health is available only for character\\\");\\n        return tokenHealthPoints[id];\\n    }\\n\\n    function setHealth(uint256 id, uint256 health) public {\\n        require(isCharacter(id), \\\"Health is available only for character\\\");\\n        require(hasRole(HEALTH_SETTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need HEALTH_SETTER_ROLE\\\");\\n        tokenHealthPoints[id] = health;\\n    }\\n\\n    function getMana(uint256 id) public view returns (uint256) {\\n        require(isCharacter(id), \\\"Mana is available only for character\\\");\\n        return tokenManaPoints[id];\\n    }\\n\\n    function setMana(uint256 id, uint256 mana) public {\\n        require(isCharacter(id), \\\"Mana is available only for character\\\");\\n        require(hasRole(MANA_SETTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need MANA_SETTER_ROLE\\\");\\n        tokenManaPoints[id] = mana;\\n    }\\n\\n    function getSpeed(uint256 id) public view returns (uint256) {\\n        require(isCharacter(id), \\\"Speed is available only for character\\\");\\n        return tokenSpeedPoints[id];\\n    }\\n\\n    function setSpeed(uint256 id, uint256 speed) public {\\n        require(isCharacter(id), \\\"Speed is available only for character\\\");\\n        require(hasRole(SPEED_SETTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need SPEED_SETTER_ROLE\\\");\\n        tokenSpeedPoints[id] = speed;\\n    }\\n\\n    function getCollisionDamage(uint256 id) public view returns (uint256) {\\n        require(isCharacter(id), \\\"Collision Damage is available only for character\\\");\\n        return tokenCollisionDamagePoints[id];\\n    }\\n\\n    function setCollisionDamage(uint256 id, uint256 collisionDamage) public {\\n        require(isCharacter(id), \\\"Collision Damage is available only for character\\\");\\n        require(hasRole(COLLISION_DAMAGE_SETTER_ROLE, _msgSender()), \\\"METARUNCOLLECTION: need COLLISION_DAMAGE_SETTER_ROLE\\\");\\n        tokenCollisionDamagePoints[id] = collisionDamage;\\n    }\\n    \\n    function increaseHealth(uint256 amount, uint256 characterId) external {\\n        require(balanceOf(msg.sender, HEALTH_TOKEN_ID) >= amount, \\\"Not enough balance\\\");\\n        require(isCharacter(characterId), \\\"Does not match token character kind\\\");\\n        require(balanceOf(msg.sender, characterId) == 1, \\\"Not enough balance\\\");\\n        _burn(msg.sender, HEALTH_TOKEN_ID, amount);\\n        tokenHealthPoints[characterId] += amount; \\n    }\\n\\n    function decreaseHealth(uint256 amount, uint256 characterId) external {\\n        require(isCharacter(characterId), \\\"Does not match token character kind\\\");\\n        require(balanceOf(msg.sender, characterId) == 1, \\\"Not enough balance\\\");\\n        require(tokenHealthPoints[characterId] >= amount, \\\"Not enough points\\\");\\n        tokenHealthPoints[characterId] -= amount;\\n        _mint(msg.sender, HEALTH_TOKEN_ID, amount, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd3f18fc0e806629b7b7ec1ab140139b065508e47a498822fcee44d95350dd216\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103c45760003560e01c8063616f0510116101ff578063adebf6f21161011a578063d5523f77116100ad578063e985e9c51161007c578063e985e9c514610c1f578063f242432a14610c4f578063fabbd1cf14610c6b578063fe4ba8c114610c87576103c4565b8063d5523f7714610b85578063da6cefd114610bb5578063df4b5aeb14610bd1578063e7800e0c14610bef576103c4565b8063cc3fc936116100e9578063cc3fc93614610afd578063cc6e155714610b2d578063d539139314610b4b578063d547741f14610b69576103c4565b8063adebf6f214610a63578063b73eeaf614610a93578063b7569fd514610ab1578063c5b5f33814610ae1576103c4565b80638eae974111610192578063a217fddf11610161578063a217fddf146109dd578063a22cb465146109fb578063a32b804714610a17578063a7518eb114610a47576103c4565b80638eae97411461094157806390f3e5a71461095f57806391d148541461098f578063982ee258146109bf576103c4565b8063744e94aa116101ce578063744e94aa146108a7578063792f96cf146108d7578063846018c3146108f557806386481d4014610911576103c4565b8063616f0510146108215780636268492f1461083d5780636ca8fede1461085b57806370a93b361461088b576103c4565b80632b2a43c0116102ef5780633fc70f2c116102825780634bdf6e8d116102515780634bdf6e8d146107855780634e1273f4146107a3578063565554ff146107d35780635c6d11bc146107f1576103c4565b80633fc70f2c146106c557806341950913146106f5578063492e17fe146107255780634b93f75314610755576103c4565b80632f2ff15d116102be5780632f2ff15d14610653578063320f7f251461066f57806336568abe1461068b5780633dcbb014146106a7576103c4565b80632b2a43c0146105df5780632b76bac4146105fd5780632d1e97f8146106195780632eb2c2d614610637576103c4565b8063101bd714116103675780632456787c116103365780632456787c14610557578063248a9ca314610575578063265da6d7146105a557806327efa6ea146105c1576103c4565b8063101bd714146104cf578063156e29f6146104ff57806318d7eedb1461051b5780632147e11114610539576103c4565b806306681970116103a357806306681970146104455780630e5bda98146104635780630e89341c146104815780630ec6a093146104b1576103c4565b8062fdd58e146103c957806301ffc9a7146103f957806302fe530514610429575b600080fd5b6103e360048036038101906103de91906139d3565b610ca5565b6040516103f09190613a22565b60405180910390f35b610413600480360381019061040e9190613a95565b610d6e565b6040516104209190613add565b60405180910390f35b610443600480360381019061043e9190613c3e565b610d80565b005b61044d610ddf565b60405161045a9190613a22565b60405180910390f35b61046b610de5565b6040516104789190613a22565b60405180910390f35b61049b60048036038101906104969190613c87565b610dfb565b6040516104a89190613d3c565b60405180910390f35b6104b9610e8f565b6040516104c69190613a22565b60405180910390f35b6104e960048036038101906104e49190613c87565b610e95565b6040516104f69190613a22565b60405180910390f35b61051960048036038101906105149190613d5e565b610efa565b005b610523611027565b6040516105309190613dca565b60405180910390f35b61054161104b565b60405161054e9190613a22565b60405180910390f35b61055f611050565b60405161056c9190613dca565b60405180910390f35b61058f600480360381019061058a9190613e11565b611074565b60405161059c9190613dca565b60405180910390f35b6105bf60048036038101906105ba9190613e3e565b611094565b005b6105c9611168565b6040516105d69190613a22565b60405180910390f35b6105e761116d565b6040516105f49190613a22565b60405180910390f35b61061760048036038101906106129190613e3e565b611173565b005b610621611247565b60405161062e9190613a22565b60405180910390f35b610651600480360381019061064c9190613fe7565b61124d565b005b61066d600480360381019061066891906140b6565b6112ee565b005b61068960048036038101906106849190613e3e565b611317565b005b6106a560048036038101906106a091906140b6565b6113eb565b005b6106af61146e565b6040516106bc9190613dca565b60405180910390f35b6106df60048036038101906106da9190613c87565b611492565b6040516106ec9190613a22565b60405180910390f35b61070f600480360381019061070a9190613c87565b6114f7565b60405161071c9190613add565b60405180910390f35b61073f600480360381019061073a9190613e3e565b61150c565b60405161074c9190613add565b60405180910390f35b61076f600480360381019061076a9190613c87565b611521565b60405161077c9190613a22565b60405180910390f35b61078d611586565b60405161079a9190613dca565b60405180910390f35b6107bd60048036038101906107b891906141b9565b6115aa565b6040516107ca91906142ef565b60405180910390f35b6107db6116c3565b6040516107e89190613a22565b60405180910390f35b61080b60048036038101906108069190613c87565b6116c9565b6040516108189190613add565b60405180910390f35b61083b60048036038101906108369190613e3e565b6116de565b005b6108456117b2565b6040516108529190613dca565b60405180910390f35b61087560048036038101906108709190613c87565b6117d6565b6040516108829190613a22565b60405180910390f35b6108a560048036038101906108a09190613e3e565b6117ea565b005b6108c160048036038101906108bc9190613c87565b6118ce565b6040516108ce9190613a22565b60405180910390f35b6108df611933565b6040516108ec9190613a22565b60405180910390f35b61090f600480360381019061090a9190613e3e565b611949565b005b61092b60048036038101906109269190613c87565b611a86565b6040516109389190613a22565b60405180910390f35b610949611afb565b6040516109569190613dca565b60405180910390f35b61097960048036038101906109749190613c87565b611b1f565b6040516109869190613a22565b60405180910390f35b6109a960048036038101906109a491906140b6565b611b84565b6040516109b69190613add565b60405180910390f35b6109c7611bef565b6040516109d49190613dca565b60405180910390f35b6109e5611c13565b6040516109f29190613dca565b60405180910390f35b610a156004803603810190610a10919061433d565b611c1a565b005b610a316004803603810190610a2c9190613c87565b611c30565b604051610a3e9190613add565b60405180910390f35b610a616004803603810190610a5c9190613e3e565b611c45565b005b610a7d6004803603810190610a789190613c87565b611d8a565b604051610a8a9190613add565b60405180910390f35b610a9b611d9f565b604051610aa89190613a22565b60405180910390f35b610acb6004803603810190610ac69190613c87565b611da4565b604051610ad89190613add565b60405180910390f35b610afb6004803603810190610af69190613e3e565b611ddc565b005b610b176004803603810190610b129190613c87565b611eb0565b604051610b249190613add565b60405180910390f35b610b35611ec5565b604051610b429190613dca565b60405180910390f35b610b53611ee9565b604051610b609190613dca565b60405180910390f35b610b836004803603810190610b7e91906140b6565b611f0d565b005b610b9f6004803603810190610b9a9190613c87565b611f36565b604051610bac9190613a22565b60405180910390f35b610bcf6004803603810190610bca9190613e3e565b611f9b565b005b610bd961206f565b604051610be69190613a22565b60405180910390f35b610c096004803603810190610c049190613c87565b612085565b604051610c169190613a22565b60405180910390f35b610c396004803603810190610c34919061437d565b6120ea565b604051610c469190613add565b60405180910390f35b610c696004803603810190610c6491906143bd565b61217e565b005b610c856004803603810190610c809190613e3e565b61221f565b005b610c8f6122f3565b604051610c9c9190613a22565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d906144c6565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610d7982612309565b9050919050565b610d946000801b610d8f612383565b611b84565b610dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dca90614558565b60405180910390fd5b610ddc8161238b565b50565b61040081565b60036010610500901b610df891906145a7565b81565b606060028054610e0a9061462c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e369061462c565b8015610e835780601f10610e5857610100808354040283529160200191610e83565b820191906000526020600020905b815481529060010190602001808311610e6657829003601f168201915b50505050509050919050565b61030081565b6000610ea082611da4565b610edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed6906146d0565b60405180910390fd5b60056000838152602001908152602001600020549050919050565b610f2b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610f26612383565b611b84565b610f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6190614762565b60405180910390fd5b610f7382611d8a565b6110075760018114610fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb1906147ce565b60405180910390fd5b6000610fc68484610ca5565b14611006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffd906147ce565b60405180910390fd5b5b611022838383604051806020016040528060008152506123a5565b505050565b7f73da7fde363d3b0071fdb0c851239919ae58dbbcd1b3eff6bc36c82389e744d681565b600081565b7ffeffe962f1ba7ba637ffb49fbce1cf205617423e8835ba0974410df7d21a120d81565b600060036000838152602001908152602001600020600101549050919050565b61109d82611da4565b6110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390614860565b60405180910390fd5b61110d7fb82eb398bb64dd7ceb76efcaf56fc84204afda77d1153a5f20a2187008847079611108612383565b611b84565b61114c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611143906148f2565b60405180910390fd5b8060086000848152602001908152602001600020819055505050565b600181565b61020081565b61117c82611da4565b6111bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b290614984565b60405180910390fd5b6111ec7f73da7fde363d3b0071fdb0c851239919ae58dbbcd1b3eff6bc36c82389e744d66111e7612383565b611b84565b61122b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122290614a16565b60405180910390fd5b8060076000848152602001908152602001600020819055505050565b61010081565b611255612383565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061129b575061129a85611295612383565b6120ea565b5b6112da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d190614aa8565b60405180910390fd5b6112e7858585858561253b565b5050505050565b6112f782611074565b61130881611303612383565b61284f565b61131283836128ec565b505050565b61132082611da4565b61135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135690614b3a565b60405180910390fd5b6113907f887907f708c7c49027241c6f3748316e2ee182b27fdf61c30f29765977d32c5261138b612383565b611b84565b6113cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c690614bcc565b60405180910390fd5b80600a6000848152602001908152602001600020819055505050565b6113f3612383565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611460576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145790614c5e565b60405180910390fd5b61146a82826129cd565b5050565b7f746fc93084e2ac845d9130896cdc63bd9e75f2bbc1b0cea31872db37fde909aa81565b600061149d82611da4565b6114dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d390614860565b60405180910390fd5b60086000838152602001908152602001600020549050919050565b60006115058261020061150c565b9050919050565b600081611518846117d6565b14905092915050565b600061152c82611da4565b61156b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156290614b3a565b60405180910390fd5b600a6000838152602001908152602001600020549050919050565b7f8f3129ea2f79bb22c81679d2301e3d5d2a4621835cb2fa1d7e2161def0a5c30981565b606081518351146115f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e790614cf0565b60405180910390fd5b6000835167ffffffffffffffff81111561160d5761160c613b13565b5b60405190808252806020026020018201604052801561163b5781602001602082028036833780820191505090505b50905060005b84518110156116b8576116888582815181106116605761165f614d10565b5b602002602001015185838151811061167b5761167a614d10565b5b6020026020010151610ca5565b82828151811061169b5761169a614d10565b5b602002602001018181525050806116b190614d3f565b9050611641565b508091505092915050565b61050081565b60006116d78261010061150c565b9050919050565b6116e782611da4565b611726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171d90614dfa565b60405180910390fd5b6117577f13e0d7467bbf260afa1121d76ed5f39bfeb9fb5c8b2fc11749f0111a002f09c4611752612383565b611b84565b611796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178d90614e8c565b60405180910390fd5b8060096000848152602001908152602001600020819055505050565b7fa3d72163ce6fc934df154b5f6bbfb1250cdd60b32d748787e476f0603052442481565b600060108263ffff000016901c9050919050565b6117f382611da4565b806118035750611802826114f7565b5b611842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183990614f1e565b60405180910390fd5b6118737fa3d72163ce6fc934df154b5f6bbfb1250cdd60b32d748787e476f0603052442461186e612383565b611b84565b6118b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a990614fb0565b60405180910390fd5b8060046000848152602001908152602001600020819055505050565b60006118d982611da4565b611918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190f90614dfa565b60405180910390fd5b60096000838152602001908152602001600020549050919050565b60006010610500901b61194691906145a7565b81565b816119663360006010610500901b61196191906145a7565b610ca5565b10156119a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199e9061501c565b60405180910390fd5b6119b081611da4565b6119ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e6906150ae565b60405180910390fd5b60016119fb3383610ca5565b14611a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a329061501c565b60405180910390fd5b611a583360006010610500901b611a5291906145a7565b84612aaf565b81600860008381526020019081526020016000206000828254611a7b91906145a7565b925050819055505050565b6000611a9182611da4565b80611aa15750611aa0826114f7565b5b611ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad790614f1e565b60405180910390fd5b60046000838152602001908152602001600020549050919050565b7f887907f708c7c49027241c6f3748316e2ee182b27fdf61c30f29765977d32c5281565b6000611b2a82611da4565b611b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6090615140565b60405180910390fd5b600b6000838152602001908152602001600020549050919050565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f13e0d7467bbf260afa1121d76ed5f39bfeb9fb5c8b2fc11749f0111a002f09c481565b6000801b81565b611c2c611c25612383565b8383612ccc565b5050565b6000611c3e8261040061150c565b9050919050565b611c4e81611da4565b611c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c84906150ae565b60405180910390fd5b6001611c993383610ca5565b14611cd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd09061501c565b60405180910390fd5b8160086000838152602001908152602001600020541015611d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d26906151ac565b60405180910390fd5b81600860008381526020019081526020016000206000828254611d5291906151cc565b92505081905550611d863360006010610500901b611d7091906145a7565b84604051806020016040528060008152506123a5565b5050565b6000611d988261050061150c565b9050919050565b600281565b6000611db182600061150c565b80611dc35750611dc282600161150c565b5b80611dd55750611dd482600261150c565b5b9050919050565b611de582611da4565b611e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1b90615140565b60405180910390fd5b611e557f8f3129ea2f79bb22c81679d2301e3d5d2a4621835cb2fa1d7e2161def0a5c309611e50612383565b611b84565b611e94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8b90615272565b60405180910390fd5b80600b6000848152602001908152602001600020819055505050565b6000611ebe8261030061150c565b9050919050565b7fb82eb398bb64dd7ceb76efcaf56fc84204afda77d1153a5f20a218700884707981565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611f1682611074565b611f2781611f22612383565b61284f565b611f3183836129cd565b505050565b6000611f4182611da4565b611f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7790614984565b60405180910390fd5b60076000838152602001908152602001600020549050919050565b611fa482611da4565b611fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fda906146d0565b60405180910390fd5b6120147ffeffe962f1ba7ba637ffb49fbce1cf205617423e8835ba0974410df7d21a120d61200f612383565b611b84565b612053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204a90615304565b60405180910390fd5b8060056000848152602001908152602001600020819055505050565b60026010610500901b61208291906145a7565b81565b600061209082611da4565b6120cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c690615396565b60405180910390fd5b60066000838152602001908152602001600020549050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612186612383565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806121cc57506121cb856121c6612383565b6120ea565b5b61220b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220290615428565b60405180910390fd5b6122188585858585612e39565b5050505050565b61222882611da4565b612267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225e90615396565b60405180910390fd5b6122987f746fc93084e2ac845d9130896cdc63bd9e75f2bbc1b0cea31872db37fde909aa612293612383565b611b84565b6122d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ce906154ba565b60405180910390fd5b8060066000848152602001908152602001600020819055505050565b60016010610500901b61230691906145a7565b81565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061237c575061237b826130bb565b5b9050919050565b600033905090565b80600290805190602001906123a1929190613888565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240c9061554c565b60405180910390fd5b600061241f612383565b9050612440816000876124318861319d565b61243a8861319d565b87613217565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461249f91906145a7565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161251d92919061556c565b60405180910390a46125348160008787878761321f565b5050505050565b815183511461257f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257690615607565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156125ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e690615699565b60405180910390fd5b60006125f9612383565b9050612609818787878787613217565b60005b84518110156127ba57600085828151811061262a57612629614d10565b5b60200260200101519050600085838151811061264957612648614d10565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156126ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e19061572b565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461279f91906145a7565b92505081905550505050806127b390614d3f565b905061260c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161283192919061574b565b60405180910390a46128478187878787876133f7565b505050505050565b6128598282611b84565b6128e85761287e8173ffffffffffffffffffffffffffffffffffffffff1660146135cf565b61288c8360001c60206135cf565b60405160200161289d929190615856565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128df9190613d3c565b60405180910390fd5b5050565b6128f68282611b84565b6129c95760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061296e612383565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6129d78282611b84565b15612aab5760006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612a50612383565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1690615902565b60405180910390fd5b6000612b29612383565b9050612b5981856000612b3b8761319d565b612b448761319d565b60405180602001604052806000815250613217565b600080600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015612bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be790615994565b60405180910390fd5b82810360008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612cbd92919061556c565b60405180910390a45050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3290615a26565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612e2c9190613add565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea090615699565b60405180910390fd5b6000612eb3612383565b9050612ed3818787612ec48861319d565b612ecd8861319d565b87613217565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f619061572b565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461301f91906145a7565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161309c92919061556c565b60405180910390a46130b282888888888861321f565b50505050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061318657507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061319657506131958261380b565b5b9050919050565b60606000600167ffffffffffffffff8111156131bc576131bb613b13565b5b6040519080825280602002602001820160405280156131ea5781602001602082028036833780820191505090505b509050828160008151811061320257613201614d10565b5b60200260200101818152505080915050919050565b505050505050565b61323e8473ffffffffffffffffffffffffffffffffffffffff16613875565b156133ef578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613284959493929190615aaa565b6020604051808303816000875af19250505080156132c057506040513d601f19601f820116820180604052508101906132bd9190615b19565b60015b613366576132cc615b53565b806308c379a0141561332957506132e1615b75565b806132ec575061332b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133209190613d3c565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335d90615c7d565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146133ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e490615d0f565b60405180910390fd5b505b505050505050565b6134168473ffffffffffffffffffffffffffffffffffffffff16613875565b156135c7578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161345c959493929190615d2f565b6020604051808303816000875af192505050801561349857506040513d601f19601f820116820180604052508101906134959190615b19565b60015b61353e576134a4615b53565b806308c379a0141561350157506134b9615b75565b806134c45750613503565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134f89190613d3c565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161353590615c7d565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146135c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135bc90615d0f565b60405180910390fd5b505b505050505050565b6060600060028360026135e29190615d97565b6135ec91906145a7565b67ffffffffffffffff81111561360557613604613b13565b5b6040519080825280601f01601f1916602001820160405280156136375781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061366f5761366e614d10565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106136d3576136d2614d10565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026137139190615d97565b61371d91906145a7565b90505b60018111156137bd577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061375f5761375e614d10565b5b1a60f81b82828151811061377657613775614d10565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806137b690615df1565b9050613720565b5060008414613801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137f890615e67565b60405180910390fd5b8091505092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080823b905060008111915050919050565b8280546138949061462c565b90600052602060002090601f0160209004810192826138b657600085556138fd565b82601f106138cf57805160ff19168380011785556138fd565b828001600101855582156138fd579182015b828111156138fc5782518255916020019190600101906138e1565b5b50905061390a919061390e565b5090565b5b8082111561392757600081600090555060010161390f565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061396a8261393f565b9050919050565b61397a8161395f565b811461398557600080fd5b50565b60008135905061399781613971565b92915050565b6000819050919050565b6139b08161399d565b81146139bb57600080fd5b50565b6000813590506139cd816139a7565b92915050565b600080604083850312156139ea576139e9613935565b5b60006139f885828601613988565b9250506020613a09858286016139be565b9150509250929050565b613a1c8161399d565b82525050565b6000602082019050613a376000830184613a13565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613a7281613a3d565b8114613a7d57600080fd5b50565b600081359050613a8f81613a69565b92915050565b600060208284031215613aab57613aaa613935565b5b6000613ab984828501613a80565b91505092915050565b60008115159050919050565b613ad781613ac2565b82525050565b6000602082019050613af26000830184613ace565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613b4b82613b02565b810181811067ffffffffffffffff82111715613b6a57613b69613b13565b5b80604052505050565b6000613b7d61392b565b9050613b898282613b42565b919050565b600067ffffffffffffffff821115613ba957613ba8613b13565b5b613bb282613b02565b9050602081019050919050565b82818337600083830152505050565b6000613be1613bdc84613b8e565b613b73565b905082815260208101848484011115613bfd57613bfc613afd565b5b613c08848285613bbf565b509392505050565b600082601f830112613c2557613c24613af8565b5b8135613c35848260208601613bce565b91505092915050565b600060208284031215613c5457613c53613935565b5b600082013567ffffffffffffffff811115613c7257613c7161393a565b5b613c7e84828501613c10565b91505092915050565b600060208284031215613c9d57613c9c613935565b5b6000613cab848285016139be565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613cee578082015181840152602081019050613cd3565b83811115613cfd576000848401525b50505050565b6000613d0e82613cb4565b613d188185613cbf565b9350613d28818560208601613cd0565b613d3181613b02565b840191505092915050565b60006020820190508181036000830152613d568184613d03565b905092915050565b600080600060608486031215613d7757613d76613935565b5b6000613d8586828701613988565b9350506020613d96868287016139be565b9250506040613da7868287016139be565b9150509250925092565b6000819050919050565b613dc481613db1565b82525050565b6000602082019050613ddf6000830184613dbb565b92915050565b613dee81613db1565b8114613df957600080fd5b50565b600081359050613e0b81613de5565b92915050565b600060208284031215613e2757613e26613935565b5b6000613e3584828501613dfc565b91505092915050565b60008060408385031215613e5557613e54613935565b5b6000613e63858286016139be565b9250506020613e74858286016139be565b9150509250929050565b600067ffffffffffffffff821115613e9957613e98613b13565b5b602082029050602081019050919050565b600080fd5b6000613ec2613ebd84613e7e565b613b73565b90508083825260208201905060208402830185811115613ee557613ee4613eaa565b5b835b81811015613f0e5780613efa88826139be565b845260208401935050602081019050613ee7565b5050509392505050565b600082601f830112613f2d57613f2c613af8565b5b8135613f3d848260208601613eaf565b91505092915050565b600067ffffffffffffffff821115613f6157613f60613b13565b5b613f6a82613b02565b9050602081019050919050565b6000613f8a613f8584613f46565b613b73565b905082815260208101848484011115613fa657613fa5613afd565b5b613fb1848285613bbf565b509392505050565b600082601f830112613fce57613fcd613af8565b5b8135613fde848260208601613f77565b91505092915050565b600080600080600060a0868803121561400357614002613935565b5b600061401188828901613988565b955050602061402288828901613988565b945050604086013567ffffffffffffffff8111156140435761404261393a565b5b61404f88828901613f18565b935050606086013567ffffffffffffffff8111156140705761406f61393a565b5b61407c88828901613f18565b925050608086013567ffffffffffffffff81111561409d5761409c61393a565b5b6140a988828901613fb9565b9150509295509295909350565b600080604083850312156140cd576140cc613935565b5b60006140db85828601613dfc565b92505060206140ec85828601613988565b9150509250929050565b600067ffffffffffffffff82111561411157614110613b13565b5b602082029050602081019050919050565b6000614135614130846140f6565b613b73565b9050808382526020820190506020840283018581111561415857614157613eaa565b5b835b81811015614181578061416d8882613988565b84526020840193505060208101905061415a565b5050509392505050565b600082601f8301126141a05761419f613af8565b5b81356141b0848260208601614122565b91505092915050565b600080604083850312156141d0576141cf613935565b5b600083013567ffffffffffffffff8111156141ee576141ed61393a565b5b6141fa8582860161418b565b925050602083013567ffffffffffffffff81111561421b5761421a61393a565b5b61422785828601613f18565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6142668161399d565b82525050565b6000614278838361425d565b60208301905092915050565b6000602082019050919050565b600061429c82614231565b6142a6818561423c565b93506142b18361424d565b8060005b838110156142e25781516142c9888261426c565b97506142d483614284565b9250506001810190506142b5565b5085935050505092915050565b600060208201905081810360008301526143098184614291565b905092915050565b61431a81613ac2565b811461432557600080fd5b50565b60008135905061433781614311565b92915050565b6000806040838503121561435457614353613935565b5b600061436285828601613988565b925050602061437385828601614328565b9150509250929050565b6000806040838503121561439457614393613935565b5b60006143a285828601613988565b92505060206143b385828601613988565b9150509250929050565b600080600080600060a086880312156143d9576143d8613935565b5b60006143e788828901613988565b95505060206143f888828901613988565b9450506040614409888289016139be565b935050606061441a888289016139be565b925050608086013567ffffffffffffffff81111561443b5761443a61393a565b5b61444788828901613fb9565b9150509295509295909350565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b60006144b0602b83613cbf565b91506144bb82614454565b604082019050919050565b600060208201905081810360008301526144df816144a3565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e6565642044454641554c545f60008201527f41444d494e5f524f4c4500000000000000000000000000000000000000000000602082015250565b6000614542602a83613cbf565b915061454d826144e6565b604082019050919050565b6000602082019050818103600083015261457181614535565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006145b28261399d565b91506145bd8361399d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145f2576145f1614578565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061464457607f821691505b60208210811415614658576146576145fd565b5b50919050565b7f52756e7320636f756e7420697320617661696c61626c65206f6e6c7920666f7260008201527f2063686172616374657200000000000000000000000000000000000000000000602082015250565b60006146ba602a83613cbf565b91506146c58261465e565b604082019050919050565b600060208201905081810360008301526146e9816146ad565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e656564204d494e5445525f5260008201527f4f4c450000000000000000000000000000000000000000000000000000000000602082015250565b600061474c602383613cbf565b9150614757826146f0565b604082019050919050565b6000602082019050818103600083015261477b8161473f565b9050919050565b7f43616e6e6f74206d696e74206d6f7265207468616e206f6e65206974656d0000600082015250565b60006147b8601e83613cbf565b91506147c382614782565b602082019050919050565b600060208201905081810360008301526147e7816147ab565b9050919050565b7f4865616c746820697320617661696c61626c65206f6e6c7920666f722063686160008201527f7261637465720000000000000000000000000000000000000000000000000000602082015250565b600061484a602683613cbf565b9150614855826147ee565b604082019050919050565b600060208201905081810360008301526148798161483d565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e656564204845414c54485f5360008201527f45545445525f524f4c4500000000000000000000000000000000000000000000602082015250565b60006148dc602a83613cbf565b91506148e782614880565b604082019050919050565b6000602082019050818103600083015261490b816148cf565b9050919050565b7f4162696c69747920697320617661696c61626c65206f6e6c7920666f7220636860008201527f6172616374657200000000000000000000000000000000000000000000000000602082015250565b600061496e602783613cbf565b915061497982614912565b604082019050919050565b6000602082019050818103600083015261499d81614961565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e656564204142494c4954595f60008201527f5345545445525f524f4c45000000000000000000000000000000000000000000602082015250565b6000614a00602b83613cbf565b9150614a0b826149a4565b604082019050919050565b60006020820190508181036000830152614a2f816149f3565b9050919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000614a92603283613cbf565b9150614a9d82614a36565b604082019050919050565b60006020820190508181036000830152614ac181614a85565b9050919050565b7f537065656420697320617661696c61626c65206f6e6c7920666f72206368617260008201527f6163746572000000000000000000000000000000000000000000000000000000602082015250565b6000614b24602583613cbf565b9150614b2f82614ac8565b604082019050919050565b60006020820190508181036000830152614b5381614b17565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e6565642053504545445f534560008201527f545445525f524f4c450000000000000000000000000000000000000000000000602082015250565b6000614bb6602983613cbf565b9150614bc182614b5a565b604082019050919050565b60006020820190508181036000830152614be581614ba9565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000614c48602f83613cbf565b9150614c5382614bec565b604082019050919050565b60006020820190508181036000830152614c7781614c3b565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000614cda602983613cbf565b9150614ce582614c7e565b604082019050919050565b60006020820190508181036000830152614d0981614ccd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614d4a8261399d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614d7d57614d7c614578565b5b600182019050919050565b7f4d616e6120697320617661696c61626c65206f6e6c7920666f7220636861726160008201527f6374657200000000000000000000000000000000000000000000000000000000602082015250565b6000614de4602483613cbf565b9150614def82614d88565b604082019050919050565b60006020820190508181036000830152614e1381614dd7565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e656564204d414e415f53455460008201527f5445525f524f4c45000000000000000000000000000000000000000000000000602082015250565b6000614e76602883613cbf565b9150614e8182614e1a565b604082019050919050565b60006020820190508181036000830152614ea581614e69565b9050919050565b7f4c6576656c20697320617661696c61626c65206f6e6c7920666f72207065742060008201527f6f72206368617261637465720000000000000000000000000000000000000000602082015250565b6000614f08602c83613cbf565b9150614f1382614eac565b604082019050919050565b60006020820190508181036000830152614f3781614efb565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e656564204c4556454c5f534560008201527f545445525f524f4c450000000000000000000000000000000000000000000000602082015250565b6000614f9a602983613cbf565b9150614fa582614f3e565b604082019050919050565b60006020820190508181036000830152614fc981614f8d565b9050919050565b7f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b6000615006601283613cbf565b915061501182614fd0565b602082019050919050565b6000602082019050818103600083015261503581614ff9565b9050919050565b7f446f6573206e6f74206d6174636820746f6b656e20636861726163746572206b60008201527f696e640000000000000000000000000000000000000000000000000000000000602082015250565b6000615098602383613cbf565b91506150a38261503c565b604082019050919050565b600060208201905081810360008301526150c78161508b565b9050919050565b7f436f6c6c6973696f6e2044616d61676520697320617661696c61626c65206f6e60008201527f6c7920666f722063686172616374657200000000000000000000000000000000602082015250565b600061512a603083613cbf565b9150615135826150ce565b604082019050919050565b600060208201905081810360008301526151598161511d565b9050919050565b7f4e6f7420656e6f75676820706f696e7473000000000000000000000000000000600082015250565b6000615196601183613cbf565b91506151a182615160565b602082019050919050565b600060208201905081810360008301526151c581615189565b9050919050565b60006151d78261399d565b91506151e28361399d565b9250828210156151f5576151f4614578565b5b828203905092915050565b7f4d45544152554e434f4c4c454354494f4e3a206e65656420434f4c4c4953494f60008201527f4e5f44414d4147455f5345545445525f524f4c45000000000000000000000000602082015250565b600061525c603483613cbf565b915061526782615200565b604082019050919050565b6000602082019050818103600083015261528b8161524f565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e6565642052554e535f434f5560008201527f4e545f5345545445525f524f4c45000000000000000000000000000000000000602082015250565b60006152ee602e83613cbf565b91506152f982615292565b604082019050919050565b6000602082019050818103600083015261531d816152e1565b9050919050565b7f57696e7320636f756e7420697320617661696c61626c65206f6e6c7920666f7260008201527f2063686172616374657200000000000000000000000000000000000000000000602082015250565b6000615380602a83613cbf565b915061538b82615324565b604082019050919050565b600060208201905081810360008301526153af81615373565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000615412602983613cbf565b915061541d826153b6565b604082019050919050565b6000602082019050818103600083015261544181615405565b9050919050565b7f4d45544152554e434f4c4c454354494f4e3a206e6565642057494e535f434f5560008201527f4e545f5345545445525f524f4c45000000000000000000000000000000000000602082015250565b60006154a4602e83613cbf565b91506154af82615448565b604082019050919050565b600060208201905081810360008301526154d381615497565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615536602183613cbf565b9150615541826154da565b604082019050919050565b6000602082019050818103600083015261556581615529565b9050919050565b60006040820190506155816000830185613a13565b61558e6020830184613a13565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006155f1602883613cbf565b91506155fc82615595565b604082019050919050565b60006020820190508181036000830152615620816155e4565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000615683602583613cbf565b915061568e82615627565b604082019050919050565b600060208201905081810360008301526156b281615676565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000615715602a83613cbf565b9150615720826156b9565b604082019050919050565b6000602082019050818103600083015261574481615708565b9050919050565b600060408201905081810360008301526157658185614291565b905081810360208301526157798184614291565b90509392505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006157c3601783615782565b91506157ce8261578d565b601782019050919050565b60006157e482613cb4565b6157ee8185615782565b93506157fe818560208601613cd0565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000615840601183615782565b915061584b8261580a565b601182019050919050565b6000615861826157b6565b915061586d82856157d9565b915061587882615833565b915061588482846157d9565b91508190509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006158ec602383613cbf565b91506158f782615890565b604082019050919050565b6000602082019050818103600083015261591b816158df565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b600061597e602483613cbf565b915061598982615922565b604082019050919050565b600060208201905081810360008301526159ad81615971565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000615a10602983613cbf565b9150615a1b826159b4565b604082019050919050565b60006020820190508181036000830152615a3f81615a03565b9050919050565b615a4f8161395f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000615a7c82615a55565b615a868185615a60565b9350615a96818560208601613cd0565b615a9f81613b02565b840191505092915050565b600060a082019050615abf6000830188615a46565b615acc6020830187615a46565b615ad96040830186613a13565b615ae66060830185613a13565b8181036080830152615af88184615a71565b90509695505050505050565b600081519050615b1381613a69565b92915050565b600060208284031215615b2f57615b2e613935565b5b6000615b3d84828501615b04565b91505092915050565b60008160e01c9050919050565b600060033d1115615b725760046000803e615b6f600051615b46565b90505b90565b600060443d1015615b8557615c08565b615b8d61392b565b60043d036004823e80513d602482011167ffffffffffffffff82111715615bb5575050615c08565b808201805167ffffffffffffffff811115615bd35750505050615c08565b80602083010160043d038501811115615bf0575050505050615c08565b615bff82602001850186613b42565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615c67603483613cbf565b9150615c7282615c0b565b604082019050919050565b60006020820190508181036000830152615c9681615c5a565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615cf9602883613cbf565b9150615d0482615c9d565b604082019050919050565b60006020820190508181036000830152615d2881615cec565b9050919050565b600060a082019050615d446000830188615a46565b615d516020830187615a46565b8181036040830152615d638186614291565b90508181036060830152615d778185614291565b90508181036080830152615d8b8184615a71565b90509695505050505050565b6000615da28261399d565b9150615dad8361399d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615de657615de5614578565b5b828202905092915050565b6000615dfc8261399d565b91506000821415615e1057615e0f614578565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615e51602083613cbf565b9150615e5c82615e1b565b602082019050919050565b60006020820190508181036000830152615e8081615e44565b905091905056fea26469706673582212207d6a8c951d80c1f30fca259799c2d82a319deb97d5ff83bfefa9c65c391fc7b064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 552,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 558,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 560,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 24,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5000,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenLevels",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5004,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenRuns",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5008,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenWins",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5012,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenAbilities",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5016,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenHealthPoints",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5020,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenManaPoints",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5024,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenSpeedPoints",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5028,
        "contract": "contracts/MetarunCollection.sol:MetarunCollection",
        "label": "tokenCollisionDamagePoints",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/MetarunCollection.sol:MetarunCollection",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}