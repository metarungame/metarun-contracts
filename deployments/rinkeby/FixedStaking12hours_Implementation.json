{
  "address": "0xe9c1f08e99C27763E60f98eE5A723151b4f92C73",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestTime",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "earlyUnstakeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestableYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "skinsAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getStakesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yieldRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earlyUnstakeFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftCollection",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mrunPerSkin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftCollection",
      "outputs": [
        {
          "internalType": "contract IERC1155mintBatch",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMrunPerSkin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_skinKind",
          "type": "uint256"
        }
      ],
      "name": "setSkinKind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skinKind",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestedYield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakesOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20mintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xef248550daedbbec2364b7b6d1aeecdba485459b1f806a24b06535f198dd5bf1",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0xe9c1f08e99C27763E60f98eE5A723151b4f92C73",
    "transactionIndex": 55,
    "gasUsed": "2596450",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x40c37b44aec5fb7df1c8b92cc3f1f5a361613d5c4fae46cc93d3e7d43dfaad87",
    "transactionHash": "0xef248550daedbbec2364b7b6d1aeecdba485459b1f806a24b06535f198dd5bf1",
    "logs": [],
    "blockNumber": 10588303,
    "cumulativeGasUsed": "11953235",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c271c393d0d0dc60b491e4adf1973227",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestTime\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"earlyUnstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestableYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skinsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getStakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yieldRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyUnstakeFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftCollection\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrunPerSkin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCollection\",\"outputs\":[{\"internalType\":\"contract IERC1155mintBatch\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMrunPerSkin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_skinKind\",\"type\":\"uint256\"}],\"name\":\"setSkinKind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skinKind\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStake(address,uint256)\":{\"details\":\"get the individual stake parameters of the user\",\"params\":{\"_stakeId\":\"stake index\",\"_userAddress\":\"account of staker\"},\"returns\":{\"endTime\":\"the time when unstaking (w.o. penalties) becomes possible\",\"harvestableYield\":\"The unlocked part of yield available for harvesting\",\"harvestedYield\":\"The part of yield user harvested already\",\"lastHarvestTime\":\"The time of last harvest event\",\"skinsAmount\":\"Reward nft skin type tokens\",\"staked\":\"the status of stake\",\"stakedAmount\":\"the number of deposited tokens\",\"startTime\":\"the moment of stake start\",\"totalYield\":\"entire yield for the stake (totally released on endTime)\"}},\"getStakesLength(address)\":{\"details\":\"get the count of user's stakes. Used on frontend to iterate and display individual stakes\",\"params\":{\"_userAddress\":\"account of staker\"},\"returns\":{\"_0\":\"stakes\"}},\"harvest(uint256)\":{\"details\":\"harvest accumulated rewards. Can be called many times.\",\"params\":{\"_stakeId\":\"Id of the stake\"}},\"initialize(address,uint256,uint256,uint256,address)\":{\"details\":\"the constructor arguments:\",\"params\":{\"_earlyUnstakeFee\":\"fee for unstaking before stake expiration\",\"_nftCollection\":\"ERC1155 token of NFT collection\",\"_stakeDuration\":\"the stake duration in seconds\",\"_token\":\"address of token - the same accepted for staking and used to pay rewards\",\"_yieldRate\":\"reward rate in basis points (1/10000)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256)\":{\"details\":\"submit the stake\",\"params\":{\"_amount\":\"amount of tokens to be transferred from user's account\"}},\"start()\":{\"details\":\"start accepting new stakes. Called only by the owner\"},\"stop()\":{\"details\":\"stop accepting new stakes. Called only by the owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256)\":{\"details\":\"withdraw the `body` of user's stake. Can be called only once\",\"params\":{\"_stakeId\":\"Id of the stake\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FixedStaking.sol\":\"FixedStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x00a36a453484b7145a0d4a0c64daea248a7e806e6be4d7bbae1032a328777c82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/FixedStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ninterface IERC20mintable is IERC20Upgradeable {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\\ninterface IERC1155mintBatch is IERC1155Upgradeable {\\n    function mintBatch(\\n        address to,\\n        uint256 kind,\\n        uint256 count\\n    ) external;\\n}\\n\\ncontract FixedStaking is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20mintable;\\n    // user deposits are recorded in StakeInfo[] stakes struct\\n    struct StakeInfo {\\n        // staked is true if deposit is staked and hasn't been unstaked.\\n        // After user claims his stake back, `staked` becomes false\\n        bool staked;\\n        // stakedAmount get recorded at the stake time and doesn't change.\\n        uint256 stakedAmount;\\n        uint256 startTime;\\n        // endTime and totalYield get calculated in advance at the moment of staking\\n        // endTime is the date when unstaking becomes possible (without penalties)\\n        uint256 endTime;\\n        // totalYield is a total value of rewards for the given stake.\\n        // Gets calculated on the stake start and doesnt' change\\n        // but the amount that user is able to withdraw gets gradually unlocked over time.\\n        uint256 totalYield;\\n        // The amount of yield user already harvested and the time of last harvest call.\\n        uint256 harvestedYield;\\n        uint256 lastHarvestTime;\\n    }\\n\\n    // If stakesOpen == true, the contract is operational and accepts new stakes.\\n    // Otherwise it allows just harvesting and unstaking.\\n    bool public stakesOpen;\\n\\n    // The token accepted for staking and used for rewards (The same token for both).\\n    IERC20mintable public token;\\n\\n    // The NFT Collection used for rewards.\\n    IERC1155mintBatch public nftCollection;\\n\\n    // struccture that stores the records of users' stakes\\n    mapping(address => StakeInfo[]) public stakes;\\n\\n    // the total number of staked tokens. Accounted separately to avoid mixing stake and reward balances\\n    uint256 public stakedTokens;\\n\\n    // The staking interval in days.\\n    // Early unstaking is possible but a fine is withheld.\\n    uint256 public stakeDuration;\\n\\n    // Fee for early unstake in basis points (1/10000)\\n    // If the user withdraws before stake expiration, he pays `earlyUnstakeFee`\\n    uint256 public earlyUnstakeFee;\\n\\n    // Reward that staker will receive for his stake\\n    // nominated in basis points (1/10000) of staked amount\\n    uint256 public yieldRate;\\n\\n    // Number of mrun tokens required to reward one nft\\n    uint256 public mrunPerSkin;\\n\\n    // Skin kind identifier\\n    uint256 public skinKind;\\n\\n    event Stake(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 startTime, uint256 endTime);\\n\\n    event Unstake(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 startTime, uint256 endTime, bool early);\\n\\n    event Harvest(address indexed user, uint256 indexed stakeId, uint256 amount, uint256 harvestTime);\\n\\n    /**\\n     * @dev the constructor arguments:\\n     * @param _token address of token - the same accepted for staking and used to pay rewards\\n     * @param _stakeDuration the stake duration in seconds\\n     * @param _yieldRate reward rate in basis points (1/10000)\\n     * @param _earlyUnstakeFee fee for unstaking before stake expiration\\n     * @param _nftCollection ERC1155 token of NFT collection\\n     */\\n    function initialize(\\n        address _token,\\n        uint256 _stakeDuration,\\n        uint256 _yieldRate,\\n        uint256 _earlyUnstakeFee,\\n        address _nftCollection\\n    ) public initializer {\\n        require(_token != address(0), \\\"Empty token address\\\");\\n        require(_yieldRate > 0, \\\"Zero yield rate\\\");\\n        require(_earlyUnstakeFee > 0, \\\"Zero early Unstake Fee\\\");\\n        token = IERC20mintable(_token);\\n        stakeDuration = _stakeDuration;\\n        yieldRate = _yieldRate;\\n        earlyUnstakeFee = _earlyUnstakeFee;\\n        nftCollection = IERC1155mintBatch(_nftCollection);\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @dev start accepting new stakes. Called only by the owner\\n     */\\n    function start() public onlyOwner {\\n        require(!stakesOpen, \\\"Stakes are open already\\\");\\n        require(skinKind > 0, \\\"skinKind variable not set\\\");\\n        stakesOpen = true;\\n    }\\n\\n    /**\\n     * @dev stop accepting new stakes. Called only by the owner\\n     */\\n    function stop() public onlyOwner {\\n        require(stakesOpen, \\\"Stakes are stopped already\\\");\\n        stakesOpen = false;\\n    }\\n\\n    function setMrunPerSkin(uint256 _amount) public onlyOwner {\\n        mrunPerSkin = _amount;\\n    }\\n\\n    function setSkinKind(uint256 _skinKind) public onlyOwner {\\n        skinKind = _skinKind;\\n    }\\n\\n    /**\\n     * @dev submit the stake\\n     * @param _amount   amount of tokens to be transferred from user's account\\n     */\\n    function stake(uint256 _amount) external {\\n        require(stakesOpen, \\\"stake: not open\\\");\\n        require(_amount > 0, \\\"stake: zero amount\\\");\\n        uint256 skinsAmount = 0;\\n        if (mrunPerSkin > 0) {\\n            skinsAmount = _amount / mrunPerSkin;\\n        }\\n        require(skinsAmount <= 100, \\\"stake: reward skins can't be greater than 100\\\");\\n\\n        // entire reward allocated for the user for this stake\\n        uint256 totalYield = (_amount * yieldRate) / 10000;\\n        uint256 startTime = _now();\\n        uint256 endTime = _now() + stakeDuration;\\n        stakes[msg.sender].push(\\n            StakeInfo({\\n                staked: true,\\n                stakedAmount: _amount,\\n                startTime: startTime,\\n                endTime: endTime,\\n                totalYield: totalYield,\\n                harvestedYield: 0,\\n                lastHarvestTime: startTime\\n            })\\n        );\\n        stakedTokens = stakedTokens + _amount;\\n        uint256 stakeId = getStakesLength(msg.sender) - 1;\\n        emit Stake(msg.sender, stakeId, _amount, startTime, endTime);\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @dev withdraw the `body` of user's stake. Can be called only once\\n     * @param _stakeId   Id of the stake\\n     */\\n    function unstake(uint256 _stakeId) external {\\n        (\\n            bool staked,\\n            uint256 stakedAmount,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalYield,\\n            uint256 harvestedYield,\\n            ,\\n            uint256 harvestableYield,\\n            uint256 skinsAmount\\n        ) = getStake(msg.sender, _stakeId);\\n        bool early;\\n        require(staked, \\\"Unstaked already\\\");\\n        if (_now() > endTime) {\\n            stakes[msg.sender][_stakeId].staked = false;\\n            stakedTokens = stakedTokens - stakedAmount;\\n            early = false;\\n            token.safeTransfer(msg.sender, stakedAmount);\\n            if (skinsAmount > 0) {\\n                nftCollection.mintBatch(msg.sender, skinKind, skinsAmount);\\n            }\\n        } else {\\n            uint256 newTotalYield = harvestedYield + harvestableYield;\\n            stakes[msg.sender][_stakeId].staked = false;\\n            stakes[msg.sender][_stakeId].endTime = _now();\\n            stakes[msg.sender][_stakeId].totalYield = newTotalYield;\\n            stakedTokens = stakedTokens - stakedAmount;\\n            early = true;\\n\\n            uint256 fee = (stakedAmount * earlyUnstakeFee) / 10000;\\n            uint256 amountToTransfer = stakedAmount - fee;\\n            token.safeTransfer(msg.sender, amountToTransfer);\\n            token.burn(fee);\\n        }\\n\\n        emit Unstake(msg.sender, _stakeId, stakedAmount, startTime, endTime, early);\\n    }\\n\\n    /**\\n     * @dev harvest accumulated rewards. Can be called many times.\\n     * @param _stakeId   Id of the stake\\n     */\\n    function harvest(uint256 _stakeId) external {\\n        (, , , , , uint256 harvestedYield, , uint256 harvestableYield, ) = getStake(msg.sender, _stakeId);\\n        require(harvestableYield != 0, \\\"harvestableYield is zero\\\");\\n        stakes[msg.sender][_stakeId].harvestedYield = harvestedYield + harvestableYield;\\n        stakes[msg.sender][_stakeId].lastHarvestTime = _now();\\n        emit Harvest(msg.sender, _stakeId, harvestableYield, _now());\\n        token.mint(msg.sender, harvestableYield);\\n    }\\n\\n    /**\\n     * @dev get the count of user's stakes. Used on frontend to iterate and display individual stakes\\n     * @param _userAddress account of staker\\n     * @return stakes\\n     */\\n    function getStakesLength(address _userAddress) public view returns (uint256) {\\n        return stakes[_userAddress].length;\\n    }\\n\\n    /**\\n     * @dev get the individual stake parameters of the user\\n     * @param _userAddress account of staker\\n     * @param _stakeId stake index\\n     * @return staked the status of stake\\n     * @return stakedAmount the number of deposited tokens\\n     * @return startTime the moment of stake start\\n     * @return endTime the time when unstaking (w.o. penalties) becomes possible\\n     * @return totalYield entire yield for the stake (totally released on endTime)\\n     * @return harvestedYield The part of yield user harvested already\\n     * @return lastHarvestTime The time of last harvest event\\n     * @return harvestableYield The unlocked part of yield available for harvesting\\n     * @return skinsAmount Reward nft skin type tokens\\n     */\\n    function getStake(address _userAddress, uint256 _stakeId)\\n        public\\n        view\\n        returns (\\n            bool staked,\\n            uint256 stakedAmount,\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 totalYield, // Entire yield for the stake (totally released on endTime)\\n            uint256 harvestedYield, // The part of yield user harvested already\\n            uint256 lastHarvestTime, // The time of last harvest event\\n            uint256 harvestableYield, // The unlocked part of yield available for harvesting\\n            uint256 skinsAmount // Reward token's amount of kind skin\\n        )\\n    {\\n        StakeInfo memory _stake = stakes[_userAddress][_stakeId];\\n        staked = _stake.staked;\\n        stakedAmount = _stake.stakedAmount;\\n        startTime = _stake.startTime;\\n        endTime = _stake.endTime;\\n        totalYield = _stake.totalYield;\\n        harvestedYield = _stake.harvestedYield;\\n        lastHarvestTime = _stake.lastHarvestTime;\\n        if (_now() > endTime) {\\n            harvestableYield = totalYield - harvestedYield;\\n        } else {\\n            harvestableYield = (totalYield * (_now() - lastHarvestTime)) / (endTime - startTime);\\n        }\\n        if (mrunPerSkin > 0) {\\n            skinsAmount = stakedAmount / mrunPerSkin;\\n        } else {\\n            skinsAmount = 0;\\n        }\\n    }\\n\\n    // Returns block.timestamp, overridable for test purposes.\\n    function _now() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x352a1f24abcd2ba0f1fa84d9e7f7b2836d6631c7465a51b2a9ad712bab3a00aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e3e806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636c28e349116100c3578063cb6290091161007c578063cb62900914610334578063cb913c8214610352578063cfd4766314610370578063ddc63262146103a8578063f2fde38b146103c4578063fc0c546a146103e05761014d565b80636c28e3491461029a578063715018a6146102b65780638da5cb5b146102c0578063909767d9146102de578063a694fc3a1461030e578063be9a65551461032a5761014d565b80633cae445d116101155780633cae445d146101d25780633f9b679e146101ee57806340f02ab61461020a578063584b62a1146102285780636588103b1461025e5780636999ac931461027c5761014d565b80630711306d1461015257806307da68f51461017057806318b4a87e1461017a5780632e17de78146101985780633c5cba87146101b4575b600080fd5b61015a6103fe565b6040516101679190611d6b565b60405180910390f35b610178610404565b005b6101826104ec565b60405161018f9190611d6b565b60405180910390f35b6101b260048036038101906101ad9190611db7565b6104f2565b005b6101bc6109d2565b6040516101c99190611d6b565b60405180910390f35b6101ec60048036038101906101e79190611db7565b6109d8565b005b61020860048036038101906102039190611db7565b610a5e565b005b610212610ae4565b60405161021f9190611d6b565b60405180910390f35b610242600480360381019061023d9190611e42565b610aea565b6040516102559796959493929190611e9d565b60405180910390f35b610266610b56565b6040516102739190611f6b565b60405180910390f35b610284610b7c565b6040516102919190611d6b565b60405180910390f35b6102b460048036038101906102af9190611f86565b610b82565b005b6102be610e00565b005b6102c8610e88565b6040516102d59190612010565b60405180910390f35b6102f860048036038101906102f3919061202b565b610eb2565b6040516103059190611d6b565b60405180910390f35b61032860048036038101906103239190611db7565b610efe565b005b610332611209565b005b61033c611337565b6040516103499190611d6b565b60405180910390f35b61035a61133d565b6040516103679190612058565b60405180910390f35b61038a60048036038101906103859190611e42565b611350565b60405161039f99989796959493929190612073565b60405180910390f35b6103c260048036038101906103bd9190611db7565b6114df565b005b6103de60048036038101906103d9919061202b565b611707565b005b6103e86117ff565b6040516103f59190612121565b60405180910390f35b606a5481565b61040c611825565b73ffffffffffffffffffffffffffffffffffffffff1661042a610e88565b73ffffffffffffffffffffffffffffffffffffffff1614610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790612199565b60405180910390fd5b606560009054906101000a900460ff166104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c690612205565b60405180910390fd5b6000606560006101000a81548160ff021916908315150217905550565b606d5481565b600080600080600080600080610508338a611350565b985098505097509750975097509750975060008861055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055290612271565b60405180910390fd5b8561056461182d565b11156106ec576000606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b815481106105bd576105bc612291565b5b906000526020600020906007020160000160006101000a81548160ff021916908315150217905550876068546105f391906122ef565b6068819055506000905061064a3389606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118359092919063ffffffff16565b60008211156106e757606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e81aaea33606d54856040518463ffffffff1660e01b81526004016106b493929190612323565b600060405180830381600087803b1580156106ce57600080fd5b505af11580156106e2573d6000803e3d6000fd5b505050505b610971565b600083856106fa919061235a565b90506000606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208c8154811061074f5761074e612291565b5b906000526020600020906007020160000160006101000a81548160ff02191690831515021790555061077f61182d565b606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208c815481106107d0576107cf612291565b5b90600052602060002090600702016003018190555080606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208c8154811061083757610836612291565b5b9060005260206000209060070201600401819055508860685461085a91906122ef565b606881905550600191506000612710606a548b61087791906123b0565b6108819190612439565b90506000818b61089191906122ef565b90506108e03382606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118359092919063ffffffff16565b606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040161093b9190611d6b565b600060405180830381600087803b15801561095557600080fd5b505af1158015610969573d6000803e3d6000fd5b505050505050505b893373ffffffffffffffffffffffffffffffffffffffff167fc27678b8d9d59c0688159890347f79df5b543dff3fcad311f8142181a3661c148a8a8a866040516109be949392919061246a565b60405180910390a350505050505050505050565b606c5481565b6109e0611825565b73ffffffffffffffffffffffffffffffffffffffff166109fe610e88565b73ffffffffffffffffffffffffffffffffffffffff1614610a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4b90612199565b60405180910390fd5b80606d8190555050565b610a66611825565b73ffffffffffffffffffffffffffffffffffffffff16610a84610e88565b73ffffffffffffffffffffffffffffffffffffffff1614610ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad190612199565b60405180910390fd5b80606c8190555050565b60695481565b60676020528160005260406000208181548110610b0657600080fd5b9060005260206000209060070201600091509150508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154905087565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606b5481565b600060019054906101000a900460ff16610baa5760008054906101000a900460ff1615610bb3565b610bb26118bb565b5b610bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be990612521565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c42576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca99061258d565b60405180910390fd5b60008411610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec906125f9565b60405180910390fd5b60008311610d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2f90612665565b60405180910390fd5b85606560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460698190555083606b8190555082606a8190555081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610dd76118cc565b8015610df85760008060016101000a81548160ff0219169083151502179055505b505050505050565b610e08611825565b73ffffffffffffffffffffffffffffffffffffffff16610e26610e88565b73ffffffffffffffffffffffffffffffffffffffff1614610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7390612199565b60405180910390fd5b610e866000611925565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b606560009054906101000a900460ff16610f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f44906126d1565b60405180910390fd5b60008111610f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f879061273d565b60405180910390fd5b600080606c541115610fad57606c5482610faa9190612439565b90505b6064811115610ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe8906127cf565b60405180910390fd5b6000612710606b548461100491906123b0565b61100e9190612439565b9050600061101a61182d565b9050600060695461102961182d565b611033919061235a565b9050606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052806001151581526020018781526020018481526020018381526020018581526020016000815260200184815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505084606854611140919061235a565b6068819055506000600161115333610eb2565b61115d91906122ef565b9050803373ffffffffffffffffffffffffffffffffffffffff167f2720efa4b2dd4f3f8a347da3cbd290a522e9432da9072c5b8e6300496fdde2828886866040516111aa939291906127ef565b60405180910390a3611201333088606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166119eb909392919063ffffffff16565b505050505050565b611211611825565b73ffffffffffffffffffffffffffffffffffffffff1661122f610e88565b73ffffffffffffffffffffffffffffffffffffffff1614611285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127c90612199565b60405180910390fd5b606560009054906101000a900460ff16156112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90612872565b60405180910390fd5b6000606d541161131a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611311906128de565b60405180910390fd5b6001606560006101000a81548160ff021916908315150217905550565b60685481565b606560009054906101000a900460ff1681565b600080600080600080600080600080606760008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b815481106113b0576113af612291565b5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050905080600001519950806020015198508060400151975080606001519650806080015195508060a0015194508060c0015193508661145c61182d565b111561147557848661146e91906122ef565b92506114ac565b878761148191906122ef565b8461148a61182d565b61149491906122ef565b8761149f91906123b0565b6114a99190612439565b92505b6000606c5411156114cc57606c54896114c59190612439565b91506114d1565b600091505b509295985092959850929598565b6000806114ec3384611350565b5097505096505050505050600081141561153b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115329061294a565b60405180910390fd5b8082611547919061235a565b606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061159857611597612291565b5b9060005260206000209060070201600501819055506115b561182d565b606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061160657611605612291565b5b906000526020600020906007020160060181905550823373ffffffffffffffffffffffffffffffffffffffff167f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe768361165d61182d565b60405161166b92919061296a565b60405180910390a3606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016116d0929190612993565b600060405180830381600087803b1580156116ea57600080fd5b505af11580156116fe573d6000803e3d6000fd5b50505050505050565b61170f611825565b73ffffffffffffffffffffffffffffffffffffffff1661172d610e88565b73ffffffffffffffffffffffffffffffffffffffff1614611783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177a90612199565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90612a2e565b60405180910390fd5b6117fc81611925565b50565b606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600042905090565b6118b68363a9059cbb60e01b8484604051602401611854929190612993565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a74565b505050565b60006118c630611b3b565b15905090565b600060019054906101000a900460ff1661191b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191290612ac0565b60405180910390fd5b611923611b5e565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611a6e846323b872dd60e01b858585604051602401611a0c93929190612ae0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a74565b50505050565b6000611ad6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611bbf9092919063ffffffff16565b9050600081511115611b365780806020019051810190611af69190612b43565b611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c90612be2565b60405180910390fd5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba490612ac0565b60405180910390fd5b611bbd611bb8611825565b611925565b565b6060611bce8484600085611bd7565b90509392505050565b606082471015611c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1390612c74565b60405180910390fd5b611c2585611b3b565b611c64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5b90612ce0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c8d9190612d7a565b60006040518083038185875af1925050503d8060008114611cca576040519150601f19603f3d011682016040523d82523d6000602084013e611ccf565b606091505b5091509150611cdf828286611ceb565b92505050949350505050565b60608315611cfb57829050611d4b565b600083511115611d0e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d429190612de6565b60405180910390fd5b9392505050565b6000819050919050565b611d6581611d52565b82525050565b6000602082019050611d806000830184611d5c565b92915050565b600080fd5b611d9481611d52565b8114611d9f57600080fd5b50565b600081359050611db181611d8b565b92915050565b600060208284031215611dcd57611dcc611d86565b5b6000611ddb84828501611da2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e0f82611de4565b9050919050565b611e1f81611e04565b8114611e2a57600080fd5b50565b600081359050611e3c81611e16565b92915050565b60008060408385031215611e5957611e58611d86565b5b6000611e6785828601611e2d565b9250506020611e7885828601611da2565b9150509250929050565b60008115159050919050565b611e9781611e82565b82525050565b600060e082019050611eb2600083018a611e8e565b611ebf6020830189611d5c565b611ecc6040830188611d5c565b611ed96060830187611d5c565b611ee66080830186611d5c565b611ef360a0830185611d5c565b611f0060c0830184611d5c565b98975050505050505050565b6000819050919050565b6000611f31611f2c611f2784611de4565b611f0c565b611de4565b9050919050565b6000611f4382611f16565b9050919050565b6000611f5582611f38565b9050919050565b611f6581611f4a565b82525050565b6000602082019050611f806000830184611f5c565b92915050565b600080600080600060a08688031215611fa257611fa1611d86565b5b6000611fb088828901611e2d565b9550506020611fc188828901611da2565b9450506040611fd288828901611da2565b9350506060611fe388828901611da2565b9250506080611ff488828901611e2d565b9150509295509295909350565b61200a81611e04565b82525050565b60006020820190506120256000830184612001565b92915050565b60006020828403121561204157612040611d86565b5b600061204f84828501611e2d565b91505092915050565b600060208201905061206d6000830184611e8e565b92915050565b600061012082019050612089600083018c611e8e565b612096602083018b611d5c565b6120a3604083018a611d5c565b6120b06060830189611d5c565b6120bd6080830188611d5c565b6120ca60a0830187611d5c565b6120d760c0830186611d5c565b6120e460e0830185611d5c565b6120f2610100830184611d5c565b9a9950505050505050505050565b600061210b82611f38565b9050919050565b61211b81612100565b82525050565b60006020820190506121366000830184612112565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061218360208361213c565b915061218e8261214d565b602082019050919050565b600060208201905081810360008301526121b281612176565b9050919050565b7f5374616b6573206172652073746f7070656420616c7265616479000000000000600082015250565b60006121ef601a8361213c565b91506121fa826121b9565b602082019050919050565b6000602082019050818103600083015261221e816121e2565b9050919050565b7f556e7374616b656420616c726561647900000000000000000000000000000000600082015250565b600061225b60108361213c565b915061226682612225565b602082019050919050565b6000602082019050818103600083015261228a8161224e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122fa82611d52565b915061230583611d52565b925082821015612318576123176122c0565b5b828203905092915050565b60006060820190506123386000830186612001565b6123456020830185611d5c565b6123526040830184611d5c565b949350505050565b600061236582611d52565b915061237083611d52565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123a5576123a46122c0565b5b828201905092915050565b60006123bb82611d52565b91506123c683611d52565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123ff576123fe6122c0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061244482611d52565b915061244f83611d52565b92508261245f5761245e61240a565b5b828204905092915050565b600060808201905061247f6000830187611d5c565b61248c6020830186611d5c565b6124996040830185611d5c565b6124a66060830184611e8e565b95945050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061250b602e8361213c565b9150612516826124af565b604082019050919050565b6000602082019050818103600083015261253a816124fe565b9050919050565b7f456d70747920746f6b656e206164647265737300000000000000000000000000600082015250565b600061257760138361213c565b915061258282612541565b602082019050919050565b600060208201905081810360008301526125a68161256a565b9050919050565b7f5a65726f207969656c6420726174650000000000000000000000000000000000600082015250565b60006125e3600f8361213c565b91506125ee826125ad565b602082019050919050565b60006020820190508181036000830152612612816125d6565b9050919050565b7f5a65726f206561726c7920556e7374616b652046656500000000000000000000600082015250565b600061264f60168361213c565b915061265a82612619565b602082019050919050565b6000602082019050818103600083015261267e81612642565b9050919050565b7f7374616b653a206e6f74206f70656e0000000000000000000000000000000000600082015250565b60006126bb600f8361213c565b91506126c682612685565b602082019050919050565b600060208201905081810360008301526126ea816126ae565b9050919050565b7f7374616b653a207a65726f20616d6f756e740000000000000000000000000000600082015250565b600061272760128361213c565b9150612732826126f1565b602082019050919050565b600060208201905081810360008301526127568161271a565b9050919050565b7f7374616b653a2072657761726420736b696e732063616e27742062652067726560008201527f61746572207468616e2031303000000000000000000000000000000000000000602082015250565b60006127b9602d8361213c565b91506127c48261275d565b604082019050919050565b600060208201905081810360008301526127e8816127ac565b9050919050565b60006060820190506128046000830186611d5c565b6128116020830185611d5c565b61281e6040830184611d5c565b949350505050565b7f5374616b657320617265206f70656e20616c7265616479000000000000000000600082015250565b600061285c60178361213c565b915061286782612826565b602082019050919050565b6000602082019050818103600083015261288b8161284f565b9050919050565b7f736b696e4b696e64207661726961626c65206e6f742073657400000000000000600082015250565b60006128c860198361213c565b91506128d382612892565b602082019050919050565b600060208201905081810360008301526128f7816128bb565b9050919050565b7f6861727665737461626c655969656c64206973207a65726f0000000000000000600082015250565b600061293460188361213c565b915061293f826128fe565b602082019050919050565b6000602082019050818103600083015261296381612927565b9050919050565b600060408201905061297f6000830185611d5c565b61298c6020830184611d5c565b9392505050565b60006040820190506129a86000830185612001565b6129b56020830184611d5c565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a1860268361213c565b9150612a23826129bc565b604082019050919050565b60006020820190508181036000830152612a4781612a0b565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612aaa602b8361213c565b9150612ab582612a4e565b604082019050919050565b60006020820190508181036000830152612ad981612a9d565b9050919050565b6000606082019050612af56000830186612001565b612b026020830185612001565b612b0f6040830184611d5c565b949350505050565b612b2081611e82565b8114612b2b57600080fd5b50565b600081519050612b3d81612b17565b92915050565b600060208284031215612b5957612b58611d86565b5b6000612b6784828501612b2e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612bcc602a8361213c565b9150612bd782612b70565b604082019050919050565b60006020820190508181036000830152612bfb81612bbf565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612c5e60268361213c565b9150612c6982612c02565b604082019050919050565b60006020820190508181036000830152612c8d81612c51565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612cca601d8361213c565b9150612cd582612c94565b602082019050919050565b60006020820190508181036000830152612cf981612cbd565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612d34578082015181840152602081019050612d19565b83811115612d43576000848401525b50505050565b6000612d5482612d00565b612d5e8185612d0b565b9350612d6e818560208601612d16565b80840191505092915050565b6000612d868284612d49565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000612db882612d91565b612dc2818561213c565b9350612dd2818560208601612d16565b612ddb81612d9c565b840191505092915050565b60006020820190508181036000830152612e008184612dad565b90509291505056fea2646970667358221220c1b4efff1c3b9efd534faa143e07407c5fae18de42c4375b660b375c5ae99c5764736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80636c28e349116100c3578063cb6290091161007c578063cb62900914610334578063cb913c8214610352578063cfd4766314610370578063ddc63262146103a8578063f2fde38b146103c4578063fc0c546a146103e05761014d565b80636c28e3491461029a578063715018a6146102b65780638da5cb5b146102c0578063909767d9146102de578063a694fc3a1461030e578063be9a65551461032a5761014d565b80633cae445d116101155780633cae445d146101d25780633f9b679e146101ee57806340f02ab61461020a578063584b62a1146102285780636588103b1461025e5780636999ac931461027c5761014d565b80630711306d1461015257806307da68f51461017057806318b4a87e1461017a5780632e17de78146101985780633c5cba87146101b4575b600080fd5b61015a6103fe565b6040516101679190611d6b565b60405180910390f35b610178610404565b005b6101826104ec565b60405161018f9190611d6b565b60405180910390f35b6101b260048036038101906101ad9190611db7565b6104f2565b005b6101bc6109d2565b6040516101c99190611d6b565b60405180910390f35b6101ec60048036038101906101e79190611db7565b6109d8565b005b61020860048036038101906102039190611db7565b610a5e565b005b610212610ae4565b60405161021f9190611d6b565b60405180910390f35b610242600480360381019061023d9190611e42565b610aea565b6040516102559796959493929190611e9d565b60405180910390f35b610266610b56565b6040516102739190611f6b565b60405180910390f35b610284610b7c565b6040516102919190611d6b565b60405180910390f35b6102b460048036038101906102af9190611f86565b610b82565b005b6102be610e00565b005b6102c8610e88565b6040516102d59190612010565b60405180910390f35b6102f860048036038101906102f3919061202b565b610eb2565b6040516103059190611d6b565b60405180910390f35b61032860048036038101906103239190611db7565b610efe565b005b610332611209565b005b61033c611337565b6040516103499190611d6b565b60405180910390f35b61035a61133d565b6040516103679190612058565b60405180910390f35b61038a60048036038101906103859190611e42565b611350565b60405161039f99989796959493929190612073565b60405180910390f35b6103c260048036038101906103bd9190611db7565b6114df565b005b6103de60048036038101906103d9919061202b565b611707565b005b6103e86117ff565b6040516103f59190612121565b60405180910390f35b606a5481565b61040c611825565b73ffffffffffffffffffffffffffffffffffffffff1661042a610e88565b73ffffffffffffffffffffffffffffffffffffffff1614610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790612199565b60405180910390fd5b606560009054906101000a900460ff166104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c690612205565b60405180910390fd5b6000606560006101000a81548160ff021916908315150217905550565b606d5481565b600080600080600080600080610508338a611350565b985098505097509750975097509750975060008861055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055290612271565b60405180910390fd5b8561056461182d565b11156106ec576000606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b815481106105bd576105bc612291565b5b906000526020600020906007020160000160006101000a81548160ff021916908315150217905550876068546105f391906122ef565b6068819055506000905061064a3389606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118359092919063ffffffff16565b60008211156106e757606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e81aaea33606d54856040518463ffffffff1660e01b81526004016106b493929190612323565b600060405180830381600087803b1580156106ce57600080fd5b505af11580156106e2573d6000803e3d6000fd5b505050505b610971565b600083856106fa919061235a565b90506000606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208c8154811061074f5761074e612291565b5b906000526020600020906007020160000160006101000a81548160ff02191690831515021790555061077f61182d565b606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208c815481106107d0576107cf612291565b5b90600052602060002090600702016003018190555080606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208c8154811061083757610836612291565b5b9060005260206000209060070201600401819055508860685461085a91906122ef565b606881905550600191506000612710606a548b61087791906123b0565b6108819190612439565b90506000818b61089191906122ef565b90506108e03382606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118359092919063ffffffff16565b606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b815260040161093b9190611d6b565b600060405180830381600087803b15801561095557600080fd5b505af1158015610969573d6000803e3d6000fd5b505050505050505b893373ffffffffffffffffffffffffffffffffffffffff167fc27678b8d9d59c0688159890347f79df5b543dff3fcad311f8142181a3661c148a8a8a866040516109be949392919061246a565b60405180910390a350505050505050505050565b606c5481565b6109e0611825565b73ffffffffffffffffffffffffffffffffffffffff166109fe610e88565b73ffffffffffffffffffffffffffffffffffffffff1614610a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4b90612199565b60405180910390fd5b80606d8190555050565b610a66611825565b73ffffffffffffffffffffffffffffffffffffffff16610a84610e88565b73ffffffffffffffffffffffffffffffffffffffff1614610ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad190612199565b60405180910390fd5b80606c8190555050565b60695481565b60676020528160005260406000208181548110610b0657600080fd5b9060005260206000209060070201600091509150508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154905087565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606b5481565b600060019054906101000a900460ff16610baa5760008054906101000a900460ff1615610bb3565b610bb26118bb565b5b610bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be990612521565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c42576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca99061258d565b60405180910390fd5b60008411610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec906125f9565b60405180910390fd5b60008311610d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2f90612665565b60405180910390fd5b85606560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460698190555083606b8190555082606a8190555081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610dd76118cc565b8015610df85760008060016101000a81548160ff0219169083151502179055505b505050505050565b610e08611825565b73ffffffffffffffffffffffffffffffffffffffff16610e26610e88565b73ffffffffffffffffffffffffffffffffffffffff1614610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7390612199565b60405180910390fd5b610e866000611925565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b606560009054906101000a900460ff16610f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f44906126d1565b60405180910390fd5b60008111610f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f879061273d565b60405180910390fd5b600080606c541115610fad57606c5482610faa9190612439565b90505b6064811115610ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe8906127cf565b60405180910390fd5b6000612710606b548461100491906123b0565b61100e9190612439565b9050600061101a61182d565b9050600060695461102961182d565b611033919061235a565b9050606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052806001151581526020018781526020018481526020018381526020018581526020016000815260200184815250908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505084606854611140919061235a565b6068819055506000600161115333610eb2565b61115d91906122ef565b9050803373ffffffffffffffffffffffffffffffffffffffff167f2720efa4b2dd4f3f8a347da3cbd290a522e9432da9072c5b8e6300496fdde2828886866040516111aa939291906127ef565b60405180910390a3611201333088606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166119eb909392919063ffffffff16565b505050505050565b611211611825565b73ffffffffffffffffffffffffffffffffffffffff1661122f610e88565b73ffffffffffffffffffffffffffffffffffffffff1614611285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127c90612199565b60405180910390fd5b606560009054906101000a900460ff16156112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90612872565b60405180910390fd5b6000606d541161131a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611311906128de565b60405180910390fd5b6001606560006101000a81548160ff021916908315150217905550565b60685481565b606560009054906101000a900460ff1681565b600080600080600080600080600080606760008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b815481106113b0576113af612291565b5b90600052602060002090600702016040518060e00160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050905080600001519950806020015198508060400151975080606001519650806080015195508060a0015194508060c0015193508661145c61182d565b111561147557848661146e91906122ef565b92506114ac565b878761148191906122ef565b8461148a61182d565b61149491906122ef565b8761149f91906123b0565b6114a99190612439565b92505b6000606c5411156114cc57606c54896114c59190612439565b91506114d1565b600091505b509295985092959850929598565b6000806114ec3384611350565b5097505096505050505050600081141561153b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115329061294a565b60405180910390fd5b8082611547919061235a565b606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061159857611597612291565b5b9060005260206000209060070201600501819055506115b561182d565b606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061160657611605612291565b5b906000526020600020906007020160060181905550823373ffffffffffffffffffffffffffffffffffffffff167f4534f107610758c3931de9ad1e176476fcfb8c74adf920167e1d54ee84fcfe768361165d61182d565b60405161166b92919061296a565b60405180910390a3606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016116d0929190612993565b600060405180830381600087803b1580156116ea57600080fd5b505af11580156116fe573d6000803e3d6000fd5b50505050505050565b61170f611825565b73ffffffffffffffffffffffffffffffffffffffff1661172d610e88565b73ffffffffffffffffffffffffffffffffffffffff1614611783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177a90612199565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90612a2e565b60405180910390fd5b6117fc81611925565b50565b606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600042905090565b6118b68363a9059cbb60e01b8484604051602401611854929190612993565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a74565b505050565b60006118c630611b3b565b15905090565b600060019054906101000a900460ff1661191b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191290612ac0565b60405180910390fd5b611923611b5e565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611a6e846323b872dd60e01b858585604051602401611a0c93929190612ae0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a74565b50505050565b6000611ad6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611bbf9092919063ffffffff16565b9050600081511115611b365780806020019051810190611af69190612b43565b611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c90612be2565b60405180910390fd5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba490612ac0565b60405180910390fd5b611bbd611bb8611825565b611925565b565b6060611bce8484600085611bd7565b90509392505050565b606082471015611c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1390612c74565b60405180910390fd5b611c2585611b3b565b611c64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5b90612ce0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c8d9190612d7a565b60006040518083038185875af1925050503d8060008114611cca576040519150601f19603f3d011682016040523d82523d6000602084013e611ccf565b606091505b5091509150611cdf828286611ceb565b92505050949350505050565b60608315611cfb57829050611d4b565b600083511115611d0e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d429190612de6565b60405180910390fd5b9392505050565b6000819050919050565b611d6581611d52565b82525050565b6000602082019050611d806000830184611d5c565b92915050565b600080fd5b611d9481611d52565b8114611d9f57600080fd5b50565b600081359050611db181611d8b565b92915050565b600060208284031215611dcd57611dcc611d86565b5b6000611ddb84828501611da2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e0f82611de4565b9050919050565b611e1f81611e04565b8114611e2a57600080fd5b50565b600081359050611e3c81611e16565b92915050565b60008060408385031215611e5957611e58611d86565b5b6000611e6785828601611e2d565b9250506020611e7885828601611da2565b9150509250929050565b60008115159050919050565b611e9781611e82565b82525050565b600060e082019050611eb2600083018a611e8e565b611ebf6020830189611d5c565b611ecc6040830188611d5c565b611ed96060830187611d5c565b611ee66080830186611d5c565b611ef360a0830185611d5c565b611f0060c0830184611d5c565b98975050505050505050565b6000819050919050565b6000611f31611f2c611f2784611de4565b611f0c565b611de4565b9050919050565b6000611f4382611f16565b9050919050565b6000611f5582611f38565b9050919050565b611f6581611f4a565b82525050565b6000602082019050611f806000830184611f5c565b92915050565b600080600080600060a08688031215611fa257611fa1611d86565b5b6000611fb088828901611e2d565b9550506020611fc188828901611da2565b9450506040611fd288828901611da2565b9350506060611fe388828901611da2565b9250506080611ff488828901611e2d565b9150509295509295909350565b61200a81611e04565b82525050565b60006020820190506120256000830184612001565b92915050565b60006020828403121561204157612040611d86565b5b600061204f84828501611e2d565b91505092915050565b600060208201905061206d6000830184611e8e565b92915050565b600061012082019050612089600083018c611e8e565b612096602083018b611d5c565b6120a3604083018a611d5c565b6120b06060830189611d5c565b6120bd6080830188611d5c565b6120ca60a0830187611d5c565b6120d760c0830186611d5c565b6120e460e0830185611d5c565b6120f2610100830184611d5c565b9a9950505050505050505050565b600061210b82611f38565b9050919050565b61211b81612100565b82525050565b60006020820190506121366000830184612112565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061218360208361213c565b915061218e8261214d565b602082019050919050565b600060208201905081810360008301526121b281612176565b9050919050565b7f5374616b6573206172652073746f7070656420616c7265616479000000000000600082015250565b60006121ef601a8361213c565b91506121fa826121b9565b602082019050919050565b6000602082019050818103600083015261221e816121e2565b9050919050565b7f556e7374616b656420616c726561647900000000000000000000000000000000600082015250565b600061225b60108361213c565b915061226682612225565b602082019050919050565b6000602082019050818103600083015261228a8161224e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122fa82611d52565b915061230583611d52565b925082821015612318576123176122c0565b5b828203905092915050565b60006060820190506123386000830186612001565b6123456020830185611d5c565b6123526040830184611d5c565b949350505050565b600061236582611d52565b915061237083611d52565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123a5576123a46122c0565b5b828201905092915050565b60006123bb82611d52565b91506123c683611d52565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123ff576123fe6122c0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061244482611d52565b915061244f83611d52565b92508261245f5761245e61240a565b5b828204905092915050565b600060808201905061247f6000830187611d5c565b61248c6020830186611d5c565b6124996040830185611d5c565b6124a66060830184611e8e565b95945050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061250b602e8361213c565b9150612516826124af565b604082019050919050565b6000602082019050818103600083015261253a816124fe565b9050919050565b7f456d70747920746f6b656e206164647265737300000000000000000000000000600082015250565b600061257760138361213c565b915061258282612541565b602082019050919050565b600060208201905081810360008301526125a68161256a565b9050919050565b7f5a65726f207969656c6420726174650000000000000000000000000000000000600082015250565b60006125e3600f8361213c565b91506125ee826125ad565b602082019050919050565b60006020820190508181036000830152612612816125d6565b9050919050565b7f5a65726f206561726c7920556e7374616b652046656500000000000000000000600082015250565b600061264f60168361213c565b915061265a82612619565b602082019050919050565b6000602082019050818103600083015261267e81612642565b9050919050565b7f7374616b653a206e6f74206f70656e0000000000000000000000000000000000600082015250565b60006126bb600f8361213c565b91506126c682612685565b602082019050919050565b600060208201905081810360008301526126ea816126ae565b9050919050565b7f7374616b653a207a65726f20616d6f756e740000000000000000000000000000600082015250565b600061272760128361213c565b9150612732826126f1565b602082019050919050565b600060208201905081810360008301526127568161271a565b9050919050565b7f7374616b653a2072657761726420736b696e732063616e27742062652067726560008201527f61746572207468616e2031303000000000000000000000000000000000000000602082015250565b60006127b9602d8361213c565b91506127c48261275d565b604082019050919050565b600060208201905081810360008301526127e8816127ac565b9050919050565b60006060820190506128046000830186611d5c565b6128116020830185611d5c565b61281e6040830184611d5c565b949350505050565b7f5374616b657320617265206f70656e20616c7265616479000000000000000000600082015250565b600061285c60178361213c565b915061286782612826565b602082019050919050565b6000602082019050818103600083015261288b8161284f565b9050919050565b7f736b696e4b696e64207661726961626c65206e6f742073657400000000000000600082015250565b60006128c860198361213c565b91506128d382612892565b602082019050919050565b600060208201905081810360008301526128f7816128bb565b9050919050565b7f6861727665737461626c655969656c64206973207a65726f0000000000000000600082015250565b600061293460188361213c565b915061293f826128fe565b602082019050919050565b6000602082019050818103600083015261296381612927565b9050919050565b600060408201905061297f6000830185611d5c565b61298c6020830184611d5c565b9392505050565b60006040820190506129a86000830185612001565b6129b56020830184611d5c565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a1860268361213c565b9150612a23826129bc565b604082019050919050565b60006020820190508181036000830152612a4781612a0b565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612aaa602b8361213c565b9150612ab582612a4e565b604082019050919050565b60006020820190508181036000830152612ad981612a9d565b9050919050565b6000606082019050612af56000830186612001565b612b026020830185612001565b612b0f6040830184611d5c565b949350505050565b612b2081611e82565b8114612b2b57600080fd5b50565b600081519050612b3d81612b17565b92915050565b600060208284031215612b5957612b58611d86565b5b6000612b6784828501612b2e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612bcc602a8361213c565b9150612bd782612b70565b604082019050919050565b60006020820190508181036000830152612bfb81612bbf565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612c5e60268361213c565b9150612c6982612c02565b604082019050919050565b60006020820190508181036000830152612c8d81612c51565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612cca601d8361213c565b9150612cd582612c94565b602082019050919050565b60006020820190508181036000830152612cf981612cbd565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612d34578082015181840152602081019050612d19565b83811115612d43576000848401525b50505050565b6000612d5482612d00565b612d5e8185612d0b565b9350612d6e818560208601612d16565b80840191505092915050565b6000612d868284612d49565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000612db882612d91565b612dc2818561213c565b9350612dd2818560208601612d16565b612ddb81612d9c565b840191505092915050565b60006020820190508181036000830152612e008184612dad565b90509291505056fea2646970667358221220c1b4efff1c3b9efd534faa143e07407c5fae18de42c4375b660b375c5ae99c5764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStake(address,uint256)": {
        "details": "get the individual stake parameters of the user",
        "params": {
          "_stakeId": "stake index",
          "_userAddress": "account of staker"
        },
        "returns": {
          "endTime": "the time when unstaking (w.o. penalties) becomes possible",
          "harvestableYield": "The unlocked part of yield available for harvesting",
          "harvestedYield": "The part of yield user harvested already",
          "lastHarvestTime": "The time of last harvest event",
          "skinsAmount": "Reward nft skin type tokens",
          "staked": "the status of stake",
          "stakedAmount": "the number of deposited tokens",
          "startTime": "the moment of stake start",
          "totalYield": "entire yield for the stake (totally released on endTime)"
        }
      },
      "getStakesLength(address)": {
        "details": "get the count of user's stakes. Used on frontend to iterate and display individual stakes",
        "params": {
          "_userAddress": "account of staker"
        },
        "returns": {
          "_0": "stakes"
        }
      },
      "harvest(uint256)": {
        "details": "harvest accumulated rewards. Can be called many times.",
        "params": {
          "_stakeId": "Id of the stake"
        }
      },
      "initialize(address,uint256,uint256,uint256,address)": {
        "details": "the constructor arguments:",
        "params": {
          "_earlyUnstakeFee": "fee for unstaking before stake expiration",
          "_nftCollection": "ERC1155 token of NFT collection",
          "_stakeDuration": "the stake duration in seconds",
          "_token": "address of token - the same accepted for staking and used to pay rewards",
          "_yieldRate": "reward rate in basis points (1/10000)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256)": {
        "details": "submit the stake",
        "params": {
          "_amount": "amount of tokens to be transferred from user's account"
        }
      },
      "start()": {
        "details": "start accepting new stakes. Called only by the owner"
      },
      "stop()": {
        "details": "stop accepting new stakes. Called only by the owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256)": {
        "details": "withdraw the `body` of user's stake. Can be called only once",
        "params": {
          "_stakeId": "Id of the stake"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 532,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 535,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2723,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 412,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 524,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5998,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakesOpen",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 6001,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "token",
        "offset": 1,
        "slot": "101",
        "type": "t_contract(IERC20mintable)5963"
      },
      {
        "astId": 6004,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "nftCollection",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC1155mintBatch)5975"
      },
      {
        "astId": 6010,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_array(t_struct(StakeInfo)5996_storage)dyn_storage)"
      },
      {
        "astId": 6012,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakedTokens",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 6014,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "stakeDuration",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 6016,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "earlyUnstakeFee",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 6018,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "yieldRate",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 6020,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "mrunPerSkin",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 6022,
        "contract": "contracts/FixedStaking.sol:FixedStaking",
        "label": "skinKind",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakeInfo)5996_storage)dyn_storage": {
        "base": "t_struct(StakeInfo)5996_storage",
        "encoding": "dynamic_array",
        "label": "struct FixedStaking.StakeInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC1155mintBatch)5975": {
        "encoding": "inplace",
        "label": "contract IERC1155mintBatch",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20mintable)5963": {
        "encoding": "inplace",
        "label": "contract IERC20mintable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(StakeInfo)5996_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FixedStaking.StakeInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakeInfo)5996_storage)dyn_storage"
      },
      "t_struct(StakeInfo)5996_storage": {
        "encoding": "inplace",
        "label": "struct FixedStaking.StakeInfo",
        "members": [
          {
            "astId": 5983,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "staked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5985,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5987,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5989,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5991,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "totalYield",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5993,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "harvestedYield",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5995,
            "contract": "contracts/FixedStaking.sol:FixedStaking",
            "label": "lastHarvestTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}