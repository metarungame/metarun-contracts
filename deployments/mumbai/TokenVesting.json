{
  "address": "0x0BEDB2c10527d21bb726280101a5a89330604aF1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getVesting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "name": "postponeVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "releasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "vestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc84edf29e40c8b9ac830ea9c4db2908eccebf25593b2169f17660a02e9b219b0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0BEDB2c10527d21bb726280101a5a89330604aF1",
    "transactionIndex": 1,
    "gasUsed": "1404601",
    "logsBloom": "0x
    "blockHash": "0x96b54a9355b39b2bda92ade4bb2d8a08739fd94683565737cb6140c3a7477ff6",
    "transactionHash": "0xc84edf29e40c8b9ac830ea9c4db2908eccebf25593b2169f17660a02e9b219b0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24081674,
        "transactionHash": "0xc84edf29e40c8b9ac830ea9c4db2908eccebf25593b2169f17660a02e9b219b0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000c29d9c09c0c2c6000000000000000000000000000000000000000000000000084cc585cc5349320000000000000000000000000000000000000000000004f926df98eced5fe4a9000000000000000000000000000000000000000000000000078a27e9c292866c0000000000000000000000000000000000000000000004f927a23688f720a76f",
        "logIndex": 2,
        "blockHash": "0x96b54a9355b39b2bda92ade4bb2d8a08739fd94683565737cb6140c3a7477ff6"
      }
    ],
    "blockNumber": 24081674,
    "cumulativeGasUsed": "1543917",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7D9BD45eb058E0C8B0A91D19760277eb20304397"
  ],
  "numDeployments": 1,
  "solcInputHash": "2663999dcf7ec3eb2d6a2e66386b65e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"postponeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A token holder contract that can release its token balance gradually like a typical vesting scheme, with a cliff and vesting period. Optionally revocable by the owner.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"TokenVesting\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenVesting.sol\":\"TokenVesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/TokenVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\n/**\\n * @title TokenVesting\\n * @dev A token holder contract that can release its token balance gradually like a\\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\\n * owner.\\n */\\ncontract TokenVesting is Context, ReentrancyGuard  {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Released(uint256 amount);\\n\\n    IERC20 private _token;\\n\\n    struct Vesting {\\n        uint256 start;\\n        uint256 interval;\\n        uint256 duration;\\n        uint256 balance;\\n        uint256 released;\\n    }\\n\\n    mapping (address => Vesting) private _vestings;\\n\\n    constructor (address token) {\\n        require(token != address(0), \\\"token address cannot be zero\\\");\\n        _token = IERC20(token);\\n    }\\n\\n    function getVesting(address beneficiary) public view returns (uint256, uint256, uint256, uint256, uint256) {\\n        Vesting memory v = _vestings[beneficiary];\\n        return (v.start, v.interval, v.duration, v.balance, v.released);\\n    }\\n\\n    function createVesting(\\n        address beneficiary,\\n        uint256 start,\\n        uint256 interval,\\n        uint256 duration,\\n        uint256 amount\\n    ) external nonReentrant {\\n        require(interval > 0 , \\\"TokenVesting #createVesting: interval must be greater than 0\\\");\\n        require(duration >= interval, \\\"TokenVesting #createVesting: interval cannot be bigger than duration\\\");\\n\\n        Vesting storage vest = _vestings[beneficiary];\\n        require(vest.balance == 0, \\\"TokenVesting #createVesting: vesting for beneficiary already created\\\");\\n\\n        _token.safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        vest.start = start;\\n        vest.interval = interval;\\n        vest.duration = duration;\\n        vest.balance = amount;\\n        vest.released = uint256(0);\\n    }\\n\\n    function postponeVesting(uint256 start) external {\\n        Vesting storage vest = _vestings[_msgSender()];\\n        require(vest.balance != 0, \\\"TokenVesting #postponeVesting: vesting for beneficiary does not exist\\\");\\n        require(vest.start < start, \\\"TokenVesting #postponeVesting: new start date cannot be earlier than original start date\\\");\\n        vest.start = start;\\n    }\\n\\n    function release(address beneficiary) external nonReentrant {\\n        uint256 unreleased = releasableAmount(beneficiary);\\n        require(unreleased > 0, \\\"TokenVesting #release: nothing to release\\\");\\n\\n        Vesting storage vest = _vestings[beneficiary];\\n\\n        vest.released = vest.released.add(unreleased);\\n        vest.balance = vest.balance.sub(unreleased);\\n\\n        _token.safeTransfer(beneficiary, unreleased);\\n        emit Released(unreleased);\\n    }\\n\\n    function releasableAmount(address beneficiary) public view returns (uint256) {\\n        return vestedAmount(beneficiary).sub(_vestings[beneficiary].released);\\n    }\\n\\n    function vestedAmount(address beneficiary) public view returns (uint256) {\\n        Vesting memory vest = _vestings[beneficiary];\\n        uint256 currentBalance = vest.balance;\\n        uint256 totalBalance = currentBalance.add(vest.released);\\n\\n        if (block.timestamp >= vest.start.add(vest.duration)) {\\n            return totalBalance;\\n        } else {\\n            uint256 numberOfInvervals = block.timestamp.sub(vest.start).div(vest.interval);\\n            uint256 totalIntervals = vest.duration.div(vest.interval);\\n            return totalBalance.mul(numberOfInvervals).div(totalIntervals);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x317544acc5c41b978b8968831b7fec98cda143d9f74c9819b6e0fc07a46a32be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019c9380380620019c9833981810160405281019062000037919062000164565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a990620001f7565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000219565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012c82620000ff565b9050919050565b6200013e816200011f565b81146200014a57600080fd5b50565b6000815190506200015e8162000133565b92915050565b6000602082840312156200017d576200017c620000fa565b5b60006200018d848285016200014d565b91505092915050565b600082825260208201905092915050565b7f746f6b656e20616464726573732063616e6e6f74206265207a65726f00000000600082015250565b6000620001df601c8362000196565b9150620001ec82620001a7565b602082019050919050565b600060208201905081810360008301526200021281620001d0565b9050919050565b6117a080620002296000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631726cbc8146100675780631916558714610097578063384711cc146100b3578063b5ec0b97146100e3578063cc49ede7146100ff578063eab23abe14610133575b600080fd5b610081600480360381019061007c9190610c82565b61014f565b60405161008e9190610cc8565b60405180910390f35b6100b160048036038101906100ac9190610c82565b6101b5565b005b6100cd60048036038101906100c89190610c82565b610365565b6040516100da9190610cc8565b60405180910390f35b6100fd60048036038101906100f89190610d0f565b6104b8565b005b61011960048036038101906101149190610c82565b61059d565b60405161012a959493929190610d3c565b60405180910390f35b61014d60048036038101906101489190610d8f565b610651565b005b60006101ae600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401546101a084610365565b61084390919063ffffffff16565b9050919050565b600260005414156101fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f290610e67565b60405180910390fd5b6002600081905550600061020e8261014f565b905060008111610253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024a90610ef9565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506102ad82826004015461085990919063ffffffff16565b81600401819055506102cc82826003015461084390919063ffffffff16565b81600301819055506103218383600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661086f9092919063ffffffff16565b7ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c565826040516103509190610cc8565b60405180910390a15050600160008190555050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600081606001519050600061040883608001518361085990919063ffffffff16565b90506104258360400151846000015161085990919063ffffffff16565b4210610436578093505050506104b3565b6000610465846020015161045786600001514261084390919063ffffffff16565b6108f590919063ffffffff16565b90506000610484856020015186604001516108f590919063ffffffff16565b90506104ab8161049d848661090b90919063ffffffff16565b6108f590919063ffffffff16565b955050505050505b919050565b6000600260006104c6610921565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160030154141561054a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054190610fb1565b60405180910390fd5b81816000015410610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058790611069565b60405180910390fd5b8181600001819055505050565b600080600080600080600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905080600001518160200151826040015183606001518460800151955095509550955095505091939590929450565b60026000541415610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e90610e67565b60405180910390fd5b6002600081905550600083116106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d9906110fb565b60405180910390fd5b82821015610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c906111b3565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160030154146107af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a69061126b565b60405180910390fd5b6108056107ba610921565b3084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610929909392919063ffffffff16565b848160000181905550838160010181905550828160020181905550818160030181905550600081600401819055505060016000819055505050505050565b6000818361085191906112ba565b905092915050565b6000818361086791906112ee565b905092915050565b6108f08363a9059cbb60e01b848460405160240161088e929190611353565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506109b2565b505050565b6000818361090391906113ab565b905092915050565b6000818361091991906113dc565b905092915050565b600033905090565b6109ac846323b872dd60e01b85858560405160240161094a93929190611436565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506109b2565b50505050565b6000610a14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a799092919063ffffffff16565b9050600081511115610a745780806020019051810190610a3491906114a5565b610a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6a90611544565b60405180910390fd5b5b505050565b6060610a888484600085610a91565b90509392505050565b606082471015610ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acd906115d6565b60405180910390fd5b610adf85610ba5565b610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590611642565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b4791906116dc565b60006040518083038185875af1925050503d8060008114610b84576040519150601f19603f3d011682016040523d82523d6000602084013e610b89565b606091505b5091509150610b99828286610bb8565b92505050949350505050565b600080823b905060008111915050919050565b60608315610bc857829050610c18565b600083511115610bdb5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0f9190611748565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4f82610c24565b9050919050565b610c5f81610c44565b8114610c6a57600080fd5b50565b600081359050610c7c81610c56565b92915050565b600060208284031215610c9857610c97610c1f565b5b6000610ca684828501610c6d565b91505092915050565b6000819050919050565b610cc281610caf565b82525050565b6000602082019050610cdd6000830184610cb9565b92915050565b610cec81610caf565b8114610cf757600080fd5b50565b600081359050610d0981610ce3565b92915050565b600060208284031215610d2557610d24610c1f565b5b6000610d3384828501610cfa565b91505092915050565b600060a082019050610d516000830188610cb9565b610d5e6020830187610cb9565b610d6b6040830186610cb9565b610d786060830185610cb9565b610d856080830184610cb9565b9695505050505050565b600080600080600060a08688031215610dab57610daa610c1f565b5b6000610db988828901610c6d565b9550506020610dca88828901610cfa565b9450506040610ddb88828901610cfa565b9350506060610dec88828901610cfa565b9250506080610dfd88828901610cfa565b9150509295509295909350565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610e51601f83610e0a565b9150610e5c82610e1b565b602082019050919050565b60006020820190508181036000830152610e8081610e44565b9050919050565b7f546f6b656e56657374696e67202372656c656173653a206e6f7468696e67207460008201527f6f2072656c656173650000000000000000000000000000000000000000000000602082015250565b6000610ee3602983610e0a565b9150610eee82610e87565b604082019050919050565b60006020820190508181036000830152610f1281610ed6565b9050919050565b7f546f6b656e56657374696e672023706f7374706f6e6556657374696e673a207660008201527f657374696e6720666f722062656e656669636961727920646f6573206e6f742060208201527f6578697374000000000000000000000000000000000000000000000000000000604082015250565b6000610f9b604583610e0a565b9150610fa682610f19565b606082019050919050565b60006020820190508181036000830152610fca81610f8e565b9050919050565b7f546f6b656e56657374696e672023706f7374706f6e6556657374696e673a206e60008201527f657720737461727420646174652063616e6e6f74206265206561726c6965722060208201527f7468616e206f726967696e616c20737461727420646174650000000000000000604082015250565b6000611053605883610e0a565b915061105e82610fd1565b606082019050919050565b6000602082019050818103600083015261108281611046565b9050919050565b7f546f6b656e56657374696e67202363726561746556657374696e673a20696e7460008201527f657276616c206d7573742062652067726561746572207468616e203000000000602082015250565b60006110e5603c83610e0a565b91506110f082611089565b604082019050919050565b60006020820190508181036000830152611114816110d8565b9050919050565b7f546f6b656e56657374696e67202363726561746556657374696e673a20696e7460008201527f657276616c2063616e6e6f7420626520626967676572207468616e206475726160208201527f74696f6e00000000000000000000000000000000000000000000000000000000604082015250565b600061119d604483610e0a565b91506111a88261111b565b606082019050919050565b600060208201905081810360008301526111cc81611190565b9050919050565b7f546f6b656e56657374696e67202363726561746556657374696e673a2076657360008201527f74696e6720666f722062656e656669636961727920616c72656164792063726560208201527f6174656400000000000000000000000000000000000000000000000000000000604082015250565b6000611255604483610e0a565b9150611260826111d3565b606082019050919050565b6000602082019050818103600083015261128481611248565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112c582610caf565b91506112d083610caf565b9250828210156112e3576112e261128b565b5b828203905092915050565b60006112f982610caf565b915061130483610caf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113395761133861128b565b5b828201905092915050565b61134d81610c44565b82525050565b60006040820190506113686000830185611344565b6113756020830184610cb9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b682610caf565b91506113c183610caf565b9250826113d1576113d061137c565b5b828204905092915050565b60006113e782610caf565b91506113f283610caf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561142b5761142a61128b565b5b828202905092915050565b600060608201905061144b6000830186611344565b6114586020830185611344565b6114656040830184610cb9565b949350505050565b60008115159050919050565b6114828161146d565b811461148d57600080fd5b50565b60008151905061149f81611479565b92915050565b6000602082840312156114bb576114ba610c1f565b5b60006114c984828501611490565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061152e602a83610e0a565b9150611539826114d2565b604082019050919050565b6000602082019050818103600083015261155d81611521565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006115c0602683610e0a565b91506115cb82611564565b604082019050919050565b600060208201905081810360008301526115ef816115b3565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061162c601d83610e0a565b9150611637826115f6565b602082019050919050565b6000602082019050818103600083015261165b8161161f565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561169657808201518184015260208101905061167b565b838111156116a5576000848401525b50505050565b60006116b682611662565b6116c0818561166d565b93506116d0818560208601611678565b80840191505092915050565b60006116e882846116ab565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061171a826116f3565b6117248185610e0a565b9350611734818560208601611678565b61173d816116fe565b840191505092915050565b60006020820190508181036000830152611762818461170f565b90509291505056fea2646970667358221220b3a267655dc1675744eb4bd01e3e5f20bf6d694c00008e5d57de7af8c2c18db364736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631726cbc8146100675780631916558714610097578063384711cc146100b3578063b5ec0b97146100e3578063cc49ede7146100ff578063eab23abe14610133575b600080fd5b610081600480360381019061007c9190610c82565b61014f565b60405161008e9190610cc8565b60405180910390f35b6100b160048036038101906100ac9190610c82565b6101b5565b005b6100cd60048036038101906100c89190610c82565b610365565b6040516100da9190610cc8565b60405180910390f35b6100fd60048036038101906100f89190610d0f565b6104b8565b005b61011960048036038101906101149190610c82565b61059d565b60405161012a959493929190610d3c565b60405180910390f35b61014d60048036038101906101489190610d8f565b610651565b005b60006101ae600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401546101a084610365565b61084390919063ffffffff16565b9050919050565b600260005414156101fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f290610e67565b60405180910390fd5b6002600081905550600061020e8261014f565b905060008111610253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024a90610ef9565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506102ad82826004015461085990919063ffffffff16565b81600401819055506102cc82826003015461084390919063ffffffff16565b81600301819055506103218383600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661086f9092919063ffffffff16565b7ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c565826040516103509190610cc8565b60405180910390a15050600160008190555050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600081606001519050600061040883608001518361085990919063ffffffff16565b90506104258360400151846000015161085990919063ffffffff16565b4210610436578093505050506104b3565b6000610465846020015161045786600001514261084390919063ffffffff16565b6108f590919063ffffffff16565b90506000610484856020015186604001516108f590919063ffffffff16565b90506104ab8161049d848661090b90919063ffffffff16565b6108f590919063ffffffff16565b955050505050505b919050565b6000600260006104c6610921565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160030154141561054a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054190610fb1565b60405180910390fd5b81816000015410610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058790611069565b60405180910390fd5b8181600001819055505050565b600080600080600080600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905080600001518160200151826040015183606001518460800151955095509550955095505091939590929450565b60026000541415610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e90610e67565b60405180910390fd5b6002600081905550600083116106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d9906110fb565b60405180910390fd5b82821015610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c906111b3565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160030154146107af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a69061126b565b60405180910390fd5b6108056107ba610921565b3084600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610929909392919063ffffffff16565b848160000181905550838160010181905550828160020181905550818160030181905550600081600401819055505060016000819055505050505050565b6000818361085191906112ba565b905092915050565b6000818361086791906112ee565b905092915050565b6108f08363a9059cbb60e01b848460405160240161088e929190611353565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506109b2565b505050565b6000818361090391906113ab565b905092915050565b6000818361091991906113dc565b905092915050565b600033905090565b6109ac846323b872dd60e01b85858560405160240161094a93929190611436565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506109b2565b50505050565b6000610a14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a799092919063ffffffff16565b9050600081511115610a745780806020019051810190610a3491906114a5565b610a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6a90611544565b60405180910390fd5b5b505050565b6060610a888484600085610a91565b90509392505050565b606082471015610ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acd906115d6565b60405180910390fd5b610adf85610ba5565b610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590611642565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b4791906116dc565b60006040518083038185875af1925050503d8060008114610b84576040519150601f19603f3d011682016040523d82523d6000602084013e610b89565b606091505b5091509150610b99828286610bb8565b92505050949350505050565b600080823b905060008111915050919050565b60608315610bc857829050610c18565b600083511115610bdb5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0f9190611748565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4f82610c24565b9050919050565b610c5f81610c44565b8114610c6a57600080fd5b50565b600081359050610c7c81610c56565b92915050565b600060208284031215610c9857610c97610c1f565b5b6000610ca684828501610c6d565b91505092915050565b6000819050919050565b610cc281610caf565b82525050565b6000602082019050610cdd6000830184610cb9565b92915050565b610cec81610caf565b8114610cf757600080fd5b50565b600081359050610d0981610ce3565b92915050565b600060208284031215610d2557610d24610c1f565b5b6000610d3384828501610cfa565b91505092915050565b600060a082019050610d516000830188610cb9565b610d5e6020830187610cb9565b610d6b6040830186610cb9565b610d786060830185610cb9565b610d856080830184610cb9565b9695505050505050565b600080600080600060a08688031215610dab57610daa610c1f565b5b6000610db988828901610c6d565b9550506020610dca88828901610cfa565b9450506040610ddb88828901610cfa565b9350506060610dec88828901610cfa565b9250506080610dfd88828901610cfa565b9150509295509295909350565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610e51601f83610e0a565b9150610e5c82610e1b565b602082019050919050565b60006020820190508181036000830152610e8081610e44565b9050919050565b7f546f6b656e56657374696e67202372656c656173653a206e6f7468696e67207460008201527f6f2072656c656173650000000000000000000000000000000000000000000000602082015250565b6000610ee3602983610e0a565b9150610eee82610e87565b604082019050919050565b60006020820190508181036000830152610f1281610ed6565b9050919050565b7f546f6b656e56657374696e672023706f7374706f6e6556657374696e673a207660008201527f657374696e6720666f722062656e656669636961727920646f6573206e6f742060208201527f6578697374000000000000000000000000000000000000000000000000000000604082015250565b6000610f9b604583610e0a565b9150610fa682610f19565b606082019050919050565b60006020820190508181036000830152610fca81610f8e565b9050919050565b7f546f6b656e56657374696e672023706f7374706f6e6556657374696e673a206e60008201527f657720737461727420646174652063616e6e6f74206265206561726c6965722060208201527f7468616e206f726967696e616c20737461727420646174650000000000000000604082015250565b6000611053605883610e0a565b915061105e82610fd1565b606082019050919050565b6000602082019050818103600083015261108281611046565b9050919050565b7f546f6b656e56657374696e67202363726561746556657374696e673a20696e7460008201527f657276616c206d7573742062652067726561746572207468616e203000000000602082015250565b60006110e5603c83610e0a565b91506110f082611089565b604082019050919050565b60006020820190508181036000830152611114816110d8565b9050919050565b7f546f6b656e56657374696e67202363726561746556657374696e673a20696e7460008201527f657276616c2063616e6e6f7420626520626967676572207468616e206475726160208201527f74696f6e00000000000000000000000000000000000000000000000000000000604082015250565b600061119d604483610e0a565b91506111a88261111b565b606082019050919050565b600060208201905081810360008301526111cc81611190565b9050919050565b7f546f6b656e56657374696e67202363726561746556657374696e673a2076657360008201527f74696e6720666f722062656e656669636961727920616c72656164792063726560208201527f6174656400000000000000000000000000000000000000000000000000000000604082015250565b6000611255604483610e0a565b9150611260826111d3565b606082019050919050565b6000602082019050818103600083015261128481611248565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112c582610caf565b91506112d083610caf565b9250828210156112e3576112e261128b565b5b828203905092915050565b60006112f982610caf565b915061130483610caf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113395761133861128b565b5b828201905092915050565b61134d81610c44565b82525050565b60006040820190506113686000830185611344565b6113756020830184610cb9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b682610caf565b91506113c183610caf565b9250826113d1576113d061137c565b5b828204905092915050565b60006113e782610caf565b91506113f283610caf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561142b5761142a61128b565b5b828202905092915050565b600060608201905061144b6000830186611344565b6114586020830185611344565b6114656040830184610cb9565b949350505050565b60008115159050919050565b6114828161146d565b811461148d57600080fd5b50565b60008151905061149f81611479565b92915050565b6000602082840312156114bb576114ba610c1f565b5b60006114c984828501611490565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061152e602a83610e0a565b9150611539826114d2565b604082019050919050565b6000602082019050818103600083015261155d81611521565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006115c0602683610e0a565b91506115cb82611564565b604082019050919050565b600060208201905081810360008301526115ef816115b3565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061162c601d83610e0a565b9150611637826115f6565b602082019050919050565b6000602082019050818103600083015261165b8161161f565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561169657808201518184015260208101905061167b565b838111156116a5576000848401525b50505050565b60006116b682611662565b6116c0818561166d565b93506116d0818560208601611678565b80840191505092915050565b60006116e882846116ab565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061171a826116f3565b6117248185610e0a565b9350611734818560208601611678565b61173d816116fe565b840191505092915050565b60006020820190508181036000830152611762818461170f565b90509291505056fea2646970667358221220b3a267655dc1675744eb4bd01e3e5f20bf6d694c00008e5d57de7af8c2c18db364736f6c634300080b0033",
  "devdoc": {
    "details": "A token holder contract that can release its token balance gradually like a typical vesting scheme, with a cliff and vesting period. Optionally revocable by the owner.",
    "kind": "dev",
    "methods": {},
    "title": "TokenVesting",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 392,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2403,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "_token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 2419,
        "contract": "contracts/TokenVesting.sol:TokenVesting",
        "label": "_vestings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Vesting)2414_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Vesting)2414_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenVesting.Vesting)",
        "numberOfBytes": "32",
        "value": "t_struct(Vesting)2414_storage"
      },
      "t_struct(Vesting)2414_storage": {
        "encoding": "inplace",
        "label": "struct TokenVesting.Vesting",
        "members": [
          {
            "astId": 2405,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2407,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "interval",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2409,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2411,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "balance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2413,
            "contract": "contracts/TokenVesting.sol:TokenVesting",
            "label": "released",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}