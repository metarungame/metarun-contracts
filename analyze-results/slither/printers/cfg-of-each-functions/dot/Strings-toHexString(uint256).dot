digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value == 0

IRs:
TMP_254(bool) = value == 0
CONDITION TMP_254"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0x00

IRs:
RETURN 0x00"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
temp = value

IRs:
temp(uint256) := value(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
length = 0

IRs:
length(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
temp != 0

IRs:
TMP_255(bool) = temp != 0
CONDITION TMP_255"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
length ++

IRs:
TMP_256(uint256) := length(uint256)
length(uint256) = length (c)+ 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
temp >>= 8

IRs:
temp(uint256) = temp >> 8"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
toHexString(value,length)

IRs:
TMP_257(string) = INTERNAL_CALL, Strings.toHexString(uint256,uint256)(value,length)
RETURN TMP_257"];
}
